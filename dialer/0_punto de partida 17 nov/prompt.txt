Now pay attention. I need to scrap the synthetic data stream and replace it with my own data stream, which is ruled by a script named Ejec.py that has this structure and is in the same folder as app.py and dialer_ratio_predictor.py:

from func.conexion_ant import actualizar_historico
from func.conexion_act import conexion_base
import time
import pandas as pd
path_config = r"path to config.ini"
path_key = r"path to clave.key"
path_credenciales = r"path to credenciales.txt"
path_sql_act = r"path to ConsultaAct.sql"
path_sql_ant = r"path to ConsultaAnt.sql"
fecha_actual = (pd.Timestamp.now()).strftime("%Y-%m-%d")
path_csv = "path to Datos_historico.csv"
actualizar_historico(path_config, path_key, path_credenciales, path_sql_ant, path_csv)
while True:
       db = conexion_base(path_config, path_key, path_credenciales,  path_sql_act, fecha_actual)
       print(db)
       time.sleep(1)

As you can see, it has a while loop that updates constantly a dataframe db, which has the columns timestamp, 
agents_available, agents_connected, dials, contacts, abandonments and call_duration. The real-time contact center
optimizer should feed from the db dataframe that Eject.py updates constantly from the database instead of the ContactCenterSimulator synthetic data.