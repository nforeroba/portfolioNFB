2024-09-26 13:23:58,099:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:23:58,099:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:23:58,099:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:23:58,099:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:23:58,692:INFO:PyCaret ClassificationExperiment
2024-09-26 13:23:58,692:INFO:Logging name: clf-default-name
2024-09-26 13:23:58,692:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:23:58,692:INFO:version 3.3.2
2024-09-26 13:23:58,692:INFO:Initializing setup()
2024-09-26 13:23:58,692:INFO:self.USI: c611
2024-09-26 13:23:58,692:INFO:self._variable_keys: {'exp_name_log', 'gpu_param', 'logging_param', 'is_multiclass', '_available_plots', 'n_jobs_param', 'html_param', 'log_plots_param', 'X_train', 'y_test', 'y_train', 'idx', 'X', 'fold_shuffle_param', 'X_test', 'memory', '_ml_usecase', 'fold_generator', 'USI', 'pipeline', 'y', 'gpu_n_jobs_param', 'data', 'fold_groups_param', 'exp_id', 'target_param', 'fix_imbalance', 'seed'}
2024-09-26 13:23:58,692:INFO:Checking environment
2024-09-26 13:23:58,692:INFO:python_version: 3.10.15
2024-09-26 13:23:58,693:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:23:58,693:INFO:machine: AMD64
2024-09-26 13:23:58,693:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:23:58,697:INFO:Memory: svmem(total=137338810368, available=122557784064, percent=10.8, used=14781026304, free=122557784064)
2024-09-26 13:23:58,697:INFO:Physical Core: 8
2024-09-26 13:23:58,697:INFO:Logical Core: 16
2024-09-26 13:23:58,698:INFO:Checking libraries
2024-09-26 13:23:58,698:INFO:System:
2024-09-26 13:23:58,698:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:23:58,698:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:23:58,698:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:23:58,698:INFO:PyCaret required dependencies:
2024-09-26 13:23:58,724:INFO:                 pip: 24.2
2024-09-26 13:23:58,724:INFO:          setuptools: 75.1.0
2024-09-26 13:23:58,724:INFO:             pycaret: 3.3.2
2024-09-26 13:23:58,724:INFO:             IPython: 8.27.0
2024-09-26 13:23:58,724:INFO:          ipywidgets: 8.1.5
2024-09-26 13:23:58,724:INFO:                tqdm: 4.66.5
2024-09-26 13:23:58,725:INFO:               numpy: 1.26.4
2024-09-26 13:23:58,725:INFO:              pandas: 2.1.4
2024-09-26 13:23:58,725:INFO:              jinja2: 3.1.4
2024-09-26 13:23:58,725:INFO:               scipy: 1.11.4
2024-09-26 13:23:58,725:INFO:              joblib: 1.3.2
2024-09-26 13:23:58,725:INFO:             sklearn: 1.4.2
2024-09-26 13:23:58,725:INFO:                pyod: 2.0.2
2024-09-26 13:23:58,725:INFO:            imblearn: 0.12.3
2024-09-26 13:23:58,725:INFO:   category_encoders: 2.6.3
2024-09-26 13:23:58,726:INFO:            lightgbm: 4.5.0
2024-09-26 13:23:58,726:INFO:               numba: 0.60.0
2024-09-26 13:23:58,726:INFO:            requests: 2.32.3
2024-09-26 13:23:58,726:INFO:          matplotlib: 3.7.5
2024-09-26 13:23:58,726:INFO:          scikitplot: 0.3.7
2024-09-26 13:23:58,726:INFO:         yellowbrick: 1.5
2024-09-26 13:23:58,726:INFO:              plotly: 5.24.1
2024-09-26 13:23:58,726:INFO:    plotly-resampler: Not installed
2024-09-26 13:23:58,726:INFO:             kaleido: 0.2.1
2024-09-26 13:23:58,726:INFO:           schemdraw: 0.15
2024-09-26 13:23:58,726:INFO:         statsmodels: 0.14.3
2024-09-26 13:23:58,726:INFO:              sktime: 0.26.0
2024-09-26 13:23:58,726:INFO:               tbats: 1.1.3
2024-09-26 13:23:58,726:INFO:            pmdarima: 2.0.4
2024-09-26 13:23:58,726:INFO:              psutil: 6.0.0
2024-09-26 13:23:58,726:INFO:          markupsafe: 2.1.5
2024-09-26 13:23:58,726:INFO:             pickle5: Not installed
2024-09-26 13:23:58,726:INFO:         cloudpickle: 3.0.0
2024-09-26 13:23:58,726:INFO:         deprecation: 2.1.0
2024-09-26 13:23:58,726:INFO:              xxhash: 3.5.0
2024-09-26 13:23:58,726:INFO:           wurlitzer: Not installed
2024-09-26 13:23:58,727:INFO:PyCaret optional dependencies:
2024-09-26 13:23:58,742:INFO:                shap: 0.46.0
2024-09-26 13:23:58,742:INFO:           interpret: Not installed
2024-09-26 13:23:58,742:INFO:                umap: Not installed
2024-09-26 13:23:58,742:INFO:     ydata_profiling: Not installed
2024-09-26 13:23:58,742:INFO:  explainerdashboard: Not installed
2024-09-26 13:23:58,742:INFO:             autoviz: Not installed
2024-09-26 13:23:58,742:INFO:           fairlearn: Not installed
2024-09-26 13:23:58,742:INFO:          deepchecks: Not installed
2024-09-26 13:23:58,742:INFO:             xgboost: Not installed
2024-09-26 13:23:58,742:INFO:            catboost: Not installed
2024-09-26 13:23:58,742:INFO:              kmodes: Not installed
2024-09-26 13:23:58,742:INFO:             mlxtend: Not installed
2024-09-26 13:23:58,742:INFO:       statsforecast: Not installed
2024-09-26 13:23:58,742:INFO:        tune_sklearn: Not installed
2024-09-26 13:23:58,742:INFO:                 ray: Not installed
2024-09-26 13:23:58,742:INFO:            hyperopt: Not installed
2024-09-26 13:23:58,742:INFO:              optuna: Not installed
2024-09-26 13:23:58,743:INFO:               skopt: Not installed
2024-09-26 13:23:58,743:INFO:              mlflow: Not installed
2024-09-26 13:23:58,743:INFO:              gradio: Not installed
2024-09-26 13:23:58,743:INFO:             fastapi: Not installed
2024-09-26 13:23:58,743:INFO:             uvicorn: Not installed
2024-09-26 13:23:58,743:INFO:              m2cgen: Not installed
2024-09-26 13:23:58,743:INFO:           evidently: Not installed
2024-09-26 13:23:58,743:INFO:               fugue: Not installed
2024-09-26 13:23:58,743:INFO:           streamlit: Not installed
2024-09-26 13:23:58,743:INFO:             prophet: Not installed
2024-09-26 13:23:58,743:INFO:None
2024-09-26 13:23:58,743:INFO:Set up data.
2024-09-26 13:23:58,749:INFO:Set up folding strategy.
2024-09-26 13:23:58,750:INFO:Set up train/test split.
2024-09-26 13:23:58,758:INFO:Set up index.
2024-09-26 13:23:58,759:INFO:Assigning column types.
2024-09-26 13:23:58,763:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:23:58,817:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:23:58,821:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:23:58,860:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:58,860:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:58,915:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:23:58,916:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:23:58,949:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:58,949:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:58,950:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:23:59,000:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:23:59,033:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,033:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,085:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:23:59,117:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,117:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,118:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:23:59,201:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,201:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,284:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,284:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,286:INFO:Preparing preprocessing pipeline...
2024-09-26 13:23:59,287:INFO:Set up label encoding.
2024-09-26 13:23:59,287:INFO:Set up simple imputation.
2024-09-26 13:23:59,290:INFO:Set up encoding of ordinal features.
2024-09-26 13:23:59,293:INFO:Set up encoding of categorical features.
2024-09-26 13:23:59,354:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:23:59,379:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                    transformer=OrdinalEncoder(cols=['education',
                                                                     'self_employed'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'education',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-09-26 13:23:59,379:INFO:Creating final display dataframe.
2024-09-26 13:23:59,650:INFO:Setup _display_container:                     Description                       Value
0                    Session id                        8541
1                        Target                 loan_status
2                   Target type                      Binary
3                Target mapping   Approved: 0,  Rejected: 1
4           Original data shape                  (4269, 12)
5        Transformed data shape                  (4269, 12)
6   Transformed train set shape                  (2988, 12)
7    Transformed test set shape                  (1281, 12)
8              Numeric features                           9
9          Categorical features                           2
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16               Fold Generator             StratifiedKFold
17                  Fold Number                          10
18                     CPU Jobs                          -1
19                      Use GPU                       False
20               Log Experiment                       False
21              Experiment Name            clf-default-name
22                          USI                        c611
2024-09-26 13:23:59,740:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,741:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,824:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,825:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:23:59,826:INFO:setup() successfully completed in 1.14s...............
2024-09-26 13:23:59,826:INFO:Initializing compare_models()
2024-09-26 13:23:59,826:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-09-26 13:23:59,826:INFO:Checking exceptions
2024-09-26 13:23:59,830:INFO:Preparing display monitor
2024-09-26 13:23:59,852:INFO:Initializing Logistic Regression
2024-09-26 13:23:59,852:INFO:Total runtime is 8.340676625569662e-06 minutes
2024-09-26 13:23:59,855:INFO:SubProcess create_model() called ==================================
2024-09-26 13:23:59,855:INFO:Initializing create_model()
2024-09-26 13:23:59,856:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:23:59,856:INFO:Checking exceptions
2024-09-26 13:23:59,856:INFO:Importing libraries
2024-09-26 13:23:59,856:INFO:Copying training dataset
2024-09-26 13:23:59,860:INFO:Defining folds
2024-09-26 13:23:59,860:INFO:Declaring metric variables
2024-09-26 13:23:59,863:INFO:Importing untrained model
2024-09-26 13:23:59,867:INFO:Logistic Regression Imported successfully
2024-09-26 13:23:59,873:INFO:Starting cross validation
2024-09-26 13:23:59,875:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:03,522:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,529:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,535:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,540:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,546:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,552:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,583:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,583:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,588:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,589:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,593:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,596:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,628:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,633:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,635:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,638:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,641:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,641:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,643:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,647:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,647:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,648:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,648:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,649:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,651:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,653:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,653:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,653:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,657:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,658:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,675:INFO:Calculating mean and std
2024-09-26 13:24:03,677:INFO:Creating metrics dataframe
2024-09-26 13:24:03,680:INFO:Uploading results into container
2024-09-26 13:24:03,681:INFO:Uploading model into container now
2024-09-26 13:24:03,682:INFO:_master_model_container: 1
2024-09-26 13:24:03,682:INFO:_display_container: 2
2024-09-26 13:24:03,682:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8541, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:24:03,683:INFO:create_model() successfully completed......................................
2024-09-26 13:24:03,764:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:03,764:INFO:Creating metrics dataframe
2024-09-26 13:24:03,771:INFO:Initializing K Neighbors Classifier
2024-09-26 13:24:03,771:INFO:Total runtime is 0.06532485087712606 minutes
2024-09-26 13:24:03,774:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:03,774:INFO:Initializing create_model()
2024-09-26 13:24:03,774:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:03,774:INFO:Checking exceptions
2024-09-26 13:24:03,774:INFO:Importing libraries
2024-09-26 13:24:03,774:INFO:Copying training dataset
2024-09-26 13:24:03,780:INFO:Defining folds
2024-09-26 13:24:03,780:INFO:Declaring metric variables
2024-09-26 13:24:03,784:INFO:Importing untrained model
2024-09-26 13:24:03,788:INFO:K Neighbors Classifier Imported successfully
2024-09-26 13:24:03,794:INFO:Starting cross validation
2024-09-26 13:24:03,796:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:03,976:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,980:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,982:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,983:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,988:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,992:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,992:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,997:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:03,998:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:04,002:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:04,003:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,366:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,367:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,367:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,368:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,368:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,368:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,371:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,372:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,372:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,373:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,373:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,374:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,376:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,377:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,378:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,378:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,379:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,380:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,405:INFO:Calculating mean and std
2024-09-26 13:24:06,406:INFO:Creating metrics dataframe
2024-09-26 13:24:06,408:INFO:Uploading results into container
2024-09-26 13:24:06,409:INFO:Uploading model into container now
2024-09-26 13:24:06,410:INFO:_master_model_container: 2
2024-09-26 13:24:06,410:INFO:_display_container: 2
2024-09-26 13:24:06,411:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-26 13:24:06,411:INFO:create_model() successfully completed......................................
2024-09-26 13:24:06,502:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:06,502:INFO:Creating metrics dataframe
2024-09-26 13:24:06,509:INFO:Initializing Naive Bayes
2024-09-26 13:24:06,509:INFO:Total runtime is 0.11095567146937052 minutes
2024-09-26 13:24:06,512:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:06,513:INFO:Initializing create_model()
2024-09-26 13:24:06,513:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:06,513:INFO:Checking exceptions
2024-09-26 13:24:06,513:INFO:Importing libraries
2024-09-26 13:24:06,513:INFO:Copying training dataset
2024-09-26 13:24:06,518:INFO:Defining folds
2024-09-26 13:24:06,518:INFO:Declaring metric variables
2024-09-26 13:24:06,522:INFO:Importing untrained model
2024-09-26 13:24:06,525:INFO:Naive Bayes Imported successfully
2024-09-26 13:24:06,531:INFO:Starting cross validation
2024-09-26 13:24:06,532:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:06,628:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,630:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,632:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,634:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,634:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,634:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,637:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,638:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,638:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,639:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,640:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,640:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,641:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,642:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,643:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,643:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,644:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,644:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,645:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,646:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,648:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,649:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,649:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,650:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,651:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,652:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,652:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,653:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,655:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,659:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,668:INFO:Calculating mean and std
2024-09-26 13:24:06,669:INFO:Creating metrics dataframe
2024-09-26 13:24:06,671:INFO:Uploading results into container
2024-09-26 13:24:06,672:INFO:Uploading model into container now
2024-09-26 13:24:06,672:INFO:_master_model_container: 3
2024-09-26 13:24:06,672:INFO:_display_container: 2
2024-09-26 13:24:06,673:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-26 13:24:06,673:INFO:create_model() successfully completed......................................
2024-09-26 13:24:06,740:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:06,740:INFO:Creating metrics dataframe
2024-09-26 13:24:06,747:INFO:Initializing Decision Tree Classifier
2024-09-26 13:24:06,747:INFO:Total runtime is 0.11492946942647297 minutes
2024-09-26 13:24:06,750:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:06,751:INFO:Initializing create_model()
2024-09-26 13:24:06,751:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:06,751:INFO:Checking exceptions
2024-09-26 13:24:06,751:INFO:Importing libraries
2024-09-26 13:24:06,751:INFO:Copying training dataset
2024-09-26 13:24:06,755:INFO:Defining folds
2024-09-26 13:24:06,755:INFO:Declaring metric variables
2024-09-26 13:24:06,758:INFO:Importing untrained model
2024-09-26 13:24:06,761:INFO:Decision Tree Classifier Imported successfully
2024-09-26 13:24:06,767:INFO:Starting cross validation
2024-09-26 13:24:06,769:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:06,862:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,864:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,867:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,869:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,870:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,871:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,871:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,871:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,873:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,875:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,876:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,877:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,877:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,877:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,879:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,879:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,881:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,882:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,882:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,883:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,883:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,887:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,888:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,888:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,889:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,892:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,892:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,893:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,898:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,901:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:06,917:INFO:Calculating mean and std
2024-09-26 13:24:06,918:INFO:Creating metrics dataframe
2024-09-26 13:24:06,920:INFO:Uploading results into container
2024-09-26 13:24:06,920:INFO:Uploading model into container now
2024-09-26 13:24:06,921:INFO:_master_model_container: 4
2024-09-26 13:24:06,921:INFO:_display_container: 2
2024-09-26 13:24:06,921:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8541, splitter='best')
2024-09-26 13:24:06,922:INFO:create_model() successfully completed......................................
2024-09-26 13:24:06,988:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:06,989:INFO:Creating metrics dataframe
2024-09-26 13:24:06,997:INFO:Initializing SVM - Linear Kernel
2024-09-26 13:24:06,997:INFO:Total runtime is 0.11909152666727701 minutes
2024-09-26 13:24:07,002:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:07,002:INFO:Initializing create_model()
2024-09-26 13:24:07,002:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:07,003:INFO:Checking exceptions
2024-09-26 13:24:07,003:INFO:Importing libraries
2024-09-26 13:24:07,003:INFO:Copying training dataset
2024-09-26 13:24:07,008:INFO:Defining folds
2024-09-26 13:24:07,008:INFO:Declaring metric variables
2024-09-26 13:24:07,012:INFO:Importing untrained model
2024-09-26 13:24:07,015:INFO:SVM - Linear Kernel Imported successfully
2024-09-26 13:24:07,022:INFO:Starting cross validation
2024-09-26 13:24:07,023:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:07,126:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,129:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,133:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,133:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,134:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,136:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,138:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,138:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,139:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,139:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,141:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,142:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,142:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,144:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,144:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,145:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,146:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,147:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:07,148:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,149:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,150:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,151:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,154:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,155:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,155:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,155:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,157:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:07,159:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,159:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,159:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,161:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:07,161:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:07,163:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,163:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,181:INFO:Calculating mean and std
2024-09-26 13:24:07,183:INFO:Creating metrics dataframe
2024-09-26 13:24:07,184:INFO:Uploading results into container
2024-09-26 13:24:07,185:INFO:Uploading model into container now
2024-09-26 13:24:07,185:INFO:_master_model_container: 5
2024-09-26 13:24:07,185:INFO:_display_container: 2
2024-09-26 13:24:07,186:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=8541, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-26 13:24:07,186:INFO:create_model() successfully completed......................................
2024-09-26 13:24:07,253:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:07,253:INFO:Creating metrics dataframe
2024-09-26 13:24:07,261:INFO:Initializing Ridge Classifier
2024-09-26 13:24:07,261:INFO:Total runtime is 0.12349334160486856 minutes
2024-09-26 13:24:07,265:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:07,265:INFO:Initializing create_model()
2024-09-26 13:24:07,265:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:07,265:INFO:Checking exceptions
2024-09-26 13:24:07,265:INFO:Importing libraries
2024-09-26 13:24:07,265:INFO:Copying training dataset
2024-09-26 13:24:07,270:INFO:Defining folds
2024-09-26 13:24:07,270:INFO:Declaring metric variables
2024-09-26 13:24:07,273:INFO:Importing untrained model
2024-09-26 13:24:07,277:INFO:Ridge Classifier Imported successfully
2024-09-26 13:24:07,283:INFO:Starting cross validation
2024-09-26 13:24:07,284:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:07,374:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,378:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,379:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,380:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,382:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,383:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,383:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,385:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,386:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,387:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,387:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,388:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,389:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,389:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,390:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,390:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,391:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,391:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,392:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,393:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,395:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,396:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,397:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,397:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,398:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,400:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,402:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,403:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,403:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,407:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,414:INFO:Calculating mean and std
2024-09-26 13:24:07,415:INFO:Creating metrics dataframe
2024-09-26 13:24:07,417:INFO:Uploading results into container
2024-09-26 13:24:07,418:INFO:Uploading model into container now
2024-09-26 13:24:07,418:INFO:_master_model_container: 6
2024-09-26 13:24:07,418:INFO:_display_container: 2
2024-09-26 13:24:07,419:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=8541, solver='auto',
                tol=0.0001)
2024-09-26 13:24:07,419:INFO:create_model() successfully completed......................................
2024-09-26 13:24:07,489:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:07,489:INFO:Creating metrics dataframe
2024-09-26 13:24:07,497:INFO:Initializing Random Forest Classifier
2024-09-26 13:24:07,497:INFO:Total runtime is 0.12743061383565266 minutes
2024-09-26 13:24:07,500:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:07,501:INFO:Initializing create_model()
2024-09-26 13:24:07,501:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:07,501:INFO:Checking exceptions
2024-09-26 13:24:07,501:INFO:Importing libraries
2024-09-26 13:24:07,501:INFO:Copying training dataset
2024-09-26 13:24:07,506:INFO:Defining folds
2024-09-26 13:24:07,506:INFO:Declaring metric variables
2024-09-26 13:24:07,509:INFO:Importing untrained model
2024-09-26 13:24:07,512:INFO:Random Forest Classifier Imported successfully
2024-09-26 13:24:07,519:INFO:Starting cross validation
2024-09-26 13:24:07,520:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:07,980:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,985:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,991:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,995:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,995:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,995:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,995:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:07,996:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,000:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,001:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,001:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,002:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,002:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,005:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,005:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,007:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,007:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,007:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,011:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,012:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,016:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,017:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,020:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,021:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,025:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,029:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,032:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,040:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,043:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,048:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,066:INFO:Calculating mean and std
2024-09-26 13:24:08,067:INFO:Creating metrics dataframe
2024-09-26 13:24:08,069:INFO:Uploading results into container
2024-09-26 13:24:08,069:INFO:Uploading model into container now
2024-09-26 13:24:08,070:INFO:_master_model_container: 7
2024-09-26 13:24:08,070:INFO:_display_container: 2
2024-09-26 13:24:08,071:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8541, verbose=0,
                       warm_start=False)
2024-09-26 13:24:08,071:INFO:create_model() successfully completed......................................
2024-09-26 13:24:08,138:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:08,138:INFO:Creating metrics dataframe
2024-09-26 13:24:08,146:INFO:Initializing Quadratic Discriminant Analysis
2024-09-26 13:24:08,146:INFO:Total runtime is 0.13824858268102008 minutes
2024-09-26 13:24:08,149:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:08,150:INFO:Initializing create_model()
2024-09-26 13:24:08,150:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:08,150:INFO:Checking exceptions
2024-09-26 13:24:08,150:INFO:Importing libraries
2024-09-26 13:24:08,150:INFO:Copying training dataset
2024-09-26 13:24:08,154:INFO:Defining folds
2024-09-26 13:24:08,154:INFO:Declaring metric variables
2024-09-26 13:24:08,157:INFO:Importing untrained model
2024-09-26 13:24:08,161:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-26 13:24:08,168:INFO:Starting cross validation
2024-09-26 13:24:08,170:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:08,267:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,272:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,272:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,275:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,275:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,276:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,276:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,277:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,277:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,278:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,279:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,280:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,281:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,281:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,282:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,282:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,285:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,285:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,286:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,287:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,288:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,289:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,289:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,291:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,293:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,294:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,297:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,300:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,300:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,302:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,314:INFO:Calculating mean and std
2024-09-26 13:24:08,316:INFO:Creating metrics dataframe
2024-09-26 13:24:08,319:INFO:Uploading results into container
2024-09-26 13:24:08,319:INFO:Uploading model into container now
2024-09-26 13:24:08,320:INFO:_master_model_container: 8
2024-09-26 13:24:08,320:INFO:_display_container: 2
2024-09-26 13:24:08,321:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-26 13:24:08,321:INFO:create_model() successfully completed......................................
2024-09-26 13:24:08,390:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:08,390:INFO:Creating metrics dataframe
2024-09-26 13:24:08,400:INFO:Initializing Ada Boost Classifier
2024-09-26 13:24:08,400:INFO:Total runtime is 0.1424667477607727 minutes
2024-09-26 13:24:08,403:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:08,403:INFO:Initializing create_model()
2024-09-26 13:24:08,403:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:08,403:INFO:Checking exceptions
2024-09-26 13:24:08,403:INFO:Importing libraries
2024-09-26 13:24:08,403:INFO:Copying training dataset
2024-09-26 13:24:08,408:INFO:Defining folds
2024-09-26 13:24:08,408:INFO:Declaring metric variables
2024-09-26 13:24:08,411:INFO:Importing untrained model
2024-09-26 13:24:08,414:INFO:Ada Boost Classifier Imported successfully
2024-09-26 13:24:08,422:INFO:Starting cross validation
2024-09-26 13:24:08,423:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:08,483:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:24:08,485:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:24:08,486:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:24:08,489:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:24:08,489:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:24:08,493:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:24:08,495:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:24:08,498:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:24:08,499:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:24:08,507:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:24:08,716:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,721:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,723:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,725:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,726:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,728:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,729:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,730:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,733:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,734:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,734:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,735:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,736:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,738:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,739:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,740:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,740:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,741:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,741:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,742:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,743:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,743:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,746:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,747:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,747:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,747:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,751:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,752:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,752:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,752:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:08,766:INFO:Calculating mean and std
2024-09-26 13:24:08,768:INFO:Creating metrics dataframe
2024-09-26 13:24:08,769:INFO:Uploading results into container
2024-09-26 13:24:08,770:INFO:Uploading model into container now
2024-09-26 13:24:08,770:INFO:_master_model_container: 9
2024-09-26 13:24:08,770:INFO:_display_container: 2
2024-09-26 13:24:08,771:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=8541)
2024-09-26 13:24:08,771:INFO:create_model() successfully completed......................................
2024-09-26 13:24:08,839:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:08,839:INFO:Creating metrics dataframe
2024-09-26 13:24:08,848:INFO:Initializing Gradient Boosting Classifier
2024-09-26 13:24:08,849:INFO:Total runtime is 0.1499552289644877 minutes
2024-09-26 13:24:08,852:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:08,852:INFO:Initializing create_model()
2024-09-26 13:24:08,852:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:08,853:INFO:Checking exceptions
2024-09-26 13:24:08,853:INFO:Importing libraries
2024-09-26 13:24:08,853:INFO:Copying training dataset
2024-09-26 13:24:08,857:INFO:Defining folds
2024-09-26 13:24:08,857:INFO:Declaring metric variables
2024-09-26 13:24:08,860:INFO:Importing untrained model
2024-09-26 13:24:08,864:INFO:Gradient Boosting Classifier Imported successfully
2024-09-26 13:24:08,871:INFO:Starting cross validation
2024-09-26 13:24:08,872:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:09,444:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,446:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,450:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,451:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,451:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,455:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,456:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,458:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,461:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,473:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,473:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,475:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,477:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,478:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,479:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,481:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,483:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,483:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,485:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,489:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,492:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,493:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,493:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,494:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,496:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,497:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,498:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,499:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,501:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,512:INFO:Calculating mean and std
2024-09-26 13:24:09,513:INFO:Creating metrics dataframe
2024-09-26 13:24:09,515:INFO:Uploading results into container
2024-09-26 13:24:09,516:INFO:Uploading model into container now
2024-09-26 13:24:09,516:INFO:_master_model_container: 10
2024-09-26 13:24:09,516:INFO:_display_container: 2
2024-09-26 13:24:09,517:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8541, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-26 13:24:09,517:INFO:create_model() successfully completed......................................
2024-09-26 13:24:09,586:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:09,587:INFO:Creating metrics dataframe
2024-09-26 13:24:09,596:INFO:Initializing Linear Discriminant Analysis
2024-09-26 13:24:09,596:INFO:Total runtime is 0.16241456667582194 minutes
2024-09-26 13:24:09,599:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:09,600:INFO:Initializing create_model()
2024-09-26 13:24:09,600:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:09,600:INFO:Checking exceptions
2024-09-26 13:24:09,600:INFO:Importing libraries
2024-09-26 13:24:09,600:INFO:Copying training dataset
2024-09-26 13:24:09,604:INFO:Defining folds
2024-09-26 13:24:09,604:INFO:Declaring metric variables
2024-09-26 13:24:09,607:INFO:Importing untrained model
2024-09-26 13:24:09,610:INFO:Linear Discriminant Analysis Imported successfully
2024-09-26 13:24:09,616:INFO:Starting cross validation
2024-09-26 13:24:09,618:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:09,711:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,716:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,716:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,717:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,718:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,720:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,720:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,720:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,720:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,721:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,722:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,724:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,724:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,724:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,724:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,726:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,726:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,726:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,727:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,728:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,729:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,730:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,731:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,731:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,732:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,732:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,732:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,735:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,736:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,739:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:09,760:INFO:Calculating mean and std
2024-09-26 13:24:09,762:INFO:Creating metrics dataframe
2024-09-26 13:24:09,763:INFO:Uploading results into container
2024-09-26 13:24:09,763:INFO:Uploading model into container now
2024-09-26 13:24:09,764:INFO:_master_model_container: 11
2024-09-26 13:24:09,765:INFO:_display_container: 2
2024-09-26 13:24:09,765:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-26 13:24:09,765:INFO:create_model() successfully completed......................................
2024-09-26 13:24:09,832:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:09,832:INFO:Creating metrics dataframe
2024-09-26 13:24:09,842:INFO:Initializing Extra Trees Classifier
2024-09-26 13:24:09,842:INFO:Total runtime is 0.16650035778681438 minutes
2024-09-26 13:24:09,844:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:09,845:INFO:Initializing create_model()
2024-09-26 13:24:09,845:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:09,845:INFO:Checking exceptions
2024-09-26 13:24:09,845:INFO:Importing libraries
2024-09-26 13:24:09,846:INFO:Copying training dataset
2024-09-26 13:24:09,850:INFO:Defining folds
2024-09-26 13:24:09,850:INFO:Declaring metric variables
2024-09-26 13:24:09,853:INFO:Importing untrained model
2024-09-26 13:24:09,857:INFO:Extra Trees Classifier Imported successfully
2024-09-26 13:24:09,863:INFO:Starting cross validation
2024-09-26 13:24:09,863:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:10,234:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,241:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,247:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,250:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,254:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,258:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,266:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,266:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,267:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,267:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,273:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,273:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,274:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,274:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,279:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,279:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,279:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,281:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,294:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,296:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,299:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,299:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,303:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,303:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,311:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,315:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,318:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,357:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,361:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,364:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:10,383:INFO:Calculating mean and std
2024-09-26 13:24:10,384:INFO:Creating metrics dataframe
2024-09-26 13:24:10,386:INFO:Uploading results into container
2024-09-26 13:24:10,386:INFO:Uploading model into container now
2024-09-26 13:24:10,387:INFO:_master_model_container: 12
2024-09-26 13:24:10,387:INFO:_display_container: 2
2024-09-26 13:24:10,387:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8541, verbose=0,
                     warm_start=False)
2024-09-26 13:24:10,387:INFO:create_model() successfully completed......................................
2024-09-26 13:24:10,455:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:10,456:INFO:Creating metrics dataframe
2024-09-26 13:24:10,465:INFO:Initializing Light Gradient Boosting Machine
2024-09-26 13:24:10,465:INFO:Total runtime is 0.17689361174901327 minutes
2024-09-26 13:24:10,468:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:10,468:INFO:Initializing create_model()
2024-09-26 13:24:10,468:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:10,469:INFO:Checking exceptions
2024-09-26 13:24:10,469:INFO:Importing libraries
2024-09-26 13:24:10,469:INFO:Copying training dataset
2024-09-26 13:24:10,473:INFO:Defining folds
2024-09-26 13:24:10,473:INFO:Declaring metric variables
2024-09-26 13:24:10,477:INFO:Importing untrained model
2024-09-26 13:24:10,480:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-26 13:24:10,487:INFO:Starting cross validation
2024-09-26 13:24:10,488:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:11,047:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,053:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,057:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,058:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,061:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,063:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,063:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,068:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,069:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,070:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,073:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,075:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,078:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,081:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,087:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,149:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,155:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,157:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,160:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,160:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,163:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,166:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,169:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,172:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,218:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,223:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,224:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,227:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,229:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,233:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,256:INFO:Calculating mean and std
2024-09-26 13:24:11,258:INFO:Creating metrics dataframe
2024-09-26 13:24:11,261:INFO:Uploading results into container
2024-09-26 13:24:11,261:INFO:Uploading model into container now
2024-09-26 13:24:11,262:INFO:_master_model_container: 13
2024-09-26 13:24:11,262:INFO:_display_container: 2
2024-09-26 13:24:11,263:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8541, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:24:11,263:INFO:create_model() successfully completed......................................
2024-09-26 13:24:11,344:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:11,345:INFO:Creating metrics dataframe
2024-09-26 13:24:11,355:INFO:Initializing Dummy Classifier
2024-09-26 13:24:11,355:INFO:Total runtime is 0.1917289217313131 minutes
2024-09-26 13:24:11,358:INFO:SubProcess create_model() called ==================================
2024-09-26 13:24:11,358:INFO:Initializing create_model()
2024-09-26 13:24:11,359:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165B049ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:11,359:INFO:Checking exceptions
2024-09-26 13:24:11,359:INFO:Importing libraries
2024-09-26 13:24:11,359:INFO:Copying training dataset
2024-09-26 13:24:11,364:INFO:Defining folds
2024-09-26 13:24:11,364:INFO:Declaring metric variables
2024-09-26 13:24:11,368:INFO:Importing untrained model
2024-09-26 13:24:11,371:INFO:Dummy Classifier Imported successfully
2024-09-26 13:24:11,377:INFO:Starting cross validation
2024-09-26 13:24:11,379:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:11,456:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,456:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,458:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,461:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,461:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,461:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,463:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,463:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:11,463:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:11,464:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:11,465:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,466:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,467:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,467:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,469:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:11,470:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,470:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,471:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,473:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,474:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,476:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:11,476:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,477:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,478:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,479:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:11,479:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:11,481:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,482:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,484:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,487:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,487:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,489:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:11,491:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,491:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,492:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,493:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:11,495:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,496:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,497:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:24:11,499:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:11,521:INFO:Calculating mean and std
2024-09-26 13:24:11,522:INFO:Creating metrics dataframe
2024-09-26 13:24:11,523:INFO:Uploading results into container
2024-09-26 13:24:11,524:INFO:Uploading model into container now
2024-09-26 13:24:11,524:INFO:_master_model_container: 14
2024-09-26 13:24:11,524:INFO:_display_container: 2
2024-09-26 13:24:11,525:INFO:DummyClassifier(constant=None, random_state=8541, strategy='prior')
2024-09-26 13:24:11,525:INFO:create_model() successfully completed......................................
2024-09-26 13:24:11,594:INFO:SubProcess create_model() end ==================================
2024-09-26 13:24:11,594:INFO:Creating metrics dataframe
2024-09-26 13:24:11,605:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-09-26 13:24:11,613:INFO:Initializing create_model()
2024-09-26 13:24:11,613:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8541, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:11,613:INFO:Checking exceptions
2024-09-26 13:24:11,614:INFO:Importing libraries
2024-09-26 13:24:11,614:INFO:Copying training dataset
2024-09-26 13:24:11,619:INFO:Defining folds
2024-09-26 13:24:11,619:INFO:Declaring metric variables
2024-09-26 13:24:11,619:INFO:Importing untrained model
2024-09-26 13:24:11,619:INFO:Declaring custom model
2024-09-26 13:24:11,620:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-26 13:24:11,621:INFO:Cross validation set to False
2024-09-26 13:24:11,621:INFO:Fitting Model
2024-09-26 13:24:11,656:INFO:[LightGBM] [Info] Number of positive: 1129, number of negative: 1859
2024-09-26 13:24:11,656:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000284 seconds.
2024-09-26 13:24:11,656:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-09-26 13:24:11,657:INFO:[LightGBM] [Info] Total Bins 1436
2024-09-26 13:24:11,657:INFO:[LightGBM] [Info] Number of data points in the train set: 2988, number of used features: 11
2024-09-26 13:24:11,657:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377845 -> initscore=-0.498706
2024-09-26 13:24:11,657:INFO:[LightGBM] [Info] Start training from score -0.498706
2024-09-26 13:24:11,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,679:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,738:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8541, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:24:11,739:INFO:create_model() successfully completed......................................
2024-09-26 13:24:11,846:INFO:_master_model_container: 14
2024-09-26 13:24:11,846:INFO:_display_container: 2
2024-09-26 13:24:11,847:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8541, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:24:11,847:INFO:compare_models() successfully completed......................................
2024-09-26 13:24:11,847:INFO:Initializing finalize_model()
2024-09-26 13:24:11,848:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8541, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:24:11,848:INFO:Finalizing LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8541, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:24:11,851:INFO:Initializing create_model()
2024-09-26 13:24:11,851:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8541, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:11,851:INFO:Checking exceptions
2024-09-26 13:24:11,852:INFO:Importing libraries
2024-09-26 13:24:11,852:INFO:Copying training dataset
2024-09-26 13:24:11,853:INFO:Defining folds
2024-09-26 13:24:11,853:INFO:Declaring metric variables
2024-09-26 13:24:11,853:INFO:Importing untrained model
2024-09-26 13:24:11,853:INFO:Declaring custom model
2024-09-26 13:24:11,854:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-26 13:24:11,855:INFO:Cross validation set to False
2024-09-26 13:24:11,855:INFO:Fitting Model
2024-09-26 13:24:11,888:INFO:[LightGBM] [Info] Number of positive: 1613, number of negative: 2656
2024-09-26 13:24:11,888:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000247 seconds.
2024-09-26 13:24:11,888:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-09-26 13:24:11,888:INFO:[LightGBM] [Info] Total Bins 1454
2024-09-26 13:24:11,888:INFO:[LightGBM] [Info] Number of data points in the train set: 4269, number of used features: 11
2024-09-26 13:24:11,889:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377840 -> initscore=-0.498725
2024-09-26 13:24:11,889:INFO:[LightGBM] [Info] Start training from score -0.498725
2024-09-26 13:24:11,890:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:11,890:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:24:12,000:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=8541, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-09-26 13:24:12,000:INFO:create_model() successfully completed......................................
2024-09-26 13:24:12,079:INFO:_master_model_container: 14
2024-09-26 13:24:12,079:INFO:_display_container: 2
2024-09-26 13:24:12,103:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=8541, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-09-26 13:24:12,103:INFO:finalize_model() successfully completed......................................
2024-09-26 13:24:12,196:INFO:Initializing evaluate_model()
2024-09-26 13:24:12,196:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=8541, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-09-26 13:24:12,233:INFO:Initializing plot_model()
2024-09-26 13:24:12,233:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=8541, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD5A50>, system=True)
2024-09-26 13:24:12,233:INFO:Checking exceptions
2024-09-26 13:24:12,236:INFO:Preloading libraries
2024-09-26 13:24:12,240:INFO:Copying training dataset
2024-09-26 13:24:12,241:INFO:Plot type: pipeline
2024-09-26 13:24:12,429:INFO:Visual Rendered Successfully
2024-09-26 13:24:12,498:INFO:plot_model() successfully completed......................................
2024-09-26 13:24:12,546:INFO:PyCaret ClassificationExperiment
2024-09-26 13:24:12,546:INFO:Logging name: clf-default-name
2024-09-26 13:24:12,546:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:24:12,546:INFO:version 3.3.2
2024-09-26 13:24:12,546:INFO:Initializing setup()
2024-09-26 13:24:12,546:INFO:self.USI: dc3b
2024-09-26 13:24:12,546:INFO:self._variable_keys: {'exp_name_log', 'gpu_param', 'logging_param', 'is_multiclass', '_available_plots', 'n_jobs_param', 'html_param', 'log_plots_param', 'X_train', 'y_test', 'y_train', 'idx', 'X', 'fold_shuffle_param', 'X_test', 'memory', '_ml_usecase', 'fold_generator', 'USI', 'pipeline', 'y', 'gpu_n_jobs_param', 'data', 'fold_groups_param', 'exp_id', 'target_param', 'fix_imbalance', 'seed'}
2024-09-26 13:24:12,546:INFO:Checking environment
2024-09-26 13:24:12,546:INFO:python_version: 3.10.15
2024-09-26 13:24:12,546:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:24:12,546:INFO:machine: AMD64
2024-09-26 13:24:12,546:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:24:12,551:INFO:Memory: svmem(total=137338810368, available=120678428672, percent=12.1, used=16660381696, free=120678428672)
2024-09-26 13:24:12,552:INFO:Physical Core: 8
2024-09-26 13:24:12,552:INFO:Logical Core: 16
2024-09-26 13:24:12,552:INFO:Checking libraries
2024-09-26 13:24:12,552:INFO:System:
2024-09-26 13:24:12,552:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:24:12,552:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:24:12,552:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:24:12,552:INFO:PyCaret required dependencies:
2024-09-26 13:24:12,552:INFO:                 pip: 24.2
2024-09-26 13:24:12,552:INFO:          setuptools: 75.1.0
2024-09-26 13:24:12,552:INFO:             pycaret: 3.3.2
2024-09-26 13:24:12,552:INFO:             IPython: 8.27.0
2024-09-26 13:24:12,552:INFO:          ipywidgets: 8.1.5
2024-09-26 13:24:12,552:INFO:                tqdm: 4.66.5
2024-09-26 13:24:12,552:INFO:               numpy: 1.26.4
2024-09-26 13:24:12,552:INFO:              pandas: 2.1.4
2024-09-26 13:24:12,552:INFO:              jinja2: 3.1.4
2024-09-26 13:24:12,552:INFO:               scipy: 1.11.4
2024-09-26 13:24:12,552:INFO:              joblib: 1.3.2
2024-09-26 13:24:12,552:INFO:             sklearn: 1.4.2
2024-09-26 13:24:12,552:INFO:                pyod: 2.0.2
2024-09-26 13:24:12,553:INFO:            imblearn: 0.12.3
2024-09-26 13:24:12,553:INFO:   category_encoders: 2.6.3
2024-09-26 13:24:12,553:INFO:            lightgbm: 4.5.0
2024-09-26 13:24:12,553:INFO:               numba: 0.60.0
2024-09-26 13:24:12,553:INFO:            requests: 2.32.3
2024-09-26 13:24:12,553:INFO:          matplotlib: 3.7.5
2024-09-26 13:24:12,553:INFO:          scikitplot: 0.3.7
2024-09-26 13:24:12,553:INFO:         yellowbrick: 1.5
2024-09-26 13:24:12,553:INFO:              plotly: 5.24.1
2024-09-26 13:24:12,553:INFO:    plotly-resampler: Not installed
2024-09-26 13:24:12,553:INFO:             kaleido: 0.2.1
2024-09-26 13:24:12,553:INFO:           schemdraw: 0.15
2024-09-26 13:24:12,553:INFO:         statsmodels: 0.14.3
2024-09-26 13:24:12,553:INFO:              sktime: 0.26.0
2024-09-26 13:24:12,553:INFO:               tbats: 1.1.3
2024-09-26 13:24:12,553:INFO:            pmdarima: 2.0.4
2024-09-26 13:24:12,553:INFO:              psutil: 6.0.0
2024-09-26 13:24:12,553:INFO:          markupsafe: 2.1.5
2024-09-26 13:24:12,553:INFO:             pickle5: Not installed
2024-09-26 13:24:12,553:INFO:         cloudpickle: 3.0.0
2024-09-26 13:24:12,553:INFO:         deprecation: 2.1.0
2024-09-26 13:24:12,553:INFO:              xxhash: 3.5.0
2024-09-26 13:24:12,553:INFO:           wurlitzer: Not installed
2024-09-26 13:24:12,553:INFO:PyCaret optional dependencies:
2024-09-26 13:24:12,554:INFO:                shap: 0.46.0
2024-09-26 13:24:12,554:INFO:           interpret: Not installed
2024-09-26 13:24:12,554:INFO:                umap: Not installed
2024-09-26 13:24:12,554:INFO:     ydata_profiling: Not installed
2024-09-26 13:24:12,554:INFO:  explainerdashboard: Not installed
2024-09-26 13:24:12,554:INFO:             autoviz: Not installed
2024-09-26 13:24:12,554:INFO:           fairlearn: Not installed
2024-09-26 13:24:12,554:INFO:          deepchecks: Not installed
2024-09-26 13:24:12,554:INFO:             xgboost: Not installed
2024-09-26 13:24:12,554:INFO:            catboost: Not installed
2024-09-26 13:24:12,554:INFO:              kmodes: Not installed
2024-09-26 13:24:12,554:INFO:             mlxtend: Not installed
2024-09-26 13:24:12,554:INFO:       statsforecast: Not installed
2024-09-26 13:24:12,554:INFO:        tune_sklearn: Not installed
2024-09-26 13:24:12,554:INFO:                 ray: Not installed
2024-09-26 13:24:12,554:INFO:            hyperopt: Not installed
2024-09-26 13:24:12,554:INFO:              optuna: Not installed
2024-09-26 13:24:12,554:INFO:               skopt: Not installed
2024-09-26 13:24:12,554:INFO:              mlflow: Not installed
2024-09-26 13:24:12,554:INFO:              gradio: Not installed
2024-09-26 13:24:12,554:INFO:             fastapi: Not installed
2024-09-26 13:24:12,554:INFO:             uvicorn: Not installed
2024-09-26 13:24:12,554:INFO:              m2cgen: Not installed
2024-09-26 13:24:12,554:INFO:           evidently: Not installed
2024-09-26 13:24:12,555:INFO:               fugue: Not installed
2024-09-26 13:24:12,555:INFO:           streamlit: Not installed
2024-09-26 13:24:12,555:INFO:             prophet: Not installed
2024-09-26 13:24:12,555:INFO:None
2024-09-26 13:24:12,555:INFO:Set up data.
2024-09-26 13:24:12,561:INFO:Set up folding strategy.
2024-09-26 13:24:12,562:INFO:Set up train/test split.
2024-09-26 13:24:12,569:INFO:Set up index.
2024-09-26 13:24:12,569:INFO:Assigning column types.
2024-09-26 13:24:12,573:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:24:12,625:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:24:12,626:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:12,658:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:12,658:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:12,711:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:24:12,712:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:12,746:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:12,746:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:12,747:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:24:12,800:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:12,833:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:12,833:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:12,887:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:12,919:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:12,919:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:12,920:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:24:13,004:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:13,005:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:13,089:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:13,089:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:13,091:INFO:Preparing preprocessing pipeline...
2024-09-26 13:24:13,092:INFO:Set up label encoding.
2024-09-26 13:24:13,092:INFO:Set up simple imputation.
2024-09-26 13:24:13,095:INFO:Set up encoding of ordinal features.
2024-09-26 13:24:13,097:INFO:Set up encoding of categorical features.
2024-09-26 13:24:13,097:INFO:Set up imbalanced handling.
2024-09-26 13:24:13,170:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:24:13,197:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-26 13:24:13,197:INFO:Creating final display dataframe.
2024-09-26 13:24:13,428:INFO:Setup _display_container:                     Description                       Value
0                    Session id                        7157
1                        Target                 loan_status
2                   Target type                      Binary
3                Target mapping   Approved: 0,  Rejected: 1
4           Original data shape                  (4269, 12)
5        Transformed data shape                  (4999, 12)
6   Transformed train set shape                  (3718, 12)
7    Transformed test set shape                  (1281, 12)
8              Numeric features                           9
9          Categorical features                           2
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16                Fix imbalance                        True
17         Fix imbalance method                       SMOTE
18               Fold Generator             StratifiedKFold
19                  Fold Number                          10
20                     CPU Jobs                          -1
21                      Use GPU                       False
22               Log Experiment                       False
23              Experiment Name            clf-default-name
24                          USI                        dc3b
2024-09-26 13:24:13,520:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:13,520:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:13,606:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:13,606:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:13,607:INFO:setup() successfully completed in 1.06s...............
2024-09-26 13:24:13,608:INFO:Initializing create_model()
2024-09-26 13:24:13,608:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B030E50>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:13,608:INFO:Checking exceptions
2024-09-26 13:24:13,622:INFO:Importing libraries
2024-09-26 13:24:13,623:INFO:Copying training dataset
2024-09-26 13:24:13,629:INFO:Defining folds
2024-09-26 13:24:13,629:INFO:Declaring metric variables
2024-09-26 13:24:13,632:INFO:Importing untrained model
2024-09-26 13:24:13,636:INFO:Logistic Regression Imported successfully
2024-09-26 13:24:13,642:INFO:Starting cross validation
2024-09-26 13:24:13,644:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:13,798:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,801:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,802:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,804:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,806:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,807:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,809:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,810:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,811:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,812:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,815:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,816:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,816:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,817:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,818:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,822:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,822:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,823:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,828:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,828:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,829:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,832:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,835:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,836:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,839:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,842:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,846:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,854:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,858:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,862:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:13,883:INFO:Calculating mean and std
2024-09-26 13:24:13,883:INFO:Creating metrics dataframe
2024-09-26 13:24:13,888:INFO:Finalizing model
2024-09-26 13:24:14,001:INFO:Uploading results into container
2024-09-26 13:24:14,002:INFO:Uploading model into container now
2024-09-26 13:24:14,012:INFO:_master_model_container: 1
2024-09-26 13:24:14,012:INFO:_display_container: 2
2024-09-26 13:24:14,012:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7157, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:24:14,012:INFO:create_model() successfully completed......................................
2024-09-26 13:24:14,082:INFO:Initializing finalize_model()
2024-09-26 13:24:14,082:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B030E50>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7157, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:24:14,082:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7157, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:24:14,085:INFO:Initializing create_model()
2024-09-26 13:24:14,085:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B030E50>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7157, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:14,085:INFO:Checking exceptions
2024-09-26 13:24:14,087:INFO:Importing libraries
2024-09-26 13:24:14,087:INFO:Copying training dataset
2024-09-26 13:24:14,087:INFO:Defining folds
2024-09-26 13:24:14,087:INFO:Declaring metric variables
2024-09-26 13:24:14,087:INFO:Importing untrained model
2024-09-26 13:24:14,087:INFO:Declaring custom model
2024-09-26 13:24:14,088:INFO:Logistic Regression Imported successfully
2024-09-26 13:24:14,089:INFO:Cross validation set to False
2024-09-26 13:24:14,089:INFO:Fitting Model
2024-09-26 13:24:14,242:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=7157,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:24:14,242:INFO:create_model() successfully completed......................................
2024-09-26 13:24:14,310:INFO:_master_model_container: 1
2024-09-26 13:24:14,310:INFO:_display_container: 2
2024-09-26 13:24:14,337:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=7157,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:24:14,337:INFO:finalize_model() successfully completed......................................
2024-09-26 13:24:14,432:INFO:Initializing evaluate_model()
2024-09-26 13:24:14,432:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B030E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=7157,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-09-26 13:24:14,470:INFO:Initializing plot_model()
2024-09-26 13:24:14,470:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=7157,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B030E50>, system=True)
2024-09-26 13:24:14,470:INFO:Checking exceptions
2024-09-26 13:24:14,473:INFO:Preloading libraries
2024-09-26 13:24:14,473:INFO:Copying training dataset
2024-09-26 13:24:14,473:INFO:Plot type: pipeline
2024-09-26 13:24:14,613:INFO:Visual Rendered Successfully
2024-09-26 13:24:14,688:INFO:plot_model() successfully completed......................................
2024-09-26 13:24:14,720:INFO:Initializing predict_model()
2024-09-26 13:24:14,721:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B030E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=7157,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002165B01A3B0>)
2024-09-26 13:24:14,721:INFO:Checking exceptions
2024-09-26 13:24:14,721:INFO:Preloading libraries
2024-09-26 13:24:14,837:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:14,846:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:14,854:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:24:14,994:INFO:Initializing save_model()
2024-09-26 13:24:14,994:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=7157,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-26 13:24:14,994:INFO:Adding model into prep_pipe
2024-09-26 13:24:14,994:WARNING:Only Model saved as it was a pipeline.
2024-09-26 13:24:15,001:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-26 13:24:15,027:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=7157,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:24:15,027:INFO:save_model() successfully completed......................................
2024-09-26 13:24:15,664:INFO:PyCaret ClassificationExperiment
2024-09-26 13:24:15,665:INFO:Logging name: clf-default-name
2024-09-26 13:24:15,665:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:24:15,665:INFO:version 3.3.2
2024-09-26 13:24:15,665:INFO:Initializing setup()
2024-09-26 13:24:15,665:INFO:self.USI: e0ce
2024-09-26 13:24:15,665:INFO:self._variable_keys: {'exp_name_log', 'gpu_param', 'logging_param', 'is_multiclass', '_available_plots', 'n_jobs_param', 'html_param', 'log_plots_param', 'X_train', 'y_test', 'y_train', 'idx', 'X', 'fold_shuffle_param', 'X_test', 'memory', '_ml_usecase', 'fold_generator', 'USI', 'pipeline', 'y', 'gpu_n_jobs_param', 'data', 'fold_groups_param', 'exp_id', 'target_param', 'fix_imbalance', 'seed'}
2024-09-26 13:24:15,665:INFO:Checking environment
2024-09-26 13:24:15,665:INFO:python_version: 3.10.15
2024-09-26 13:24:15,665:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:24:15,666:INFO:machine: AMD64
2024-09-26 13:24:15,666:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:24:15,670:INFO:Memory: svmem(total=137338810368, available=120695029760, percent=12.1, used=16643780608, free=120695029760)
2024-09-26 13:24:15,670:INFO:Physical Core: 8
2024-09-26 13:24:15,670:INFO:Logical Core: 16
2024-09-26 13:24:15,670:INFO:Checking libraries
2024-09-26 13:24:15,670:INFO:System:
2024-09-26 13:24:15,670:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:24:15,670:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:24:15,670:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:24:15,670:INFO:PyCaret required dependencies:
2024-09-26 13:24:15,670:INFO:                 pip: 24.2
2024-09-26 13:24:15,670:INFO:          setuptools: 75.1.0
2024-09-26 13:24:15,670:INFO:             pycaret: 3.3.2
2024-09-26 13:24:15,670:INFO:             IPython: 8.27.0
2024-09-26 13:24:15,670:INFO:          ipywidgets: 8.1.5
2024-09-26 13:24:15,670:INFO:                tqdm: 4.66.5
2024-09-26 13:24:15,670:INFO:               numpy: 1.26.4
2024-09-26 13:24:15,670:INFO:              pandas: 2.1.4
2024-09-26 13:24:15,671:INFO:              jinja2: 3.1.4
2024-09-26 13:24:15,671:INFO:               scipy: 1.11.4
2024-09-26 13:24:15,671:INFO:              joblib: 1.3.2
2024-09-26 13:24:15,671:INFO:             sklearn: 1.4.2
2024-09-26 13:24:15,671:INFO:                pyod: 2.0.2
2024-09-26 13:24:15,671:INFO:            imblearn: 0.12.3
2024-09-26 13:24:15,671:INFO:   category_encoders: 2.6.3
2024-09-26 13:24:15,671:INFO:            lightgbm: 4.5.0
2024-09-26 13:24:15,671:INFO:               numba: 0.60.0
2024-09-26 13:24:15,672:INFO:            requests: 2.32.3
2024-09-26 13:24:15,672:INFO:          matplotlib: 3.7.5
2024-09-26 13:24:15,672:INFO:          scikitplot: 0.3.7
2024-09-26 13:24:15,672:INFO:         yellowbrick: 1.5
2024-09-26 13:24:15,672:INFO:              plotly: 5.24.1
2024-09-26 13:24:15,672:INFO:    plotly-resampler: Not installed
2024-09-26 13:24:15,672:INFO:             kaleido: 0.2.1
2024-09-26 13:24:15,672:INFO:           schemdraw: 0.15
2024-09-26 13:24:15,672:INFO:         statsmodels: 0.14.3
2024-09-26 13:24:15,672:INFO:              sktime: 0.26.0
2024-09-26 13:24:15,672:INFO:               tbats: 1.1.3
2024-09-26 13:24:15,672:INFO:            pmdarima: 2.0.4
2024-09-26 13:24:15,672:INFO:              psutil: 6.0.0
2024-09-26 13:24:15,672:INFO:          markupsafe: 2.1.5
2024-09-26 13:24:15,672:INFO:             pickle5: Not installed
2024-09-26 13:24:15,672:INFO:         cloudpickle: 3.0.0
2024-09-26 13:24:15,672:INFO:         deprecation: 2.1.0
2024-09-26 13:24:15,672:INFO:              xxhash: 3.5.0
2024-09-26 13:24:15,673:INFO:           wurlitzer: Not installed
2024-09-26 13:24:15,673:INFO:PyCaret optional dependencies:
2024-09-26 13:24:15,673:INFO:                shap: 0.46.0
2024-09-26 13:24:15,673:INFO:           interpret: Not installed
2024-09-26 13:24:15,673:INFO:                umap: Not installed
2024-09-26 13:24:15,673:INFO:     ydata_profiling: Not installed
2024-09-26 13:24:15,673:INFO:  explainerdashboard: Not installed
2024-09-26 13:24:15,673:INFO:             autoviz: Not installed
2024-09-26 13:24:15,673:INFO:           fairlearn: Not installed
2024-09-26 13:24:15,673:INFO:          deepchecks: Not installed
2024-09-26 13:24:15,673:INFO:             xgboost: Not installed
2024-09-26 13:24:15,673:INFO:            catboost: Not installed
2024-09-26 13:24:15,673:INFO:              kmodes: Not installed
2024-09-26 13:24:15,673:INFO:             mlxtend: Not installed
2024-09-26 13:24:15,673:INFO:       statsforecast: Not installed
2024-09-26 13:24:15,673:INFO:        tune_sklearn: Not installed
2024-09-26 13:24:15,673:INFO:                 ray: Not installed
2024-09-26 13:24:15,673:INFO:            hyperopt: Not installed
2024-09-26 13:24:15,673:INFO:              optuna: Not installed
2024-09-26 13:24:15,673:INFO:               skopt: Not installed
2024-09-26 13:24:15,673:INFO:              mlflow: Not installed
2024-09-26 13:24:15,673:INFO:              gradio: Not installed
2024-09-26 13:24:15,673:INFO:             fastapi: Not installed
2024-09-26 13:24:15,674:INFO:             uvicorn: Not installed
2024-09-26 13:24:15,674:INFO:              m2cgen: Not installed
2024-09-26 13:24:15,674:INFO:           evidently: Not installed
2024-09-26 13:24:15,674:INFO:               fugue: Not installed
2024-09-26 13:24:15,674:INFO:           streamlit: Not installed
2024-09-26 13:24:15,674:INFO:             prophet: Not installed
2024-09-26 13:24:15,674:INFO:None
2024-09-26 13:24:15,674:INFO:Set up data.
2024-09-26 13:24:15,679:INFO:Set up folding strategy.
2024-09-26 13:24:15,679:INFO:Set up train/test split.
2024-09-26 13:24:15,685:INFO:Set up index.
2024-09-26 13:24:15,685:INFO:Assigning column types.
2024-09-26 13:24:15,690:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:24:15,740:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:24:15,741:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:15,773:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:15,773:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:15,826:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:24:15,827:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:15,861:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:15,862:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:15,862:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:24:15,917:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:15,952:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:15,952:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,003:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:16,035:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,036:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,036:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:24:16,119:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,119:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,202:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,202:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,203:INFO:Preparing preprocessing pipeline...
2024-09-26 13:24:16,204:INFO:Set up simple imputation.
2024-09-26 13:24:16,204:INFO:Set up imbalanced handling.
2024-09-26 13:24:16,231:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:24:16,237:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-26 13:24:16,237:INFO:Creating final display dataframe.
2024-09-26 13:24:16,355:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              e0ce
2024-09-26 13:24:16,447:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,535:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,535:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:16,536:INFO:setup() successfully completed in 0.87s...............
2024-09-26 13:24:16,536:INFO:Initializing create_model()
2024-09-26 13:24:16,536:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD50C0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:16,536:INFO:Checking exceptions
2024-09-26 13:24:16,549:INFO:Importing libraries
2024-09-26 13:24:16,550:INFO:Copying training dataset
2024-09-26 13:24:16,555:INFO:Defining folds
2024-09-26 13:24:16,555:INFO:Declaring metric variables
2024-09-26 13:24:16,558:INFO:Importing untrained model
2024-09-26 13:24:16,562:INFO:Logistic Regression Imported successfully
2024-09-26 13:24:16,568:INFO:Starting cross validation
2024-09-26 13:24:16,570:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:16,712:INFO:Calculating mean and std
2024-09-26 13:24:16,721:INFO:Creating metrics dataframe
2024-09-26 13:24:16,726:INFO:Finalizing model
2024-09-26 13:24:16,816:INFO:Uploading results into container
2024-09-26 13:24:16,816:INFO:Uploading model into container now
2024-09-26 13:24:16,826:INFO:_master_model_container: 1
2024-09-26 13:24:16,826:INFO:_display_container: 2
2024-09-26 13:24:16,827:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:24:16,827:INFO:create_model() successfully completed......................................
2024-09-26 13:24:16,911:INFO:Initializing finalize_model()
2024-09-26 13:24:16,911:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD50C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:24:16,911:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:24:16,915:INFO:Initializing create_model()
2024-09-26 13:24:16,915:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD50C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:16,915:INFO:Checking exceptions
2024-09-26 13:24:16,916:INFO:Importing libraries
2024-09-26 13:24:16,917:INFO:Copying training dataset
2024-09-26 13:24:16,917:INFO:Defining folds
2024-09-26 13:24:16,917:INFO:Declaring metric variables
2024-09-26 13:24:16,917:INFO:Importing untrained model
2024-09-26 13:24:16,917:INFO:Declaring custom model
2024-09-26 13:24:16,918:INFO:Logistic Regression Imported successfully
2024-09-26 13:24:16,919:INFO:Cross validation set to False
2024-09-26 13:24:16,919:INFO:Fitting Model
2024-09-26 13:24:17,030:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:24:17,030:INFO:create_model() successfully completed......................................
2024-09-26 13:24:17,113:INFO:_master_model_container: 1
2024-09-26 13:24:17,113:INFO:_display_container: 2
2024-09-26 13:24:17,120:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:24:17,120:INFO:finalize_model() successfully completed......................................
2024-09-26 13:24:17,207:INFO:Initializing predict_model()
2024-09-26 13:24:17,207:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165ADD50C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002165ADDD630>)
2024-09-26 13:24:17,207:INFO:Checking exceptions
2024-09-26 13:24:17,207:INFO:Preloading libraries
2024-09-26 13:24:17,208:INFO:Set up data.
2024-09-26 13:24:17,213:INFO:Set up index.
2024-09-26 13:24:17,338:INFO:Initializing save_model()
2024-09-26 13:24:17,338:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-26 13:24:17,338:INFO:Adding model into prep_pipe
2024-09-26 13:24:17,338:WARNING:Only Model saved as it was a pipeline.
2024-09-26 13:24:17,343:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-26 13:24:17,350:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:24:17,350:INFO:save_model() successfully completed......................................
2024-09-26 13:24:22,838:INFO:PyCaret ClassificationExperiment
2024-09-26 13:24:22,838:INFO:Logging name: clf-default-name
2024-09-26 13:24:22,838:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:24:22,838:INFO:version 3.3.2
2024-09-26 13:24:22,838:INFO:Initializing setup()
2024-09-26 13:24:22,838:INFO:self.USI: a131
2024-09-26 13:24:22,838:INFO:self._variable_keys: {'exp_name_log', 'gpu_param', 'logging_param', 'is_multiclass', '_available_plots', 'n_jobs_param', 'html_param', 'log_plots_param', 'X_train', 'y_test', 'y_train', 'idx', 'X', 'fold_shuffle_param', 'X_test', 'memory', '_ml_usecase', 'fold_generator', 'USI', 'pipeline', 'y', 'gpu_n_jobs_param', 'data', 'fold_groups_param', 'exp_id', 'target_param', 'fix_imbalance', 'seed'}
2024-09-26 13:24:22,839:INFO:Checking environment
2024-09-26 13:24:22,839:INFO:python_version: 3.10.15
2024-09-26 13:24:22,839:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:24:22,839:INFO:machine: AMD64
2024-09-26 13:24:22,839:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:24:22,843:INFO:Memory: svmem(total=137338810368, available=120665661440, percent=12.1, used=16673148928, free=120665661440)
2024-09-26 13:24:22,843:INFO:Physical Core: 8
2024-09-26 13:24:22,843:INFO:Logical Core: 16
2024-09-26 13:24:22,843:INFO:Checking libraries
2024-09-26 13:24:22,843:INFO:System:
2024-09-26 13:24:22,843:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:24:22,843:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:24:22,843:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:24:22,843:INFO:PyCaret required dependencies:
2024-09-26 13:24:22,843:INFO:                 pip: 24.2
2024-09-26 13:24:22,843:INFO:          setuptools: 75.1.0
2024-09-26 13:24:22,843:INFO:             pycaret: 3.3.2
2024-09-26 13:24:22,843:INFO:             IPython: 8.27.0
2024-09-26 13:24:22,843:INFO:          ipywidgets: 8.1.5
2024-09-26 13:24:22,844:INFO:                tqdm: 4.66.5
2024-09-26 13:24:22,844:INFO:               numpy: 1.26.4
2024-09-26 13:24:22,844:INFO:              pandas: 2.1.4
2024-09-26 13:24:22,844:INFO:              jinja2: 3.1.4
2024-09-26 13:24:22,844:INFO:               scipy: 1.11.4
2024-09-26 13:24:22,844:INFO:              joblib: 1.3.2
2024-09-26 13:24:22,844:INFO:             sklearn: 1.4.2
2024-09-26 13:24:22,844:INFO:                pyod: 2.0.2
2024-09-26 13:24:22,844:INFO:            imblearn: 0.12.3
2024-09-26 13:24:22,844:INFO:   category_encoders: 2.6.3
2024-09-26 13:24:22,844:INFO:            lightgbm: 4.5.0
2024-09-26 13:24:22,845:INFO:               numba: 0.60.0
2024-09-26 13:24:22,845:INFO:            requests: 2.32.3
2024-09-26 13:24:22,845:INFO:          matplotlib: 3.7.5
2024-09-26 13:24:22,845:INFO:          scikitplot: 0.3.7
2024-09-26 13:24:22,845:INFO:         yellowbrick: 1.5
2024-09-26 13:24:22,845:INFO:              plotly: 5.24.1
2024-09-26 13:24:22,845:INFO:    plotly-resampler: Not installed
2024-09-26 13:24:22,845:INFO:             kaleido: 0.2.1
2024-09-26 13:24:22,845:INFO:           schemdraw: 0.15
2024-09-26 13:24:22,845:INFO:         statsmodels: 0.14.3
2024-09-26 13:24:22,845:INFO:              sktime: 0.26.0
2024-09-26 13:24:22,845:INFO:               tbats: 1.1.3
2024-09-26 13:24:22,845:INFO:            pmdarima: 2.0.4
2024-09-26 13:24:22,845:INFO:              psutil: 6.0.0
2024-09-26 13:24:22,845:INFO:          markupsafe: 2.1.5
2024-09-26 13:24:22,845:INFO:             pickle5: Not installed
2024-09-26 13:24:22,845:INFO:         cloudpickle: 3.0.0
2024-09-26 13:24:22,845:INFO:         deprecation: 2.1.0
2024-09-26 13:24:22,845:INFO:              xxhash: 3.5.0
2024-09-26 13:24:22,845:INFO:           wurlitzer: Not installed
2024-09-26 13:24:22,845:INFO:PyCaret optional dependencies:
2024-09-26 13:24:22,846:INFO:                shap: 0.46.0
2024-09-26 13:24:22,846:INFO:           interpret: Not installed
2024-09-26 13:24:22,846:INFO:                umap: Not installed
2024-09-26 13:24:22,846:INFO:     ydata_profiling: Not installed
2024-09-26 13:24:22,846:INFO:  explainerdashboard: Not installed
2024-09-26 13:24:22,846:INFO:             autoviz: Not installed
2024-09-26 13:24:22,846:INFO:           fairlearn: Not installed
2024-09-26 13:24:22,846:INFO:          deepchecks: Not installed
2024-09-26 13:24:22,846:INFO:             xgboost: Not installed
2024-09-26 13:24:22,846:INFO:            catboost: Not installed
2024-09-26 13:24:22,846:INFO:              kmodes: Not installed
2024-09-26 13:24:22,846:INFO:             mlxtend: Not installed
2024-09-26 13:24:22,846:INFO:       statsforecast: Not installed
2024-09-26 13:24:22,846:INFO:        tune_sklearn: Not installed
2024-09-26 13:24:22,846:INFO:                 ray: Not installed
2024-09-26 13:24:22,846:INFO:            hyperopt: Not installed
2024-09-26 13:24:22,846:INFO:              optuna: Not installed
2024-09-26 13:24:22,846:INFO:               skopt: Not installed
2024-09-26 13:24:22,846:INFO:              mlflow: Not installed
2024-09-26 13:24:22,846:INFO:              gradio: Not installed
2024-09-26 13:24:22,846:INFO:             fastapi: Not installed
2024-09-26 13:24:22,846:INFO:             uvicorn: Not installed
2024-09-26 13:24:22,846:INFO:              m2cgen: Not installed
2024-09-26 13:24:22,846:INFO:           evidently: Not installed
2024-09-26 13:24:22,846:INFO:               fugue: Not installed
2024-09-26 13:24:22,847:INFO:           streamlit: Not installed
2024-09-26 13:24:22,847:INFO:             prophet: Not installed
2024-09-26 13:24:22,847:INFO:None
2024-09-26 13:24:22,847:INFO:Set up data.
2024-09-26 13:24:22,851:INFO:Set up folding strategy.
2024-09-26 13:24:22,851:INFO:Set up train/test split.
2024-09-26 13:24:22,856:INFO:Set up index.
2024-09-26 13:24:22,856:INFO:Assigning column types.
2024-09-26 13:24:22,860:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:24:22,913:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:24:22,914:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:22,947:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:22,947:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:22,999:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:24:23,000:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:23,032:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,033:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,033:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:24:23,085:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:23,118:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,118:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,171:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:24:23,203:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,203:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,203:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:24:23,289:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,290:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,376:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,377:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,378:INFO:Preparing preprocessing pipeline...
2024-09-26 13:24:23,379:INFO:Set up simple imputation.
2024-09-26 13:24:23,379:INFO:Set up imbalanced handling.
2024-09-26 13:24:23,407:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:24:23,414:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-26 13:24:23,414:INFO:Creating final display dataframe.
2024-09-26 13:24:23,538:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              a131
2024-09-26 13:24:23,636:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,636:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,721:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,721:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:24:23,722:INFO:setup() successfully completed in 0.89s...............
2024-09-26 13:24:23,723:INFO:Initializing create_model()
2024-09-26 13:24:23,723:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021661ED18D0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:23,724:INFO:Checking exceptions
2024-09-26 13:24:23,738:INFO:Importing libraries
2024-09-26 13:24:23,738:INFO:Copying training dataset
2024-09-26 13:24:23,743:INFO:Defining folds
2024-09-26 13:24:23,743:INFO:Declaring metric variables
2024-09-26 13:24:23,747:INFO:Importing untrained model
2024-09-26 13:24:23,751:INFO:Logistic Regression Imported successfully
2024-09-26 13:24:23,759:INFO:Starting cross validation
2024-09-26 13:24:23,761:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:24:23,916:INFO:Calculating mean and std
2024-09-26 13:24:23,917:INFO:Creating metrics dataframe
2024-09-26 13:24:23,921:INFO:Finalizing model
2024-09-26 13:24:24,011:INFO:Uploading results into container
2024-09-26 13:24:24,012:INFO:Uploading model into container now
2024-09-26 13:24:24,022:INFO:_master_model_container: 1
2024-09-26 13:24:24,022:INFO:_display_container: 2
2024-09-26 13:24:24,023:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:24:24,023:INFO:create_model() successfully completed......................................
2024-09-26 13:24:24,129:INFO:Initializing finalize_model()
2024-09-26 13:24:24,129:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021661ED18D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:24:24,129:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:24:24,132:INFO:Initializing create_model()
2024-09-26 13:24:24,133:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021661ED18D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:24:24,133:INFO:Checking exceptions
2024-09-26 13:24:24,134:INFO:Importing libraries
2024-09-26 13:24:24,134:INFO:Copying training dataset
2024-09-26 13:24:24,135:INFO:Defining folds
2024-09-26 13:24:24,135:INFO:Declaring metric variables
2024-09-26 13:24:24,135:INFO:Importing untrained model
2024-09-26 13:24:24,135:INFO:Declaring custom model
2024-09-26 13:24:24,136:INFO:Logistic Regression Imported successfully
2024-09-26 13:24:24,137:INFO:Cross validation set to False
2024-09-26 13:24:24,137:INFO:Fitting Model
2024-09-26 13:24:24,263:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:24:24,263:INFO:create_model() successfully completed......................................
2024-09-26 13:24:24,346:INFO:_master_model_container: 1
2024-09-26 13:24:24,346:INFO:_display_container: 2
2024-09-26 13:24:24,354:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:24:24,354:INFO:finalize_model() successfully completed......................................
2024-09-26 13:24:24,442:INFO:Initializing predict_model()
2024-09-26 13:24:24,442:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021661ED18D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002165B07B370>)
2024-09-26 13:24:24,442:INFO:Checking exceptions
2024-09-26 13:24:24,442:INFO:Preloading libraries
2024-09-26 13:24:24,443:INFO:Set up data.
2024-09-26 13:24:24,449:INFO:Set up index.
2024-09-26 13:24:24,574:INFO:Initializing save_model()
2024-09-26 13:24:24,574:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-26 13:24:24,574:INFO:Adding model into prep_pipe
2024-09-26 13:24:24,574:WARNING:Only Model saved as it was a pipeline.
2024-09-26 13:24:24,579:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-26 13:24:24,586:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:24:24,587:INFO:save_model() successfully completed......................................
2024-09-26 13:24:55,739:INFO:Initializing plot_model()
2024-09-26 13:24:55,739:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=7157,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B030E50>, system=True)
2024-09-26 13:24:55,739:INFO:Checking exceptions
2024-09-26 13:24:55,741:INFO:Preloading libraries
2024-09-26 13:24:55,742:INFO:Copying training dataset
2024-09-26 13:24:55,742:INFO:Plot type: confusion_matrix
2024-09-26 13:24:55,967:INFO:Fitting Model
2024-09-26 13:24:55,968:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-09-26 13:24:55,968:INFO:Scoring test/hold-out set
2024-09-26 13:24:56,084:INFO:Visual Rendered Successfully
2024-09-26 13:24:56,181:INFO:plot_model() successfully completed......................................
2024-09-26 13:24:59,961:INFO:Initializing plot_model()
2024-09-26 13:24:59,961:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=7157,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B030E50>, system=True)
2024-09-26 13:24:59,962:INFO:Checking exceptions
2024-09-26 13:24:59,964:INFO:Preloading libraries
2024-09-26 13:24:59,964:INFO:Copying training dataset
2024-09-26 13:24:59,964:INFO:Plot type: auc
2024-09-26 13:25:00,189:INFO:Fitting Model
2024-09-26 13:25:00,190:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-09-26 13:25:00,190:INFO:Scoring test/hold-out set
2024-09-26 13:25:00,379:INFO:Visual Rendered Successfully
2024-09-26 13:25:00,460:INFO:plot_model() successfully completed......................................
2024-09-26 13:30:18,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:30:18,301:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:30:18,301:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:30:18,301:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:30:18,919:INFO:PyCaret ClassificationExperiment
2024-09-26 13:30:18,919:INFO:Logging name: clf-default-name
2024-09-26 13:30:18,919:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:30:18,919:INFO:version 3.3.2
2024-09-26 13:30:18,919:INFO:Initializing setup()
2024-09-26 13:30:18,919:INFO:self.USI: 0e5b
2024-09-26 13:30:18,919:INFO:self._variable_keys: {'X', 'fix_imbalance', 'y_train', 'fold_groups_param', 'html_param', 'data', 'gpu_n_jobs_param', 'fold_generator', 'y_test', 'is_multiclass', 'seed', 'USI', 'memory', 'n_jobs_param', 'exp_name_log', '_ml_usecase', 'logging_param', 'fold_shuffle_param', 'y', 'X_test', 'exp_id', 'target_param', 'X_train', 'pipeline', 'idx', 'log_plots_param', '_available_plots', 'gpu_param'}
2024-09-26 13:30:18,919:INFO:Checking environment
2024-09-26 13:30:18,919:INFO:python_version: 3.10.15
2024-09-26 13:30:18,919:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:30:18,919:INFO:machine: AMD64
2024-09-26 13:30:18,920:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:30:18,925:INFO:Memory: svmem(total=137338810368, available=123241644032, percent=10.3, used=14097166336, free=123241644032)
2024-09-26 13:30:18,925:INFO:Physical Core: 8
2024-09-26 13:30:18,925:INFO:Logical Core: 16
2024-09-26 13:30:18,925:INFO:Checking libraries
2024-09-26 13:30:18,925:INFO:System:
2024-09-26 13:30:18,926:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:30:18,926:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:30:18,926:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:30:18,926:INFO:PyCaret required dependencies:
2024-09-26 13:30:18,955:INFO:                 pip: 24.2
2024-09-26 13:30:18,955:INFO:          setuptools: 75.1.0
2024-09-26 13:30:18,955:INFO:             pycaret: 3.3.2
2024-09-26 13:30:18,955:INFO:             IPython: 8.27.0
2024-09-26 13:30:18,955:INFO:          ipywidgets: 8.1.5
2024-09-26 13:30:18,955:INFO:                tqdm: 4.66.5
2024-09-26 13:30:18,955:INFO:               numpy: 1.26.4
2024-09-26 13:30:18,955:INFO:              pandas: 2.1.4
2024-09-26 13:30:18,955:INFO:              jinja2: 3.1.4
2024-09-26 13:30:18,956:INFO:               scipy: 1.11.4
2024-09-26 13:30:18,956:INFO:              joblib: 1.3.2
2024-09-26 13:30:18,956:INFO:             sklearn: 1.4.2
2024-09-26 13:30:18,956:INFO:                pyod: 2.0.2
2024-09-26 13:30:18,956:INFO:            imblearn: 0.12.3
2024-09-26 13:30:18,956:INFO:   category_encoders: 2.6.3
2024-09-26 13:30:18,956:INFO:            lightgbm: 4.5.0
2024-09-26 13:30:18,956:INFO:               numba: 0.60.0
2024-09-26 13:30:18,956:INFO:            requests: 2.32.3
2024-09-26 13:30:18,956:INFO:          matplotlib: 3.7.5
2024-09-26 13:30:18,956:INFO:          scikitplot: 0.3.7
2024-09-26 13:30:18,956:INFO:         yellowbrick: 1.5
2024-09-26 13:30:18,956:INFO:              plotly: 5.24.1
2024-09-26 13:30:18,956:INFO:    plotly-resampler: Not installed
2024-09-26 13:30:18,956:INFO:             kaleido: 0.2.1
2024-09-26 13:30:18,956:INFO:           schemdraw: 0.15
2024-09-26 13:30:18,956:INFO:         statsmodels: 0.14.3
2024-09-26 13:30:18,957:INFO:              sktime: 0.26.0
2024-09-26 13:30:18,957:INFO:               tbats: 1.1.3
2024-09-26 13:30:18,957:INFO:            pmdarima: 2.0.4
2024-09-26 13:30:18,957:INFO:              psutil: 6.0.0
2024-09-26 13:30:18,957:INFO:          markupsafe: 2.1.5
2024-09-26 13:30:18,957:INFO:             pickle5: Not installed
2024-09-26 13:30:18,957:INFO:         cloudpickle: 3.0.0
2024-09-26 13:30:18,957:INFO:         deprecation: 2.1.0
2024-09-26 13:30:18,957:INFO:              xxhash: 3.5.0
2024-09-26 13:30:18,957:INFO:           wurlitzer: Not installed
2024-09-26 13:30:18,957:INFO:PyCaret optional dependencies:
2024-09-26 13:30:18,971:INFO:                shap: 0.46.0
2024-09-26 13:30:18,971:INFO:           interpret: Not installed
2024-09-26 13:30:18,971:INFO:                umap: Not installed
2024-09-26 13:30:18,971:INFO:     ydata_profiling: Not installed
2024-09-26 13:30:18,971:INFO:  explainerdashboard: Not installed
2024-09-26 13:30:18,971:INFO:             autoviz: Not installed
2024-09-26 13:30:18,971:INFO:           fairlearn: Not installed
2024-09-26 13:30:18,971:INFO:          deepchecks: Not installed
2024-09-26 13:30:18,971:INFO:             xgboost: Not installed
2024-09-26 13:30:18,971:INFO:            catboost: Not installed
2024-09-26 13:30:18,971:INFO:              kmodes: Not installed
2024-09-26 13:30:18,971:INFO:             mlxtend: Not installed
2024-09-26 13:30:18,971:INFO:       statsforecast: Not installed
2024-09-26 13:30:18,972:INFO:        tune_sklearn: Not installed
2024-09-26 13:30:18,972:INFO:                 ray: Not installed
2024-09-26 13:30:18,972:INFO:            hyperopt: Not installed
2024-09-26 13:30:18,972:INFO:              optuna: Not installed
2024-09-26 13:30:18,972:INFO:               skopt: Not installed
2024-09-26 13:30:18,972:INFO:              mlflow: Not installed
2024-09-26 13:30:18,972:INFO:              gradio: Not installed
2024-09-26 13:30:18,972:INFO:             fastapi: Not installed
2024-09-26 13:30:18,972:INFO:             uvicorn: Not installed
2024-09-26 13:30:18,972:INFO:              m2cgen: Not installed
2024-09-26 13:30:18,972:INFO:           evidently: Not installed
2024-09-26 13:30:18,972:INFO:               fugue: Not installed
2024-09-26 13:30:18,972:INFO:           streamlit: Not installed
2024-09-26 13:30:18,972:INFO:             prophet: Not installed
2024-09-26 13:30:18,972:INFO:None
2024-09-26 13:30:18,972:INFO:Set up data.
2024-09-26 13:30:18,979:INFO:Set up folding strategy.
2024-09-26 13:30:18,979:INFO:Set up train/test split.
2024-09-26 13:30:18,988:INFO:Set up index.
2024-09-26 13:30:18,988:INFO:Assigning column types.
2024-09-26 13:30:18,992:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:30:19,044:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:30:19,047:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:19,085:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,085:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,136:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:30:19,137:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:19,169:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,169:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,169:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:30:19,220:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:19,251:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,251:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,302:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:19,335:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,335:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,336:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:30:19,417:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,417:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,500:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,500:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,502:INFO:Preparing preprocessing pipeline...
2024-09-26 13:30:19,503:INFO:Set up label encoding.
2024-09-26 13:30:19,503:INFO:Set up simple imputation.
2024-09-26 13:30:19,506:INFO:Set up encoding of ordinal features.
2024-09-26 13:30:19,508:INFO:Set up encoding of categorical features.
2024-09-26 13:30:19,574:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:30:19,598:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                    transformer=OrdinalEncoder(cols=['education',
                                                                     'self_employed'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'education',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-09-26 13:30:19,598:INFO:Creating final display dataframe.
2024-09-26 13:30:19,851:INFO:Setup _display_container:                     Description                       Value
0                    Session id                        1038
1                        Target                 loan_status
2                   Target type                      Binary
3                Target mapping   Approved: 0,  Rejected: 1
4           Original data shape                  (4269, 12)
5        Transformed data shape                  (4269, 12)
6   Transformed train set shape                  (2988, 12)
7    Transformed test set shape                  (1281, 12)
8              Numeric features                           9
9          Categorical features                           2
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16               Fold Generator             StratifiedKFold
17                  Fold Number                          10
18                     CPU Jobs                          -1
19                      Use GPU                       False
20               Log Experiment                       False
21              Experiment Name            clf-default-name
22                          USI                        0e5b
2024-09-26 13:30:19,940:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:19,940:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:20,023:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:20,023:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:20,024:INFO:setup() successfully completed in 1.11s...............
2024-09-26 13:30:20,025:INFO:Initializing compare_models()
2024-09-26 13:30:20,025:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-09-26 13:30:20,025:INFO:Checking exceptions
2024-09-26 13:30:20,028:INFO:Preparing display monitor
2024-09-26 13:30:20,049:INFO:Initializing Logistic Regression
2024-09-26 13:30:20,049:INFO:Total runtime is 0.0 minutes
2024-09-26 13:30:20,052:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:20,053:INFO:Initializing create_model()
2024-09-26 13:30:20,053:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:20,053:INFO:Checking exceptions
2024-09-26 13:30:20,053:INFO:Importing libraries
2024-09-26 13:30:20,053:INFO:Copying training dataset
2024-09-26 13:30:20,058:INFO:Defining folds
2024-09-26 13:30:20,058:INFO:Declaring metric variables
2024-09-26 13:30:20,061:INFO:Importing untrained model
2024-09-26 13:30:20,063:INFO:Logistic Regression Imported successfully
2024-09-26 13:30:20,070:INFO:Starting cross validation
2024-09-26 13:30:20,071:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:23,813:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,819:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,823:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,844:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,851:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,855:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,858:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,859:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,863:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,865:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,865:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,866:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,868:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,868:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,872:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,872:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,872:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,873:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,876:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,877:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,878:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,878:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,879:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,879:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,883:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,883:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,883:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,888:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,888:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,890:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:23,910:INFO:Calculating mean and std
2024-09-26 13:30:23,912:INFO:Creating metrics dataframe
2024-09-26 13:30:23,914:INFO:Uploading results into container
2024-09-26 13:30:23,915:INFO:Uploading model into container now
2024-09-26 13:30:23,916:INFO:_master_model_container: 1
2024-09-26 13:30:23,916:INFO:_display_container: 2
2024-09-26 13:30:23,916:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1038, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:30:23,917:INFO:create_model() successfully completed......................................
2024-09-26 13:30:24,005:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:24,006:INFO:Creating metrics dataframe
2024-09-26 13:30:24,012:INFO:Initializing K Neighbors Classifier
2024-09-26 13:30:24,013:INFO:Total runtime is 0.06605985959370932 minutes
2024-09-26 13:30:24,016:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:24,016:INFO:Initializing create_model()
2024-09-26 13:30:24,016:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:24,016:INFO:Checking exceptions
2024-09-26 13:30:24,016:INFO:Importing libraries
2024-09-26 13:30:24,016:INFO:Copying training dataset
2024-09-26 13:30:24,021:INFO:Defining folds
2024-09-26 13:30:24,021:INFO:Declaring metric variables
2024-09-26 13:30:24,025:INFO:Importing untrained model
2024-09-26 13:30:24,028:INFO:K Neighbors Classifier Imported successfully
2024-09-26 13:30:24,035:INFO:Starting cross validation
2024-09-26 13:30:24,036:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:24,243:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:24,243:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:24,244:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:24,250:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:24,250:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:24,251:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:24,257:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:24,258:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:24,259:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:24,265:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:24,272:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,714:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,714:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,717:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,718:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,721:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,723:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,730:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,730:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,731:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,735:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,735:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,737:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,740:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,742:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,746:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,753:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,758:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,769:INFO:Calculating mean and std
2024-09-26 13:30:26,770:INFO:Creating metrics dataframe
2024-09-26 13:30:26,773:INFO:Uploading results into container
2024-09-26 13:30:26,773:INFO:Uploading model into container now
2024-09-26 13:30:26,773:INFO:_master_model_container: 2
2024-09-26 13:30:26,773:INFO:_display_container: 2
2024-09-26 13:30:26,774:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-26 13:30:26,774:INFO:create_model() successfully completed......................................
2024-09-26 13:30:26,860:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:26,860:INFO:Creating metrics dataframe
2024-09-26 13:30:26,867:INFO:Initializing Naive Bayes
2024-09-26 13:30:26,867:INFO:Total runtime is 0.11363282601038616 minutes
2024-09-26 13:30:26,871:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:26,871:INFO:Initializing create_model()
2024-09-26 13:30:26,871:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:26,871:INFO:Checking exceptions
2024-09-26 13:30:26,872:INFO:Importing libraries
2024-09-26 13:30:26,872:INFO:Copying training dataset
2024-09-26 13:30:26,877:INFO:Defining folds
2024-09-26 13:30:26,877:INFO:Declaring metric variables
2024-09-26 13:30:26,881:INFO:Importing untrained model
2024-09-26 13:30:26,884:INFO:Naive Bayes Imported successfully
2024-09-26 13:30:26,891:INFO:Starting cross validation
2024-09-26 13:30:26,892:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:26,997:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:26,999:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,001:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,002:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,003:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,005:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,006:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,006:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,006:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,007:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,008:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,008:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,010:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,011:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,012:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,012:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,013:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,013:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,014:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,017:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,017:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,017:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,019:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,020:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,023:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,023:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,024:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,029:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,048:INFO:Calculating mean and std
2024-09-26 13:30:27,050:INFO:Creating metrics dataframe
2024-09-26 13:30:27,052:INFO:Uploading results into container
2024-09-26 13:30:27,052:INFO:Uploading model into container now
2024-09-26 13:30:27,052:INFO:_master_model_container: 3
2024-09-26 13:30:27,052:INFO:_display_container: 2
2024-09-26 13:30:27,053:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-26 13:30:27,053:INFO:create_model() successfully completed......................................
2024-09-26 13:30:27,121:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:27,121:INFO:Creating metrics dataframe
2024-09-26 13:30:27,128:INFO:Initializing Decision Tree Classifier
2024-09-26 13:30:27,128:INFO:Total runtime is 0.11798957188924154 minutes
2024-09-26 13:30:27,132:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:27,133:INFO:Initializing create_model()
2024-09-26 13:30:27,133:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:27,133:INFO:Checking exceptions
2024-09-26 13:30:27,133:INFO:Importing libraries
2024-09-26 13:30:27,133:INFO:Copying training dataset
2024-09-26 13:30:27,138:INFO:Defining folds
2024-09-26 13:30:27,138:INFO:Declaring metric variables
2024-09-26 13:30:27,141:INFO:Importing untrained model
2024-09-26 13:30:27,145:INFO:Decision Tree Classifier Imported successfully
2024-09-26 13:30:27,151:INFO:Starting cross validation
2024-09-26 13:30:27,153:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:27,261:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,266:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,267:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,268:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,271:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,272:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,273:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,273:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,274:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,275:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,277:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,277:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,278:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,278:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,279:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,280:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,281:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,281:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,281:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,282:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,283:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,283:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,284:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,285:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,286:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,287:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,288:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,289:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,290:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,295:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,313:INFO:Calculating mean and std
2024-09-26 13:30:27,314:INFO:Creating metrics dataframe
2024-09-26 13:30:27,316:INFO:Uploading results into container
2024-09-26 13:30:27,316:INFO:Uploading model into container now
2024-09-26 13:30:27,317:INFO:_master_model_container: 4
2024-09-26 13:30:27,317:INFO:_display_container: 2
2024-09-26 13:30:27,317:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=1038, splitter='best')
2024-09-26 13:30:27,318:INFO:create_model() successfully completed......................................
2024-09-26 13:30:27,384:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:27,384:INFO:Creating metrics dataframe
2024-09-26 13:30:27,392:INFO:Initializing SVM - Linear Kernel
2024-09-26 13:30:27,392:INFO:Total runtime is 0.12237445116043091 minutes
2024-09-26 13:30:27,394:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:27,395:INFO:Initializing create_model()
2024-09-26 13:30:27,395:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:27,395:INFO:Checking exceptions
2024-09-26 13:30:27,396:INFO:Importing libraries
2024-09-26 13:30:27,396:INFO:Copying training dataset
2024-09-26 13:30:27,400:INFO:Defining folds
2024-09-26 13:30:27,400:INFO:Declaring metric variables
2024-09-26 13:30:27,403:INFO:Importing untrained model
2024-09-26 13:30:27,407:INFO:SVM - Linear Kernel Imported successfully
2024-09-26 13:30:27,413:INFO:Starting cross validation
2024-09-26 13:30:27,414:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:27,513:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,519:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,521:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:27,523:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,523:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,525:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,527:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,529:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,530:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,531:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,531:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:27,533:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:27,533:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,533:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,534:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,535:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,537:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,539:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,540:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,543:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,543:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,543:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:27,545:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:27,545:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,546:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,546:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,547:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,547:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:27,547:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,548:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,549:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,550:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,554:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,554:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,557:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:27,559:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,577:INFO:Calculating mean and std
2024-09-26 13:30:27,578:INFO:Creating metrics dataframe
2024-09-26 13:30:27,580:INFO:Uploading results into container
2024-09-26 13:30:27,580:INFO:Uploading model into container now
2024-09-26 13:30:27,581:INFO:_master_model_container: 5
2024-09-26 13:30:27,581:INFO:_display_container: 2
2024-09-26 13:30:27,581:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=1038, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-26 13:30:27,581:INFO:create_model() successfully completed......................................
2024-09-26 13:30:27,648:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:27,648:INFO:Creating metrics dataframe
2024-09-26 13:30:27,655:INFO:Initializing Ridge Classifier
2024-09-26 13:30:27,656:INFO:Total runtime is 0.12677617073059083 minutes
2024-09-26 13:30:27,658:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:27,659:INFO:Initializing create_model()
2024-09-26 13:30:27,659:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:27,659:INFO:Checking exceptions
2024-09-26 13:30:27,659:INFO:Importing libraries
2024-09-26 13:30:27,659:INFO:Copying training dataset
2024-09-26 13:30:27,663:INFO:Defining folds
2024-09-26 13:30:27,663:INFO:Declaring metric variables
2024-09-26 13:30:27,667:INFO:Importing untrained model
2024-09-26 13:30:27,670:INFO:Ridge Classifier Imported successfully
2024-09-26 13:30:27,676:INFO:Starting cross validation
2024-09-26 13:30:27,678:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:27,772:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,776:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,776:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,778:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,780:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,781:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,781:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,782:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,782:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,784:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,785:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,785:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,786:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,787:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,787:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,788:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,788:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,790:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,790:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,791:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,791:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,791:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,792:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,793:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,793:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,794:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,795:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,798:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,798:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,799:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:27,811:INFO:Calculating mean and std
2024-09-26 13:30:27,812:INFO:Creating metrics dataframe
2024-09-26 13:30:27,814:INFO:Uploading results into container
2024-09-26 13:30:27,814:INFO:Uploading model into container now
2024-09-26 13:30:27,814:INFO:_master_model_container: 6
2024-09-26 13:30:27,815:INFO:_display_container: 2
2024-09-26 13:30:27,815:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=1038, solver='auto',
                tol=0.0001)
2024-09-26 13:30:27,815:INFO:create_model() successfully completed......................................
2024-09-26 13:30:27,883:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:27,883:INFO:Creating metrics dataframe
2024-09-26 13:30:27,891:INFO:Initializing Random Forest Classifier
2024-09-26 13:30:27,891:INFO:Total runtime is 0.13069998423258464 minutes
2024-09-26 13:30:27,894:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:27,894:INFO:Initializing create_model()
2024-09-26 13:30:27,894:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:27,894:INFO:Checking exceptions
2024-09-26 13:30:27,894:INFO:Importing libraries
2024-09-26 13:30:27,895:INFO:Copying training dataset
2024-09-26 13:30:27,899:INFO:Defining folds
2024-09-26 13:30:27,899:INFO:Declaring metric variables
2024-09-26 13:30:27,902:INFO:Importing untrained model
2024-09-26 13:30:27,906:INFO:Random Forest Classifier Imported successfully
2024-09-26 13:30:27,912:INFO:Starting cross validation
2024-09-26 13:30:27,913:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:28,426:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,426:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,432:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,432:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,438:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,439:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,441:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,441:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,446:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,447:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,451:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,453:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,457:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,457:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,457:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,458:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,462:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,463:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,464:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,464:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,467:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,469:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,469:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,470:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,470:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,473:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,479:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,482:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,496:INFO:Calculating mean and std
2024-09-26 13:30:28,497:INFO:Creating metrics dataframe
2024-09-26 13:30:28,499:INFO:Uploading results into container
2024-09-26 13:30:28,500:INFO:Uploading model into container now
2024-09-26 13:30:28,500:INFO:_master_model_container: 7
2024-09-26 13:30:28,500:INFO:_display_container: 2
2024-09-26 13:30:28,501:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1038, verbose=0,
                       warm_start=False)
2024-09-26 13:30:28,501:INFO:create_model() successfully completed......................................
2024-09-26 13:30:28,567:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:28,567:INFO:Creating metrics dataframe
2024-09-26 13:30:28,579:INFO:Initializing Quadratic Discriminant Analysis
2024-09-26 13:30:28,579:INFO:Total runtime is 0.14216154416402182 minutes
2024-09-26 13:30:28,582:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:28,582:INFO:Initializing create_model()
2024-09-26 13:30:28,583:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:28,583:INFO:Checking exceptions
2024-09-26 13:30:28,583:INFO:Importing libraries
2024-09-26 13:30:28,583:INFO:Copying training dataset
2024-09-26 13:30:28,587:INFO:Defining folds
2024-09-26 13:30:28,587:INFO:Declaring metric variables
2024-09-26 13:30:28,590:INFO:Importing untrained model
2024-09-26 13:30:28,593:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-26 13:30:28,599:INFO:Starting cross validation
2024-09-26 13:30:28,600:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:28,686:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,689:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,691:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,694:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,694:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,695:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,696:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,699:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,699:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,700:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,700:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,701:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,702:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,703:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,703:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,704:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,705:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,706:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,707:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,709:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,709:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,710:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,711:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,713:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,714:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,714:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,714:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,718:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:28,729:INFO:Calculating mean and std
2024-09-26 13:30:28,730:INFO:Creating metrics dataframe
2024-09-26 13:30:28,732:INFO:Uploading results into container
2024-09-26 13:30:28,733:INFO:Uploading model into container now
2024-09-26 13:30:28,733:INFO:_master_model_container: 8
2024-09-26 13:30:28,733:INFO:_display_container: 2
2024-09-26 13:30:28,734:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-26 13:30:28,734:INFO:create_model() successfully completed......................................
2024-09-26 13:30:28,800:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:28,801:INFO:Creating metrics dataframe
2024-09-26 13:30:28,810:INFO:Initializing Ada Boost Classifier
2024-09-26 13:30:28,810:INFO:Total runtime is 0.14600989023844402 minutes
2024-09-26 13:30:28,813:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:28,813:INFO:Initializing create_model()
2024-09-26 13:30:28,813:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:28,813:INFO:Checking exceptions
2024-09-26 13:30:28,813:INFO:Importing libraries
2024-09-26 13:30:28,813:INFO:Copying training dataset
2024-09-26 13:30:28,818:INFO:Defining folds
2024-09-26 13:30:28,818:INFO:Declaring metric variables
2024-09-26 13:30:28,821:INFO:Importing untrained model
2024-09-26 13:30:28,823:INFO:Ada Boost Classifier Imported successfully
2024-09-26 13:30:28,830:INFO:Starting cross validation
2024-09-26 13:30:28,831:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:28,885:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:30:28,889:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:30:28,889:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:30:28,891:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:30:28,897:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:30:28,897:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:30:28,901:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:30:28,909:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:30:28,910:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:30:28,912:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:30:29,095:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,102:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,108:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,111:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,112:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,115:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,116:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,118:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,120:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,121:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,122:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,125:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,126:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,128:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,128:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,129:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,132:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,134:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,135:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,138:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,138:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,139:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,141:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,142:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,144:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,146:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,150:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,154:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,158:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,162:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,181:INFO:Calculating mean and std
2024-09-26 13:30:29,182:INFO:Creating metrics dataframe
2024-09-26 13:30:29,183:INFO:Uploading results into container
2024-09-26 13:30:29,184:INFO:Uploading model into container now
2024-09-26 13:30:29,184:INFO:_master_model_container: 9
2024-09-26 13:30:29,184:INFO:_display_container: 2
2024-09-26 13:30:29,185:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=1038)
2024-09-26 13:30:29,185:INFO:create_model() successfully completed......................................
2024-09-26 13:30:29,251:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:29,251:INFO:Creating metrics dataframe
2024-09-26 13:30:29,259:INFO:Initializing Gradient Boosting Classifier
2024-09-26 13:30:29,259:INFO:Total runtime is 0.15350282589594524 minutes
2024-09-26 13:30:29,263:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:29,263:INFO:Initializing create_model()
2024-09-26 13:30:29,263:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:29,263:INFO:Checking exceptions
2024-09-26 13:30:29,263:INFO:Importing libraries
2024-09-26 13:30:29,263:INFO:Copying training dataset
2024-09-26 13:30:29,268:INFO:Defining folds
2024-09-26 13:30:29,268:INFO:Declaring metric variables
2024-09-26 13:30:29,271:INFO:Importing untrained model
2024-09-26 13:30:29,274:INFO:Gradient Boosting Classifier Imported successfully
2024-09-26 13:30:29,280:INFO:Starting cross validation
2024-09-26 13:30:29,281:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:29,843:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,849:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,855:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,856:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,860:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,862:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,866:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,866:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,868:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,868:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,869:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,870:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,872:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,873:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,873:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,873:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,877:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,877:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,877:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,880:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,880:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,885:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,888:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,894:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,897:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,898:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,900:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,901:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,904:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:29,911:INFO:Calculating mean and std
2024-09-26 13:30:29,913:INFO:Creating metrics dataframe
2024-09-26 13:30:29,914:INFO:Uploading results into container
2024-09-26 13:30:29,914:INFO:Uploading model into container now
2024-09-26 13:30:29,915:INFO:_master_model_container: 10
2024-09-26 13:30:29,915:INFO:_display_container: 2
2024-09-26 13:30:29,916:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=1038, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-26 13:30:29,916:INFO:create_model() successfully completed......................................
2024-09-26 13:30:29,981:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:29,981:INFO:Creating metrics dataframe
2024-09-26 13:30:29,990:INFO:Initializing Linear Discriminant Analysis
2024-09-26 13:30:29,991:INFO:Total runtime is 0.16569343407948814 minutes
2024-09-26 13:30:29,993:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:29,994:INFO:Initializing create_model()
2024-09-26 13:30:29,994:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:29,994:INFO:Checking exceptions
2024-09-26 13:30:29,994:INFO:Importing libraries
2024-09-26 13:30:29,994:INFO:Copying training dataset
2024-09-26 13:30:30,000:INFO:Defining folds
2024-09-26 13:30:30,000:INFO:Declaring metric variables
2024-09-26 13:30:30,005:INFO:Importing untrained model
2024-09-26 13:30:30,009:INFO:Linear Discriminant Analysis Imported successfully
2024-09-26 13:30:30,016:INFO:Starting cross validation
2024-09-26 13:30:30,018:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:30,102:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,103:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,106:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,107:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,108:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,109:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,110:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,110:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,112:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,113:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,115:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,116:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,117:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,120:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,120:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,121:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,123:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,123:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,126:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,126:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,128:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,130:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,132:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,132:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,134:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,135:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,136:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,138:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,139:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,142:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,160:INFO:Calculating mean and std
2024-09-26 13:30:30,161:INFO:Creating metrics dataframe
2024-09-26 13:30:30,163:INFO:Uploading results into container
2024-09-26 13:30:30,164:INFO:Uploading model into container now
2024-09-26 13:30:30,164:INFO:_master_model_container: 11
2024-09-26 13:30:30,164:INFO:_display_container: 2
2024-09-26 13:30:30,165:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-26 13:30:30,165:INFO:create_model() successfully completed......................................
2024-09-26 13:30:30,231:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:30,231:INFO:Creating metrics dataframe
2024-09-26 13:30:30,240:INFO:Initializing Extra Trees Classifier
2024-09-26 13:30:30,240:INFO:Total runtime is 0.16985117594401045 minutes
2024-09-26 13:30:30,243:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:30,243:INFO:Initializing create_model()
2024-09-26 13:30:30,243:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:30,243:INFO:Checking exceptions
2024-09-26 13:30:30,244:INFO:Importing libraries
2024-09-26 13:30:30,244:INFO:Copying training dataset
2024-09-26 13:30:30,249:INFO:Defining folds
2024-09-26 13:30:30,249:INFO:Declaring metric variables
2024-09-26 13:30:30,252:INFO:Importing untrained model
2024-09-26 13:30:30,255:INFO:Extra Trees Classifier Imported successfully
2024-09-26 13:30:30,261:INFO:Starting cross validation
2024-09-26 13:30:30,263:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:30,650:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,650:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,650:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,656:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,656:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,656:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,656:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,661:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,662:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,662:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,663:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,665:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,666:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,670:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,670:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,673:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,674:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,694:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,699:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,702:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,710:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,711:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,711:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,714:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,715:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,715:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,718:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,719:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,719:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:30,735:INFO:Calculating mean and std
2024-09-26 13:30:30,736:INFO:Creating metrics dataframe
2024-09-26 13:30:30,738:INFO:Uploading results into container
2024-09-26 13:30:30,739:INFO:Uploading model into container now
2024-09-26 13:30:30,739:INFO:_master_model_container: 12
2024-09-26 13:30:30,739:INFO:_display_container: 2
2024-09-26 13:30:30,739:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1038, verbose=0,
                     warm_start=False)
2024-09-26 13:30:30,739:INFO:create_model() successfully completed......................................
2024-09-26 13:30:30,806:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:30,806:INFO:Creating metrics dataframe
2024-09-26 13:30:30,816:INFO:Initializing Light Gradient Boosting Machine
2024-09-26 13:30:30,816:INFO:Total runtime is 0.1794466574986776 minutes
2024-09-26 13:30:30,819:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:30,819:INFO:Initializing create_model()
2024-09-26 13:30:30,819:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:30,819:INFO:Checking exceptions
2024-09-26 13:30:30,819:INFO:Importing libraries
2024-09-26 13:30:30,819:INFO:Copying training dataset
2024-09-26 13:30:30,823:INFO:Defining folds
2024-09-26 13:30:30,823:INFO:Declaring metric variables
2024-09-26 13:30:30,827:INFO:Importing untrained model
2024-09-26 13:30:30,830:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-26 13:30:30,835:INFO:Starting cross validation
2024-09-26 13:30:30,836:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:31,413:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,417:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,421:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,422:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,426:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,426:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,427:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,432:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,438:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,439:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,445:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,451:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,458:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,464:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,470:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,502:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,507:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,509:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,510:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,513:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,515:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,516:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,521:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,521:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,584:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,589:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,594:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,607:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,612:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,622:INFO:Calculating mean and std
2024-09-26 13:30:31,623:INFO:Creating metrics dataframe
2024-09-26 13:30:31,627:INFO:Uploading results into container
2024-09-26 13:30:31,627:INFO:Uploading model into container now
2024-09-26 13:30:31,628:INFO:_master_model_container: 13
2024-09-26 13:30:31,628:INFO:_display_container: 2
2024-09-26 13:30:31,628:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1038, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:30:31,628:INFO:create_model() successfully completed......................................
2024-09-26 13:30:31,709:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:31,709:INFO:Creating metrics dataframe
2024-09-26 13:30:31,719:INFO:Initializing Dummy Classifier
2024-09-26 13:30:31,720:INFO:Total runtime is 0.19451136191685997 minutes
2024-09-26 13:30:31,723:INFO:SubProcess create_model() called ==================================
2024-09-26 13:30:31,723:INFO:Initializing create_model()
2024-09-26 13:30:31,724:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000162620C9DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:31,724:INFO:Checking exceptions
2024-09-26 13:30:31,724:INFO:Importing libraries
2024-09-26 13:30:31,724:INFO:Copying training dataset
2024-09-26 13:30:31,728:INFO:Defining folds
2024-09-26 13:30:31,729:INFO:Declaring metric variables
2024-09-26 13:30:31,733:INFO:Importing untrained model
2024-09-26 13:30:31,736:INFO:Dummy Classifier Imported successfully
2024-09-26 13:30:31,742:INFO:Starting cross validation
2024-09-26 13:30:31,744:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:31,817:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,819:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,820:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,821:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,822:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:31,822:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,824:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,824:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:31,825:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,826:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,827:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:31,827:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,828:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,831:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,833:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:31,833:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,835:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,837:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,838:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,839:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:31,840:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,840:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,841:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,843:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:31,844:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,846:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,848:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:31,850:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,851:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,852:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,852:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,853:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,855:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,855:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:31,855:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,857:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:31,857:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,858:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:30:31,859:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,860:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:31,871:INFO:Calculating mean and std
2024-09-26 13:30:31,872:INFO:Creating metrics dataframe
2024-09-26 13:30:31,873:INFO:Uploading results into container
2024-09-26 13:30:31,874:INFO:Uploading model into container now
2024-09-26 13:30:31,874:INFO:_master_model_container: 14
2024-09-26 13:30:31,874:INFO:_display_container: 2
2024-09-26 13:30:31,874:INFO:DummyClassifier(constant=None, random_state=1038, strategy='prior')
2024-09-26 13:30:31,874:INFO:create_model() successfully completed......................................
2024-09-26 13:30:31,940:INFO:SubProcess create_model() end ==================================
2024-09-26 13:30:31,940:INFO:Creating metrics dataframe
2024-09-26 13:30:31,952:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-09-26 13:30:31,959:INFO:Initializing create_model()
2024-09-26 13:30:31,959:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1038, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:31,960:INFO:Checking exceptions
2024-09-26 13:30:31,961:INFO:Importing libraries
2024-09-26 13:30:31,961:INFO:Copying training dataset
2024-09-26 13:30:31,965:INFO:Defining folds
2024-09-26 13:30:31,965:INFO:Declaring metric variables
2024-09-26 13:30:31,965:INFO:Importing untrained model
2024-09-26 13:30:31,966:INFO:Declaring custom model
2024-09-26 13:30:31,966:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-26 13:30:31,967:INFO:Cross validation set to False
2024-09-26 13:30:31,967:INFO:Fitting Model
2024-09-26 13:30:32,001:INFO:[LightGBM] [Info] Number of positive: 1129, number of negative: 1859
2024-09-26 13:30:32,001:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000372 seconds.
2024-09-26 13:30:32,001:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-09-26 13:30:32,001:INFO:[LightGBM] [Info] Total Bins 1432
2024-09-26 13:30:32,002:INFO:[LightGBM] [Info] Number of data points in the train set: 2988, number of used features: 11
2024-09-26 13:30:32,002:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377845 -> initscore=-0.498706
2024-09-26 13:30:32,002:INFO:[LightGBM] [Info] Start training from score -0.498706
2024-09-26 13:30:32,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,004:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,004:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,005:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,006:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,007:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,007:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,008:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,009:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,010:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,011:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,013:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,014:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,014:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,018:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,019:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,086:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1038, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:30:32,086:INFO:create_model() successfully completed......................................
2024-09-26 13:30:32,192:INFO:_master_model_container: 14
2024-09-26 13:30:32,192:INFO:_display_container: 2
2024-09-26 13:30:32,193:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1038, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:30:32,193:INFO:compare_models() successfully completed......................................
2024-09-26 13:30:32,193:INFO:Initializing finalize_model()
2024-09-26 13:30:32,193:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1038, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:30:32,193:INFO:Finalizing LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1038, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:30:32,197:INFO:Initializing create_model()
2024-09-26 13:30:32,197:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1038, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:32,197:INFO:Checking exceptions
2024-09-26 13:30:32,198:INFO:Importing libraries
2024-09-26 13:30:32,199:INFO:Copying training dataset
2024-09-26 13:30:32,199:INFO:Defining folds
2024-09-26 13:30:32,199:INFO:Declaring metric variables
2024-09-26 13:30:32,199:INFO:Importing untrained model
2024-09-26 13:30:32,199:INFO:Declaring custom model
2024-09-26 13:30:32,200:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-26 13:30:32,201:INFO:Cross validation set to False
2024-09-26 13:30:32,201:INFO:Fitting Model
2024-09-26 13:30:32,233:INFO:[LightGBM] [Info] Number of positive: 1613, number of negative: 2656
2024-09-26 13:30:32,233:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000244 seconds.
2024-09-26 13:30:32,233:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-09-26 13:30:32,233:INFO:[LightGBM] [Info] Total Bins 1454
2024-09-26 13:30:32,233:INFO:[LightGBM] [Info] Number of data points in the train set: 4269, number of used features: 11
2024-09-26 13:30:32,233:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377840 -> initscore=-0.498725
2024-09-26 13:30:32,233:INFO:[LightGBM] [Info] Start training from score -0.498725
2024-09-26 13:30:32,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:30:32,340:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=1038, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-09-26 13:30:32,340:INFO:create_model() successfully completed......................................
2024-09-26 13:30:32,416:INFO:_master_model_container: 14
2024-09-26 13:30:32,416:INFO:_display_container: 2
2024-09-26 13:30:32,440:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=1038, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-09-26 13:30:32,440:INFO:finalize_model() successfully completed......................................
2024-09-26 13:30:32,529:INFO:Initializing evaluate_model()
2024-09-26 13:30:32,529:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=1038, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-09-26 13:30:32,564:INFO:Initializing plot_model()
2024-09-26 13:30:32,564:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=1038, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001621EA6B3D0>, system=True)
2024-09-26 13:30:32,564:INFO:Checking exceptions
2024-09-26 13:30:32,566:INFO:Preloading libraries
2024-09-26 13:30:32,570:INFO:Copying training dataset
2024-09-26 13:30:32,571:INFO:Plot type: pipeline
2024-09-26 13:30:32,757:INFO:Visual Rendered Successfully
2024-09-26 13:30:32,824:INFO:plot_model() successfully completed......................................
2024-09-26 13:30:32,863:INFO:PyCaret ClassificationExperiment
2024-09-26 13:30:32,863:INFO:Logging name: clf-default-name
2024-09-26 13:30:32,863:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:30:32,863:INFO:version 3.3.2
2024-09-26 13:30:32,863:INFO:Initializing setup()
2024-09-26 13:30:32,863:INFO:self.USI: 11c5
2024-09-26 13:30:32,863:INFO:self._variable_keys: {'X', 'fix_imbalance', 'y_train', 'fold_groups_param', 'html_param', 'data', 'gpu_n_jobs_param', 'fold_generator', 'y_test', 'is_multiclass', 'seed', 'USI', 'memory', 'n_jobs_param', 'exp_name_log', '_ml_usecase', 'logging_param', 'fold_shuffle_param', 'y', 'X_test', 'exp_id', 'target_param', 'X_train', 'pipeline', 'idx', 'log_plots_param', '_available_plots', 'gpu_param'}
2024-09-26 13:30:32,863:INFO:Checking environment
2024-09-26 13:30:32,863:INFO:python_version: 3.10.15
2024-09-26 13:30:32,863:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:30:32,863:INFO:machine: AMD64
2024-09-26 13:30:32,863:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:30:32,869:INFO:Memory: svmem(total=137338810368, available=121225281536, percent=11.7, used=16113528832, free=121225281536)
2024-09-26 13:30:32,869:INFO:Physical Core: 8
2024-09-26 13:30:32,869:INFO:Logical Core: 16
2024-09-26 13:30:32,870:INFO:Checking libraries
2024-09-26 13:30:32,870:INFO:System:
2024-09-26 13:30:32,870:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:30:32,870:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:30:32,870:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:30:32,870:INFO:PyCaret required dependencies:
2024-09-26 13:30:32,870:INFO:                 pip: 24.2
2024-09-26 13:30:32,870:INFO:          setuptools: 75.1.0
2024-09-26 13:30:32,870:INFO:             pycaret: 3.3.2
2024-09-26 13:30:32,870:INFO:             IPython: 8.27.0
2024-09-26 13:30:32,870:INFO:          ipywidgets: 8.1.5
2024-09-26 13:30:32,870:INFO:                tqdm: 4.66.5
2024-09-26 13:30:32,870:INFO:               numpy: 1.26.4
2024-09-26 13:30:32,870:INFO:              pandas: 2.1.4
2024-09-26 13:30:32,870:INFO:              jinja2: 3.1.4
2024-09-26 13:30:32,871:INFO:               scipy: 1.11.4
2024-09-26 13:30:32,871:INFO:              joblib: 1.3.2
2024-09-26 13:30:32,871:INFO:             sklearn: 1.4.2
2024-09-26 13:30:32,871:INFO:                pyod: 2.0.2
2024-09-26 13:30:32,871:INFO:            imblearn: 0.12.3
2024-09-26 13:30:32,871:INFO:   category_encoders: 2.6.3
2024-09-26 13:30:32,871:INFO:            lightgbm: 4.5.0
2024-09-26 13:30:32,871:INFO:               numba: 0.60.0
2024-09-26 13:30:32,871:INFO:            requests: 2.32.3
2024-09-26 13:30:32,871:INFO:          matplotlib: 3.7.5
2024-09-26 13:30:32,871:INFO:          scikitplot: 0.3.7
2024-09-26 13:30:32,871:INFO:         yellowbrick: 1.5
2024-09-26 13:30:32,871:INFO:              plotly: 5.24.1
2024-09-26 13:30:32,871:INFO:    plotly-resampler: Not installed
2024-09-26 13:30:32,871:INFO:             kaleido: 0.2.1
2024-09-26 13:30:32,871:INFO:           schemdraw: 0.15
2024-09-26 13:30:32,871:INFO:         statsmodels: 0.14.3
2024-09-26 13:30:32,871:INFO:              sktime: 0.26.0
2024-09-26 13:30:32,872:INFO:               tbats: 1.1.3
2024-09-26 13:30:32,872:INFO:            pmdarima: 2.0.4
2024-09-26 13:30:32,872:INFO:              psutil: 6.0.0
2024-09-26 13:30:32,872:INFO:          markupsafe: 2.1.5
2024-09-26 13:30:32,872:INFO:             pickle5: Not installed
2024-09-26 13:30:32,872:INFO:         cloudpickle: 3.0.0
2024-09-26 13:30:32,872:INFO:         deprecation: 2.1.0
2024-09-26 13:30:32,872:INFO:              xxhash: 3.5.0
2024-09-26 13:30:32,872:INFO:           wurlitzer: Not installed
2024-09-26 13:30:32,872:INFO:PyCaret optional dependencies:
2024-09-26 13:30:32,872:INFO:                shap: 0.46.0
2024-09-26 13:30:32,872:INFO:           interpret: Not installed
2024-09-26 13:30:32,872:INFO:                umap: Not installed
2024-09-26 13:30:32,872:INFO:     ydata_profiling: Not installed
2024-09-26 13:30:32,872:INFO:  explainerdashboard: Not installed
2024-09-26 13:30:32,872:INFO:             autoviz: Not installed
2024-09-26 13:30:32,873:INFO:           fairlearn: Not installed
2024-09-26 13:30:32,873:INFO:          deepchecks: Not installed
2024-09-26 13:30:32,873:INFO:             xgboost: Not installed
2024-09-26 13:30:32,873:INFO:            catboost: Not installed
2024-09-26 13:30:32,873:INFO:              kmodes: Not installed
2024-09-26 13:30:32,873:INFO:             mlxtend: Not installed
2024-09-26 13:30:32,873:INFO:       statsforecast: Not installed
2024-09-26 13:30:32,873:INFO:        tune_sklearn: Not installed
2024-09-26 13:30:32,873:INFO:                 ray: Not installed
2024-09-26 13:30:32,873:INFO:            hyperopt: Not installed
2024-09-26 13:30:32,873:INFO:              optuna: Not installed
2024-09-26 13:30:32,873:INFO:               skopt: Not installed
2024-09-26 13:30:32,873:INFO:              mlflow: Not installed
2024-09-26 13:30:32,873:INFO:              gradio: Not installed
2024-09-26 13:30:32,873:INFO:             fastapi: Not installed
2024-09-26 13:30:32,873:INFO:             uvicorn: Not installed
2024-09-26 13:30:32,873:INFO:              m2cgen: Not installed
2024-09-26 13:30:32,873:INFO:           evidently: Not installed
2024-09-26 13:30:32,873:INFO:               fugue: Not installed
2024-09-26 13:30:32,873:INFO:           streamlit: Not installed
2024-09-26 13:30:32,873:INFO:             prophet: Not installed
2024-09-26 13:30:32,873:INFO:None
2024-09-26 13:30:32,873:INFO:Set up data.
2024-09-26 13:30:32,881:INFO:Set up folding strategy.
2024-09-26 13:30:32,881:INFO:Set up train/test split.
2024-09-26 13:30:32,888:INFO:Set up index.
2024-09-26 13:30:32,888:INFO:Assigning column types.
2024-09-26 13:30:32,891:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:30:32,942:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:30:32,942:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:32,973:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:32,974:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,024:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:30:33,025:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:33,057:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,058:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,058:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:30:33,109:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:33,140:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,140:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,191:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:33,223:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,223:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,223:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:30:33,307:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,307:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,389:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,389:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,391:INFO:Preparing preprocessing pipeline...
2024-09-26 13:30:33,392:INFO:Set up label encoding.
2024-09-26 13:30:33,392:INFO:Set up simple imputation.
2024-09-26 13:30:33,394:INFO:Set up encoding of ordinal features.
2024-09-26 13:30:33,397:INFO:Set up encoding of categorical features.
2024-09-26 13:30:33,397:INFO:Set up imbalanced handling.
2024-09-26 13:30:33,467:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:30:33,492:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-26 13:30:33,492:INFO:Creating final display dataframe.
2024-09-26 13:30:33,715:INFO:Setup _display_container:                     Description                       Value
0                    Session id                        3551
1                        Target                 loan_status
2                   Target type                      Binary
3                Target mapping   Approved: 0,  Rejected: 1
4           Original data shape                  (4269, 12)
5        Transformed data shape                  (4999, 12)
6   Transformed train set shape                  (3718, 12)
7    Transformed test set shape                  (1281, 12)
8              Numeric features                           9
9          Categorical features                           2
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16                Fix imbalance                        True
17         Fix imbalance method                       SMOTE
18               Fold Generator             StratifiedKFold
19                  Fold Number                          10
20                     CPU Jobs                          -1
21                      Use GPU                       False
22               Log Experiment                       False
23              Experiment Name            clf-default-name
24                          USI                        11c5
2024-09-26 13:30:33,821:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,821:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,921:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,922:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:33,923:INFO:setup() successfully completed in 1.06s...............
2024-09-26 13:30:33,923:INFO:Initializing create_model()
2024-09-26 13:30:33,923:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000162618F5450>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:33,923:INFO:Checking exceptions
2024-09-26 13:30:33,937:INFO:Importing libraries
2024-09-26 13:30:33,937:INFO:Copying training dataset
2024-09-26 13:30:33,943:INFO:Defining folds
2024-09-26 13:30:33,943:INFO:Declaring metric variables
2024-09-26 13:30:33,947:INFO:Importing untrained model
2024-09-26 13:30:33,950:INFO:Logistic Regression Imported successfully
2024-09-26 13:30:33,956:INFO:Starting cross validation
2024-09-26 13:30:33,958:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:34,101:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,104:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,108:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,116:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,116:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,119:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,120:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,122:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,123:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,123:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,125:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,127:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,129:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,133:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,133:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,141:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,144:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,145:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,145:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,148:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,149:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,149:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,152:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,152:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,153:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,157:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,160:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,160:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,163:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,166:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:34,187:INFO:Calculating mean and std
2024-09-26 13:30:34,187:INFO:Creating metrics dataframe
2024-09-26 13:30:34,192:INFO:Finalizing model
2024-09-26 13:30:34,315:INFO:Uploading results into container
2024-09-26 13:30:34,316:INFO:Uploading model into container now
2024-09-26 13:30:34,326:INFO:_master_model_container: 1
2024-09-26 13:30:34,326:INFO:_display_container: 2
2024-09-26 13:30:34,327:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3551, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:30:34,327:INFO:create_model() successfully completed......................................
2024-09-26 13:30:34,396:INFO:Initializing finalize_model()
2024-09-26 13:30:34,396:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000162618F5450>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3551, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:30:34,396:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3551, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:30:34,399:INFO:Initializing create_model()
2024-09-26 13:30:34,399:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000162618F5450>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3551, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:34,399:INFO:Checking exceptions
2024-09-26 13:30:34,400:INFO:Importing libraries
2024-09-26 13:30:34,400:INFO:Copying training dataset
2024-09-26 13:30:34,401:INFO:Defining folds
2024-09-26 13:30:34,401:INFO:Declaring metric variables
2024-09-26 13:30:34,401:INFO:Importing untrained model
2024-09-26 13:30:34,401:INFO:Declaring custom model
2024-09-26 13:30:34,402:INFO:Logistic Regression Imported successfully
2024-09-26 13:30:34,403:INFO:Cross validation set to False
2024-09-26 13:30:34,403:INFO:Fitting Model
2024-09-26 13:30:34,556:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=3551,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:30:34,556:INFO:create_model() successfully completed......................................
2024-09-26 13:30:34,624:INFO:_master_model_container: 1
2024-09-26 13:30:34,624:INFO:_display_container: 2
2024-09-26 13:30:34,651:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=3551,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:30:34,651:INFO:finalize_model() successfully completed......................................
2024-09-26 13:30:34,745:INFO:Initializing evaluate_model()
2024-09-26 13:30:34,745:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000162618F5450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=3551,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-09-26 13:30:34,782:INFO:Initializing plot_model()
2024-09-26 13:30:34,782:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=3551,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000162618F5450>, system=True)
2024-09-26 13:30:34,782:INFO:Checking exceptions
2024-09-26 13:30:34,787:INFO:Preloading libraries
2024-09-26 13:30:34,787:INFO:Copying training dataset
2024-09-26 13:30:34,787:INFO:Plot type: pipeline
2024-09-26 13:30:34,933:INFO:Visual Rendered Successfully
2024-09-26 13:30:35,004:INFO:plot_model() successfully completed......................................
2024-09-26 13:30:35,035:INFO:Initializing predict_model()
2024-09-26 13:30:35,035:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000162618F5450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=3551,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001626209B250>)
2024-09-26 13:30:35,035:INFO:Checking exceptions
2024-09-26 13:30:35,036:INFO:Preloading libraries
2024-09-26 13:30:35,150:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:35,159:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:35,168:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:30:35,313:INFO:Initializing save_model()
2024-09-26 13:30:35,313:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=3551,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-26 13:30:35,313:INFO:Adding model into prep_pipe
2024-09-26 13:30:35,313:WARNING:Only Model saved as it was a pipeline.
2024-09-26 13:30:35,320:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-26 13:30:35,348:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=3551,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:30:35,348:INFO:save_model() successfully completed......................................
2024-09-26 13:30:35,963:INFO:PyCaret ClassificationExperiment
2024-09-26 13:30:35,963:INFO:Logging name: clf-default-name
2024-09-26 13:30:35,963:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:30:35,963:INFO:version 3.3.2
2024-09-26 13:30:35,963:INFO:Initializing setup()
2024-09-26 13:30:35,963:INFO:self.USI: 8d6e
2024-09-26 13:30:35,963:INFO:self._variable_keys: {'X', 'fix_imbalance', 'y_train', 'fold_groups_param', 'html_param', 'data', 'gpu_n_jobs_param', 'fold_generator', 'y_test', 'is_multiclass', 'seed', 'USI', 'memory', 'n_jobs_param', 'exp_name_log', '_ml_usecase', 'logging_param', 'fold_shuffle_param', 'y', 'X_test', 'exp_id', 'target_param', 'X_train', 'pipeline', 'idx', 'log_plots_param', '_available_plots', 'gpu_param'}
2024-09-26 13:30:35,963:INFO:Checking environment
2024-09-26 13:30:35,963:INFO:python_version: 3.10.15
2024-09-26 13:30:35,963:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:30:35,963:INFO:machine: AMD64
2024-09-26 13:30:35,963:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:30:35,968:INFO:Memory: svmem(total=137338810368, available=121265487872, percent=11.7, used=16073322496, free=121265487872)
2024-09-26 13:30:35,968:INFO:Physical Core: 8
2024-09-26 13:30:35,968:INFO:Logical Core: 16
2024-09-26 13:30:35,968:INFO:Checking libraries
2024-09-26 13:30:35,968:INFO:System:
2024-09-26 13:30:35,968:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:30:35,968:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:30:35,968:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:30:35,968:INFO:PyCaret required dependencies:
2024-09-26 13:30:35,968:INFO:                 pip: 24.2
2024-09-26 13:30:35,968:INFO:          setuptools: 75.1.0
2024-09-26 13:30:35,969:INFO:             pycaret: 3.3.2
2024-09-26 13:30:35,969:INFO:             IPython: 8.27.0
2024-09-26 13:30:35,969:INFO:          ipywidgets: 8.1.5
2024-09-26 13:30:35,969:INFO:                tqdm: 4.66.5
2024-09-26 13:30:35,969:INFO:               numpy: 1.26.4
2024-09-26 13:30:35,969:INFO:              pandas: 2.1.4
2024-09-26 13:30:35,969:INFO:              jinja2: 3.1.4
2024-09-26 13:30:35,969:INFO:               scipy: 1.11.4
2024-09-26 13:30:35,969:INFO:              joblib: 1.3.2
2024-09-26 13:30:35,969:INFO:             sklearn: 1.4.2
2024-09-26 13:30:35,969:INFO:                pyod: 2.0.2
2024-09-26 13:30:35,969:INFO:            imblearn: 0.12.3
2024-09-26 13:30:35,969:INFO:   category_encoders: 2.6.3
2024-09-26 13:30:35,969:INFO:            lightgbm: 4.5.0
2024-09-26 13:30:35,969:INFO:               numba: 0.60.0
2024-09-26 13:30:35,969:INFO:            requests: 2.32.3
2024-09-26 13:30:35,969:INFO:          matplotlib: 3.7.5
2024-09-26 13:30:35,969:INFO:          scikitplot: 0.3.7
2024-09-26 13:30:35,969:INFO:         yellowbrick: 1.5
2024-09-26 13:30:35,970:INFO:              plotly: 5.24.1
2024-09-26 13:30:35,970:INFO:    plotly-resampler: Not installed
2024-09-26 13:30:35,970:INFO:             kaleido: 0.2.1
2024-09-26 13:30:35,970:INFO:           schemdraw: 0.15
2024-09-26 13:30:35,970:INFO:         statsmodels: 0.14.3
2024-09-26 13:30:35,970:INFO:              sktime: 0.26.0
2024-09-26 13:30:35,970:INFO:               tbats: 1.1.3
2024-09-26 13:30:35,970:INFO:            pmdarima: 2.0.4
2024-09-26 13:30:35,970:INFO:              psutil: 6.0.0
2024-09-26 13:30:35,970:INFO:          markupsafe: 2.1.5
2024-09-26 13:30:35,970:INFO:             pickle5: Not installed
2024-09-26 13:30:35,970:INFO:         cloudpickle: 3.0.0
2024-09-26 13:30:35,970:INFO:         deprecation: 2.1.0
2024-09-26 13:30:35,970:INFO:              xxhash: 3.5.0
2024-09-26 13:30:35,970:INFO:           wurlitzer: Not installed
2024-09-26 13:30:35,970:INFO:PyCaret optional dependencies:
2024-09-26 13:30:35,970:INFO:                shap: 0.46.0
2024-09-26 13:30:35,970:INFO:           interpret: Not installed
2024-09-26 13:30:35,970:INFO:                umap: Not installed
2024-09-26 13:30:35,970:INFO:     ydata_profiling: Not installed
2024-09-26 13:30:35,970:INFO:  explainerdashboard: Not installed
2024-09-26 13:30:35,971:INFO:             autoviz: Not installed
2024-09-26 13:30:35,971:INFO:           fairlearn: Not installed
2024-09-26 13:30:35,971:INFO:          deepchecks: Not installed
2024-09-26 13:30:35,971:INFO:             xgboost: Not installed
2024-09-26 13:30:35,971:INFO:            catboost: Not installed
2024-09-26 13:30:35,971:INFO:              kmodes: Not installed
2024-09-26 13:30:35,971:INFO:             mlxtend: Not installed
2024-09-26 13:30:35,971:INFO:       statsforecast: Not installed
2024-09-26 13:30:35,971:INFO:        tune_sklearn: Not installed
2024-09-26 13:30:35,971:INFO:                 ray: Not installed
2024-09-26 13:30:35,971:INFO:            hyperopt: Not installed
2024-09-26 13:30:35,971:INFO:              optuna: Not installed
2024-09-26 13:30:35,971:INFO:               skopt: Not installed
2024-09-26 13:30:35,971:INFO:              mlflow: Not installed
2024-09-26 13:30:35,971:INFO:              gradio: Not installed
2024-09-26 13:30:35,971:INFO:             fastapi: Not installed
2024-09-26 13:30:35,971:INFO:             uvicorn: Not installed
2024-09-26 13:30:35,971:INFO:              m2cgen: Not installed
2024-09-26 13:30:35,971:INFO:           evidently: Not installed
2024-09-26 13:30:35,971:INFO:               fugue: Not installed
2024-09-26 13:30:35,971:INFO:           streamlit: Not installed
2024-09-26 13:30:35,971:INFO:             prophet: Not installed
2024-09-26 13:30:35,972:INFO:None
2024-09-26 13:30:35,972:INFO:Set up data.
2024-09-26 13:30:35,978:INFO:Set up folding strategy.
2024-09-26 13:30:35,978:INFO:Set up train/test split.
2024-09-26 13:30:35,983:INFO:Set up index.
2024-09-26 13:30:35,984:INFO:Assigning column types.
2024-09-26 13:30:35,989:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:30:36,041:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:30:36,042:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:36,073:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,073:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,126:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:30:36,127:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:36,158:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,158:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,159:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:30:36,211:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:36,244:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,244:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,298:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:36,329:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,330:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,330:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:30:36,417:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,417:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,505:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,506:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,507:INFO:Preparing preprocessing pipeline...
2024-09-26 13:30:36,508:INFO:Set up simple imputation.
2024-09-26 13:30:36,509:INFO:Set up imbalanced handling.
2024-09-26 13:30:36,538:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:30:36,544:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-26 13:30:36,544:INFO:Creating final display dataframe.
2024-09-26 13:30:36,669:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              8d6e
2024-09-26 13:30:36,760:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,760:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,851:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,851:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:36,852:INFO:setup() successfully completed in 0.89s...............
2024-09-26 13:30:36,853:INFO:Initializing create_model()
2024-09-26 13:30:36,853:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016261E51360>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:36,853:INFO:Checking exceptions
2024-09-26 13:30:36,866:INFO:Importing libraries
2024-09-26 13:30:36,867:INFO:Copying training dataset
2024-09-26 13:30:36,872:INFO:Defining folds
2024-09-26 13:30:36,872:INFO:Declaring metric variables
2024-09-26 13:30:36,875:INFO:Importing untrained model
2024-09-26 13:30:36,879:INFO:Logistic Regression Imported successfully
2024-09-26 13:30:36,886:INFO:Starting cross validation
2024-09-26 13:30:36,887:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:37,032:INFO:Calculating mean and std
2024-09-26 13:30:37,042:INFO:Creating metrics dataframe
2024-09-26 13:30:37,046:INFO:Finalizing model
2024-09-26 13:30:37,136:INFO:Uploading results into container
2024-09-26 13:30:37,137:INFO:Uploading model into container now
2024-09-26 13:30:37,147:INFO:_master_model_container: 1
2024-09-26 13:30:37,147:INFO:_display_container: 2
2024-09-26 13:30:37,147:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:30:37,148:INFO:create_model() successfully completed......................................
2024-09-26 13:30:37,227:INFO:Initializing finalize_model()
2024-09-26 13:30:37,227:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016261E51360>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:30:37,227:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:30:37,230:INFO:Initializing create_model()
2024-09-26 13:30:37,230:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016261E51360>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:37,230:INFO:Checking exceptions
2024-09-26 13:30:37,231:INFO:Importing libraries
2024-09-26 13:30:37,232:INFO:Copying training dataset
2024-09-26 13:30:37,232:INFO:Defining folds
2024-09-26 13:30:37,232:INFO:Declaring metric variables
2024-09-26 13:30:37,232:INFO:Importing untrained model
2024-09-26 13:30:37,232:INFO:Declaring custom model
2024-09-26 13:30:37,233:INFO:Logistic Regression Imported successfully
2024-09-26 13:30:37,234:INFO:Cross validation set to False
2024-09-26 13:30:37,234:INFO:Fitting Model
2024-09-26 13:30:37,340:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:30:37,340:INFO:create_model() successfully completed......................................
2024-09-26 13:30:37,423:INFO:_master_model_container: 1
2024-09-26 13:30:37,423:INFO:_display_container: 2
2024-09-26 13:30:37,431:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:30:37,431:INFO:finalize_model() successfully completed......................................
2024-09-26 13:30:37,519:INFO:Initializing predict_model()
2024-09-26 13:30:37,519:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016261E51360>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016261E5D5A0>)
2024-09-26 13:30:37,519:INFO:Checking exceptions
2024-09-26 13:30:37,519:INFO:Preloading libraries
2024-09-26 13:30:37,521:INFO:Set up data.
2024-09-26 13:30:37,526:INFO:Set up index.
2024-09-26 13:30:37,647:INFO:Initializing save_model()
2024-09-26 13:30:37,647:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-26 13:30:37,647:INFO:Adding model into prep_pipe
2024-09-26 13:30:37,647:WARNING:Only Model saved as it was a pipeline.
2024-09-26 13:30:37,652:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-26 13:30:37,659:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:30:37,659:INFO:save_model() successfully completed......................................
2024-09-26 13:30:43,088:INFO:PyCaret ClassificationExperiment
2024-09-26 13:30:43,088:INFO:Logging name: clf-default-name
2024-09-26 13:30:43,088:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:30:43,088:INFO:version 3.3.2
2024-09-26 13:30:43,089:INFO:Initializing setup()
2024-09-26 13:30:43,089:INFO:self.USI: 2d1d
2024-09-26 13:30:43,089:INFO:self._variable_keys: {'X', 'fix_imbalance', 'y_train', 'fold_groups_param', 'html_param', 'data', 'gpu_n_jobs_param', 'fold_generator', 'y_test', 'is_multiclass', 'seed', 'USI', 'memory', 'n_jobs_param', 'exp_name_log', '_ml_usecase', 'logging_param', 'fold_shuffle_param', 'y', 'X_test', 'exp_id', 'target_param', 'X_train', 'pipeline', 'idx', 'log_plots_param', '_available_plots', 'gpu_param'}
2024-09-26 13:30:43,089:INFO:Checking environment
2024-09-26 13:30:43,089:INFO:python_version: 3.10.15
2024-09-26 13:30:43,089:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:30:43,089:INFO:machine: AMD64
2024-09-26 13:30:43,089:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:30:43,093:INFO:Memory: svmem(total=137338810368, available=121210822656, percent=11.7, used=16127987712, free=121210822656)
2024-09-26 13:30:43,093:INFO:Physical Core: 8
2024-09-26 13:30:43,093:INFO:Logical Core: 16
2024-09-26 13:30:43,093:INFO:Checking libraries
2024-09-26 13:30:43,093:INFO:System:
2024-09-26 13:30:43,093:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:30:43,093:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:30:43,093:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:30:43,094:INFO:PyCaret required dependencies:
2024-09-26 13:30:43,094:INFO:                 pip: 24.2
2024-09-26 13:30:43,094:INFO:          setuptools: 75.1.0
2024-09-26 13:30:43,094:INFO:             pycaret: 3.3.2
2024-09-26 13:30:43,094:INFO:             IPython: 8.27.0
2024-09-26 13:30:43,094:INFO:          ipywidgets: 8.1.5
2024-09-26 13:30:43,094:INFO:                tqdm: 4.66.5
2024-09-26 13:30:43,094:INFO:               numpy: 1.26.4
2024-09-26 13:30:43,094:INFO:              pandas: 2.1.4
2024-09-26 13:30:43,094:INFO:              jinja2: 3.1.4
2024-09-26 13:30:43,094:INFO:               scipy: 1.11.4
2024-09-26 13:30:43,094:INFO:              joblib: 1.3.2
2024-09-26 13:30:43,094:INFO:             sklearn: 1.4.2
2024-09-26 13:30:43,094:INFO:                pyod: 2.0.2
2024-09-26 13:30:43,094:INFO:            imblearn: 0.12.3
2024-09-26 13:30:43,094:INFO:   category_encoders: 2.6.3
2024-09-26 13:30:43,094:INFO:            lightgbm: 4.5.0
2024-09-26 13:30:43,094:INFO:               numba: 0.60.0
2024-09-26 13:30:43,094:INFO:            requests: 2.32.3
2024-09-26 13:30:43,095:INFO:          matplotlib: 3.7.5
2024-09-26 13:30:43,095:INFO:          scikitplot: 0.3.7
2024-09-26 13:30:43,095:INFO:         yellowbrick: 1.5
2024-09-26 13:30:43,095:INFO:              plotly: 5.24.1
2024-09-26 13:30:43,095:INFO:    plotly-resampler: Not installed
2024-09-26 13:30:43,095:INFO:             kaleido: 0.2.1
2024-09-26 13:30:43,095:INFO:           schemdraw: 0.15
2024-09-26 13:30:43,095:INFO:         statsmodels: 0.14.3
2024-09-26 13:30:43,095:INFO:              sktime: 0.26.0
2024-09-26 13:30:43,095:INFO:               tbats: 1.1.3
2024-09-26 13:30:43,095:INFO:            pmdarima: 2.0.4
2024-09-26 13:30:43,095:INFO:              psutil: 6.0.0
2024-09-26 13:30:43,095:INFO:          markupsafe: 2.1.5
2024-09-26 13:30:43,095:INFO:             pickle5: Not installed
2024-09-26 13:30:43,095:INFO:         cloudpickle: 3.0.0
2024-09-26 13:30:43,095:INFO:         deprecation: 2.1.0
2024-09-26 13:30:43,095:INFO:              xxhash: 3.5.0
2024-09-26 13:30:43,095:INFO:           wurlitzer: Not installed
2024-09-26 13:30:43,095:INFO:PyCaret optional dependencies:
2024-09-26 13:30:43,095:INFO:                shap: 0.46.0
2024-09-26 13:30:43,095:INFO:           interpret: Not installed
2024-09-26 13:30:43,095:INFO:                umap: Not installed
2024-09-26 13:30:43,096:INFO:     ydata_profiling: Not installed
2024-09-26 13:30:43,096:INFO:  explainerdashboard: Not installed
2024-09-26 13:30:43,096:INFO:             autoviz: Not installed
2024-09-26 13:30:43,096:INFO:           fairlearn: Not installed
2024-09-26 13:30:43,096:INFO:          deepchecks: Not installed
2024-09-26 13:30:43,096:INFO:             xgboost: Not installed
2024-09-26 13:30:43,096:INFO:            catboost: Not installed
2024-09-26 13:30:43,096:INFO:              kmodes: Not installed
2024-09-26 13:30:43,096:INFO:             mlxtend: Not installed
2024-09-26 13:30:43,096:INFO:       statsforecast: Not installed
2024-09-26 13:30:43,096:INFO:        tune_sklearn: Not installed
2024-09-26 13:30:43,096:INFO:                 ray: Not installed
2024-09-26 13:30:43,096:INFO:            hyperopt: Not installed
2024-09-26 13:30:43,096:INFO:              optuna: Not installed
2024-09-26 13:30:43,096:INFO:               skopt: Not installed
2024-09-26 13:30:43,096:INFO:              mlflow: Not installed
2024-09-26 13:30:43,096:INFO:              gradio: Not installed
2024-09-26 13:30:43,096:INFO:             fastapi: Not installed
2024-09-26 13:30:43,096:INFO:             uvicorn: Not installed
2024-09-26 13:30:43,096:INFO:              m2cgen: Not installed
2024-09-26 13:30:43,096:INFO:           evidently: Not installed
2024-09-26 13:30:43,096:INFO:               fugue: Not installed
2024-09-26 13:30:43,096:INFO:           streamlit: Not installed
2024-09-26 13:30:43,096:INFO:             prophet: Not installed
2024-09-26 13:30:43,097:INFO:None
2024-09-26 13:30:43,097:INFO:Set up data.
2024-09-26 13:30:43,101:INFO:Set up folding strategy.
2024-09-26 13:30:43,102:INFO:Set up train/test split.
2024-09-26 13:30:43,107:INFO:Set up index.
2024-09-26 13:30:43,107:INFO:Assigning column types.
2024-09-26 13:30:43,112:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:30:43,166:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:30:43,167:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:43,200:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,201:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,254:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:30:43,254:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:43,287:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,288:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,288:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:30:43,341:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:43,373:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,373:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,426:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:30:43,459:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,459:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,459:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:30:43,545:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,545:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,632:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,632:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,633:INFO:Preparing preprocessing pipeline...
2024-09-26 13:30:43,634:INFO:Set up simple imputation.
2024-09-26 13:30:43,634:INFO:Set up imbalanced handling.
2024-09-26 13:30:43,661:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:30:43,668:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-26 13:30:43,668:INFO:Creating final display dataframe.
2024-09-26 13:30:43,789:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              2d1d
2024-09-26 13:30:43,879:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,880:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,964:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,964:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:30:43,966:INFO:setup() successfully completed in 0.88s...............
2024-09-26 13:30:43,967:INFO:Initializing create_model()
2024-09-26 13:30:43,967:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016262494340>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:43,967:INFO:Checking exceptions
2024-09-26 13:30:43,982:INFO:Importing libraries
2024-09-26 13:30:43,982:INFO:Copying training dataset
2024-09-26 13:30:43,987:INFO:Defining folds
2024-09-26 13:30:43,987:INFO:Declaring metric variables
2024-09-26 13:30:43,992:INFO:Importing untrained model
2024-09-26 13:30:43,997:INFO:Logistic Regression Imported successfully
2024-09-26 13:30:44,007:INFO:Starting cross validation
2024-09-26 13:30:44,009:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:30:44,181:INFO:Calculating mean and std
2024-09-26 13:30:44,182:INFO:Creating metrics dataframe
2024-09-26 13:30:44,186:INFO:Finalizing model
2024-09-26 13:30:44,276:INFO:Uploading results into container
2024-09-26 13:30:44,277:INFO:Uploading model into container now
2024-09-26 13:30:44,287:INFO:_master_model_container: 1
2024-09-26 13:30:44,287:INFO:_display_container: 2
2024-09-26 13:30:44,288:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:30:44,288:INFO:create_model() successfully completed......................................
2024-09-26 13:30:44,384:INFO:Initializing finalize_model()
2024-09-26 13:30:44,384:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016262494340>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:30:44,384:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:30:44,388:INFO:Initializing create_model()
2024-09-26 13:30:44,388:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016262494340>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:30:44,388:INFO:Checking exceptions
2024-09-26 13:30:44,390:INFO:Importing libraries
2024-09-26 13:30:44,390:INFO:Copying training dataset
2024-09-26 13:30:44,390:INFO:Defining folds
2024-09-26 13:30:44,390:INFO:Declaring metric variables
2024-09-26 13:30:44,390:INFO:Importing untrained model
2024-09-26 13:30:44,390:INFO:Declaring custom model
2024-09-26 13:30:44,391:INFO:Logistic Regression Imported successfully
2024-09-26 13:30:44,392:INFO:Cross validation set to False
2024-09-26 13:30:44,392:INFO:Fitting Model
2024-09-26 13:30:44,499:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:30:44,499:INFO:create_model() successfully completed......................................
2024-09-26 13:30:44,584:INFO:_master_model_container: 1
2024-09-26 13:30:44,585:INFO:_display_container: 2
2024-09-26 13:30:44,592:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:30:44,592:INFO:finalize_model() successfully completed......................................
2024-09-26 13:30:44,683:INFO:Initializing predict_model()
2024-09-26 13:30:44,683:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016262494340>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001621E8B3910>)
2024-09-26 13:30:44,683:INFO:Checking exceptions
2024-09-26 13:30:44,683:INFO:Preloading libraries
2024-09-26 13:30:44,684:INFO:Set up data.
2024-09-26 13:30:44,690:INFO:Set up index.
2024-09-26 13:30:44,818:INFO:Initializing save_model()
2024-09-26 13:30:44,819:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-26 13:30:44,819:INFO:Adding model into prep_pipe
2024-09-26 13:30:44,819:WARNING:Only Model saved as it was a pipeline.
2024-09-26 13:30:44,823:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-26 13:30:44,831:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:30:44,831:INFO:save_model() successfully completed......................................
2024-09-26 13:31:19,598:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:31:19,598:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:31:19,598:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:31:19,598:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-26 13:31:20,212:INFO:PyCaret ClassificationExperiment
2024-09-26 13:31:20,213:INFO:Logging name: clf-default-name
2024-09-26 13:31:20,213:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:31:20,213:INFO:version 3.3.2
2024-09-26 13:31:20,213:INFO:Initializing setup()
2024-09-26 13:31:20,213:INFO:self.USI: a88a
2024-09-26 13:31:20,213:INFO:self._variable_keys: {'fix_imbalance', 'exp_id', 'USI', 'data', 'X_test', '_ml_usecase', 'gpu_param', 'html_param', 'exp_name_log', 'memory', 'X', 'seed', 'is_multiclass', 'logging_param', 'n_jobs_param', 'fold_generator', 'gpu_n_jobs_param', 'fold_shuffle_param', 'y', 'fold_groups_param', 'X_train', 'target_param', '_available_plots', 'y_test', 'log_plots_param', 'idx', 'pipeline', 'y_train'}
2024-09-26 13:31:20,213:INFO:Checking environment
2024-09-26 13:31:20,213:INFO:python_version: 3.10.15
2024-09-26 13:31:20,213:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:31:20,213:INFO:machine: AMD64
2024-09-26 13:31:20,213:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:31:20,218:INFO:Memory: svmem(total=137338810368, available=123205898240, percent=10.3, used=14132912128, free=123205898240)
2024-09-26 13:31:20,218:INFO:Physical Core: 8
2024-09-26 13:31:20,218:INFO:Logical Core: 16
2024-09-26 13:31:20,218:INFO:Checking libraries
2024-09-26 13:31:20,218:INFO:System:
2024-09-26 13:31:20,219:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:31:20,219:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:31:20,219:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:31:20,219:INFO:PyCaret required dependencies:
2024-09-26 13:31:20,246:INFO:                 pip: 24.2
2024-09-26 13:31:20,246:INFO:          setuptools: 75.1.0
2024-09-26 13:31:20,246:INFO:             pycaret: 3.3.2
2024-09-26 13:31:20,246:INFO:             IPython: 8.27.0
2024-09-26 13:31:20,246:INFO:          ipywidgets: 8.1.5
2024-09-26 13:31:20,246:INFO:                tqdm: 4.66.5
2024-09-26 13:31:20,246:INFO:               numpy: 1.26.4
2024-09-26 13:31:20,246:INFO:              pandas: 2.1.4
2024-09-26 13:31:20,246:INFO:              jinja2: 3.1.4
2024-09-26 13:31:20,246:INFO:               scipy: 1.11.4
2024-09-26 13:31:20,246:INFO:              joblib: 1.3.2
2024-09-26 13:31:20,246:INFO:             sklearn: 1.4.2
2024-09-26 13:31:20,246:INFO:                pyod: 2.0.2
2024-09-26 13:31:20,246:INFO:            imblearn: 0.12.3
2024-09-26 13:31:20,246:INFO:   category_encoders: 2.6.3
2024-09-26 13:31:20,246:INFO:            lightgbm: 4.5.0
2024-09-26 13:31:20,246:INFO:               numba: 0.60.0
2024-09-26 13:31:20,246:INFO:            requests: 2.32.3
2024-09-26 13:31:20,246:INFO:          matplotlib: 3.7.5
2024-09-26 13:31:20,246:INFO:          scikitplot: 0.3.7
2024-09-26 13:31:20,247:INFO:         yellowbrick: 1.5
2024-09-26 13:31:20,247:INFO:              plotly: 5.24.1
2024-09-26 13:31:20,247:INFO:    plotly-resampler: Not installed
2024-09-26 13:31:20,247:INFO:             kaleido: 0.2.1
2024-09-26 13:31:20,247:INFO:           schemdraw: 0.15
2024-09-26 13:31:20,247:INFO:         statsmodels: 0.14.3
2024-09-26 13:31:20,247:INFO:              sktime: 0.26.0
2024-09-26 13:31:20,247:INFO:               tbats: 1.1.3
2024-09-26 13:31:20,247:INFO:            pmdarima: 2.0.4
2024-09-26 13:31:20,247:INFO:              psutil: 6.0.0
2024-09-26 13:31:20,247:INFO:          markupsafe: 2.1.5
2024-09-26 13:31:20,247:INFO:             pickle5: Not installed
2024-09-26 13:31:20,247:INFO:         cloudpickle: 3.0.0
2024-09-26 13:31:20,247:INFO:         deprecation: 2.1.0
2024-09-26 13:31:20,247:INFO:              xxhash: 3.5.0
2024-09-26 13:31:20,247:INFO:           wurlitzer: Not installed
2024-09-26 13:31:20,247:INFO:PyCaret optional dependencies:
2024-09-26 13:31:20,263:INFO:                shap: 0.46.0
2024-09-26 13:31:20,263:INFO:           interpret: Not installed
2024-09-26 13:31:20,263:INFO:                umap: Not installed
2024-09-26 13:31:20,263:INFO:     ydata_profiling: Not installed
2024-09-26 13:31:20,263:INFO:  explainerdashboard: Not installed
2024-09-26 13:31:20,263:INFO:             autoviz: Not installed
2024-09-26 13:31:20,263:INFO:           fairlearn: Not installed
2024-09-26 13:31:20,263:INFO:          deepchecks: Not installed
2024-09-26 13:31:20,263:INFO:             xgboost: Not installed
2024-09-26 13:31:20,263:INFO:            catboost: Not installed
2024-09-26 13:31:20,263:INFO:              kmodes: Not installed
2024-09-26 13:31:20,263:INFO:             mlxtend: Not installed
2024-09-26 13:31:20,263:INFO:       statsforecast: Not installed
2024-09-26 13:31:20,263:INFO:        tune_sklearn: Not installed
2024-09-26 13:31:20,263:INFO:                 ray: Not installed
2024-09-26 13:31:20,263:INFO:            hyperopt: Not installed
2024-09-26 13:31:20,263:INFO:              optuna: Not installed
2024-09-26 13:31:20,263:INFO:               skopt: Not installed
2024-09-26 13:31:20,263:INFO:              mlflow: Not installed
2024-09-26 13:31:20,263:INFO:              gradio: Not installed
2024-09-26 13:31:20,264:INFO:             fastapi: Not installed
2024-09-26 13:31:20,264:INFO:             uvicorn: Not installed
2024-09-26 13:31:20,264:INFO:              m2cgen: Not installed
2024-09-26 13:31:20,264:INFO:           evidently: Not installed
2024-09-26 13:31:20,264:INFO:               fugue: Not installed
2024-09-26 13:31:20,264:INFO:           streamlit: Not installed
2024-09-26 13:31:20,264:INFO:             prophet: Not installed
2024-09-26 13:31:20,264:INFO:None
2024-09-26 13:31:20,264:INFO:Set up data.
2024-09-26 13:31:20,271:INFO:Set up folding strategy.
2024-09-26 13:31:20,271:INFO:Set up train/test split.
2024-09-26 13:31:20,281:INFO:Set up index.
2024-09-26 13:31:20,281:INFO:Assigning column types.
2024-09-26 13:31:20,285:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:31:20,340:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:31:20,343:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:20,380:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,380:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,431:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:31:20,432:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:20,463:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,463:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,463:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:31:20,513:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:20,544:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,545:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,596:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:20,627:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,627:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,627:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:31:20,709:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,710:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,791:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,791:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:20,794:INFO:Preparing preprocessing pipeline...
2024-09-26 13:31:20,796:INFO:Set up label encoding.
2024-09-26 13:31:20,796:INFO:Set up simple imputation.
2024-09-26 13:31:20,799:INFO:Set up encoding of ordinal features.
2024-09-26 13:31:20,801:INFO:Set up encoding of categorical features.
2024-09-26 13:31:20,925:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:31:20,949:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                    transformer=OrdinalEncoder(cols=['education',
                                                                     'self_employed'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'education',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-09-26 13:31:20,949:INFO:Creating final display dataframe.
2024-09-26 13:31:21,135:INFO:Setup _display_container:                     Description                       Value
0                    Session id                         293
1                        Target                 loan_status
2                   Target type                      Binary
3                Target mapping   Approved: 0,  Rejected: 1
4           Original data shape                  (4269, 12)
5        Transformed data shape                  (4269, 12)
6   Transformed train set shape                  (2988, 12)
7    Transformed test set shape                  (1281, 12)
8              Numeric features                           9
9          Categorical features                           2
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16               Fold Generator             StratifiedKFold
17                  Fold Number                          10
18                     CPU Jobs                          -1
19                      Use GPU                       False
20               Log Experiment                       False
21              Experiment Name            clf-default-name
22                          USI                        a88a
2024-09-26 13:31:21,228:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:21,229:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:21,318:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:21,319:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:21,320:INFO:setup() successfully completed in 1.11s...............
2024-09-26 13:31:21,320:INFO:Initializing compare_models()
2024-09-26 13:31:21,320:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-09-26 13:31:21,320:INFO:Checking exceptions
2024-09-26 13:31:21,324:INFO:Preparing display monitor
2024-09-26 13:31:21,345:INFO:Initializing Logistic Regression
2024-09-26 13:31:21,345:INFO:Total runtime is 8.459885915120443e-06 minutes
2024-09-26 13:31:21,348:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:21,348:INFO:Initializing create_model()
2024-09-26 13:31:21,348:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:21,349:INFO:Checking exceptions
2024-09-26 13:31:21,349:INFO:Importing libraries
2024-09-26 13:31:21,349:INFO:Copying training dataset
2024-09-26 13:31:21,353:INFO:Defining folds
2024-09-26 13:31:21,354:INFO:Declaring metric variables
2024-09-26 13:31:21,356:INFO:Importing untrained model
2024-09-26 13:31:21,360:INFO:Logistic Regression Imported successfully
2024-09-26 13:31:21,366:INFO:Starting cross validation
2024-09-26 13:31:21,368:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:25,017:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,024:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,024:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,026:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,029:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,030:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,031:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,033:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,036:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,037:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,044:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,050:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,059:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,060:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,063:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,064:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,066:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,067:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,068:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,071:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,072:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,085:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,092:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,098:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,104:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,108:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,111:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,113:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,116:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,120:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,142:INFO:Calculating mean and std
2024-09-26 13:31:25,144:INFO:Creating metrics dataframe
2024-09-26 13:31:25,146:INFO:Uploading results into container
2024-09-26 13:31:25,147:INFO:Uploading model into container now
2024-09-26 13:31:25,147:INFO:_master_model_container: 1
2024-09-26 13:31:25,147:INFO:_display_container: 2
2024-09-26 13:31:25,148:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=293, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:31:25,149:INFO:create_model() successfully completed......................................
2024-09-26 13:31:25,222:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:25,222:INFO:Creating metrics dataframe
2024-09-26 13:31:25,228:INFO:Initializing K Neighbors Classifier
2024-09-26 13:31:25,228:INFO:Total runtime is 0.0647153377532959 minutes
2024-09-26 13:31:25,231:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:25,231:INFO:Initializing create_model()
2024-09-26 13:31:25,231:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:25,231:INFO:Checking exceptions
2024-09-26 13:31:25,231:INFO:Importing libraries
2024-09-26 13:31:25,232:INFO:Copying training dataset
2024-09-26 13:31:25,236:INFO:Defining folds
2024-09-26 13:31:25,237:INFO:Declaring metric variables
2024-09-26 13:31:25,239:INFO:Importing untrained model
2024-09-26 13:31:25,243:INFO:K Neighbors Classifier Imported successfully
2024-09-26 13:31:25,249:INFO:Starting cross validation
2024-09-26 13:31:25,250:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:25,443:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,444:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,446:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,448:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,450:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,452:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,452:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,455:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,459:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,460:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,466:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:25,470:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,789:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,793:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,797:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,820:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,820:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,821:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,824:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,825:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,825:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,828:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,829:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,831:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,837:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,841:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,845:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,853:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,859:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,864:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:27,875:INFO:Calculating mean and std
2024-09-26 13:31:27,876:INFO:Creating metrics dataframe
2024-09-26 13:31:27,878:INFO:Uploading results into container
2024-09-26 13:31:27,879:INFO:Uploading model into container now
2024-09-26 13:31:27,879:INFO:_master_model_container: 2
2024-09-26 13:31:27,879:INFO:_display_container: 2
2024-09-26 13:31:27,879:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-26 13:31:27,879:INFO:create_model() successfully completed......................................
2024-09-26 13:31:27,951:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:27,952:INFO:Creating metrics dataframe
2024-09-26 13:31:27,959:INFO:Initializing Naive Bayes
2024-09-26 13:31:27,959:INFO:Total runtime is 0.11023356517155965 minutes
2024-09-26 13:31:27,962:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:27,962:INFO:Initializing create_model()
2024-09-26 13:31:27,962:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:27,963:INFO:Checking exceptions
2024-09-26 13:31:27,963:INFO:Importing libraries
2024-09-26 13:31:27,963:INFO:Copying training dataset
2024-09-26 13:31:27,967:INFO:Defining folds
2024-09-26 13:31:27,967:INFO:Declaring metric variables
2024-09-26 13:31:27,970:INFO:Importing untrained model
2024-09-26 13:31:27,973:INFO:Naive Bayes Imported successfully
2024-09-26 13:31:27,980:INFO:Starting cross validation
2024-09-26 13:31:27,982:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:28,071:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,072:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,073:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,075:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,078:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,078:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,078:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,080:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,082:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,082:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,083:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,085:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,087:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,087:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,089:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,090:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,092:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,093:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,093:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,095:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,096:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,098:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,099:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,099:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,102:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,104:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,106:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,106:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,122:INFO:Calculating mean and std
2024-09-26 13:31:28,123:INFO:Creating metrics dataframe
2024-09-26 13:31:28,125:INFO:Uploading results into container
2024-09-26 13:31:28,126:INFO:Uploading model into container now
2024-09-26 13:31:28,126:INFO:_master_model_container: 3
2024-09-26 13:31:28,126:INFO:_display_container: 2
2024-09-26 13:31:28,126:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-26 13:31:28,126:INFO:create_model() successfully completed......................................
2024-09-26 13:31:28,194:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:28,194:INFO:Creating metrics dataframe
2024-09-26 13:31:28,202:INFO:Initializing Decision Tree Classifier
2024-09-26 13:31:28,202:INFO:Total runtime is 0.11428629954655965 minutes
2024-09-26 13:31:28,205:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:28,206:INFO:Initializing create_model()
2024-09-26 13:31:28,206:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:28,206:INFO:Checking exceptions
2024-09-26 13:31:28,206:INFO:Importing libraries
2024-09-26 13:31:28,206:INFO:Copying training dataset
2024-09-26 13:31:28,211:INFO:Defining folds
2024-09-26 13:31:28,211:INFO:Declaring metric variables
2024-09-26 13:31:28,213:INFO:Importing untrained model
2024-09-26 13:31:28,218:INFO:Decision Tree Classifier Imported successfully
2024-09-26 13:31:28,224:INFO:Starting cross validation
2024-09-26 13:31:28,226:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:28,317:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,322:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,323:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,326:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,327:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,328:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,329:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,330:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,330:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,330:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,330:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,332:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,334:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,334:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,334:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,335:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,338:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,339:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,341:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,342:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,343:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,346:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,347:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,347:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,347:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,349:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,351:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,353:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,353:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,359:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,372:INFO:Calculating mean and std
2024-09-26 13:31:28,373:INFO:Creating metrics dataframe
2024-09-26 13:31:28,375:INFO:Uploading results into container
2024-09-26 13:31:28,375:INFO:Uploading model into container now
2024-09-26 13:31:28,376:INFO:_master_model_container: 4
2024-09-26 13:31:28,376:INFO:_display_container: 2
2024-09-26 13:31:28,376:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=293, splitter='best')
2024-09-26 13:31:28,376:INFO:create_model() successfully completed......................................
2024-09-26 13:31:28,443:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:28,444:INFO:Creating metrics dataframe
2024-09-26 13:31:28,452:INFO:Initializing SVM - Linear Kernel
2024-09-26 13:31:28,452:INFO:Total runtime is 0.11844769716262818 minutes
2024-09-26 13:31:28,455:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:28,456:INFO:Initializing create_model()
2024-09-26 13:31:28,456:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:28,456:INFO:Checking exceptions
2024-09-26 13:31:28,456:INFO:Importing libraries
2024-09-26 13:31:28,456:INFO:Copying training dataset
2024-09-26 13:31:28,460:INFO:Defining folds
2024-09-26 13:31:28,460:INFO:Declaring metric variables
2024-09-26 13:31:28,463:INFO:Importing untrained model
2024-09-26 13:31:28,467:INFO:SVM - Linear Kernel Imported successfully
2024-09-26 13:31:28,473:INFO:Starting cross validation
2024-09-26 13:31:28,475:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:28,571:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,576:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,580:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,581:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,582:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,584:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,585:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,586:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,589:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,589:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,590:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,593:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,593:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,595:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,599:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,599:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,600:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,602:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,605:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,605:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,605:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,605:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,606:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,607:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,608:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:28,610:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,610:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,610:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,612:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:28,613:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,614:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,615:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:28,617:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,636:INFO:Calculating mean and std
2024-09-26 13:31:28,637:INFO:Creating metrics dataframe
2024-09-26 13:31:28,639:INFO:Uploading results into container
2024-09-26 13:31:28,639:INFO:Uploading model into container now
2024-09-26 13:31:28,640:INFO:_master_model_container: 5
2024-09-26 13:31:28,640:INFO:_display_container: 2
2024-09-26 13:31:28,640:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=293, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-26 13:31:28,640:INFO:create_model() successfully completed......................................
2024-09-26 13:31:28,709:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:28,709:INFO:Creating metrics dataframe
2024-09-26 13:31:28,717:INFO:Initializing Ridge Classifier
2024-09-26 13:31:28,717:INFO:Total runtime is 0.12286073366800944 minutes
2024-09-26 13:31:28,720:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:28,720:INFO:Initializing create_model()
2024-09-26 13:31:28,720:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:28,721:INFO:Checking exceptions
2024-09-26 13:31:28,721:INFO:Importing libraries
2024-09-26 13:31:28,721:INFO:Copying training dataset
2024-09-26 13:31:28,725:INFO:Defining folds
2024-09-26 13:31:28,725:INFO:Declaring metric variables
2024-09-26 13:31:28,728:INFO:Importing untrained model
2024-09-26 13:31:28,732:INFO:Ridge Classifier Imported successfully
2024-09-26 13:31:28,738:INFO:Starting cross validation
2024-09-26 13:31:28,739:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:28,830:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,834:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,836:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,844:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,849:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,850:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,850:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,850:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,850:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,851:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,851:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,852:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,852:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,853:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,854:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,855:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,856:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,856:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,856:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,858:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,861:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,862:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:28,884:INFO:Calculating mean and std
2024-09-26 13:31:28,885:INFO:Creating metrics dataframe
2024-09-26 13:31:28,887:INFO:Uploading results into container
2024-09-26 13:31:28,888:INFO:Uploading model into container now
2024-09-26 13:31:28,888:INFO:_master_model_container: 6
2024-09-26 13:31:28,888:INFO:_display_container: 2
2024-09-26 13:31:28,889:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=293, solver='auto',
                tol=0.0001)
2024-09-26 13:31:28,889:INFO:create_model() successfully completed......................................
2024-09-26 13:31:28,956:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:28,956:INFO:Creating metrics dataframe
2024-09-26 13:31:28,964:INFO:Initializing Random Forest Classifier
2024-09-26 13:31:28,964:INFO:Total runtime is 0.1269845445950826 minutes
2024-09-26 13:31:28,967:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:28,968:INFO:Initializing create_model()
2024-09-26 13:31:28,968:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:28,968:INFO:Checking exceptions
2024-09-26 13:31:28,968:INFO:Importing libraries
2024-09-26 13:31:28,968:INFO:Copying training dataset
2024-09-26 13:31:28,973:INFO:Defining folds
2024-09-26 13:31:28,973:INFO:Declaring metric variables
2024-09-26 13:31:28,976:INFO:Importing untrained model
2024-09-26 13:31:28,980:INFO:Random Forest Classifier Imported successfully
2024-09-26 13:31:28,986:INFO:Starting cross validation
2024-09-26 13:31:28,987:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:29,420:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,420:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,426:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,427:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,432:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,432:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,450:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,450:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,451:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,451:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,455:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,455:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,456:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,456:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,459:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,459:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,460:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,461:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,467:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,467:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,471:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,472:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,474:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,475:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,496:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,500:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,503:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,526:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,529:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,533:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,552:INFO:Calculating mean and std
2024-09-26 13:31:29,553:INFO:Creating metrics dataframe
2024-09-26 13:31:29,555:INFO:Uploading results into container
2024-09-26 13:31:29,555:INFO:Uploading model into container now
2024-09-26 13:31:29,556:INFO:_master_model_container: 7
2024-09-26 13:31:29,556:INFO:_display_container: 2
2024-09-26 13:31:29,556:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=293, verbose=0,
                       warm_start=False)
2024-09-26 13:31:29,556:INFO:create_model() successfully completed......................................
2024-09-26 13:31:29,624:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:29,625:INFO:Creating metrics dataframe
2024-09-26 13:31:29,633:INFO:Initializing Quadratic Discriminant Analysis
2024-09-26 13:31:29,633:INFO:Total runtime is 0.13813122510910034 minutes
2024-09-26 13:31:29,636:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:29,637:INFO:Initializing create_model()
2024-09-26 13:31:29,637:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:29,637:INFO:Checking exceptions
2024-09-26 13:31:29,637:INFO:Importing libraries
2024-09-26 13:31:29,637:INFO:Copying training dataset
2024-09-26 13:31:29,642:INFO:Defining folds
2024-09-26 13:31:29,642:INFO:Declaring metric variables
2024-09-26 13:31:29,645:INFO:Importing untrained model
2024-09-26 13:31:29,648:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-26 13:31:29,655:INFO:Starting cross validation
2024-09-26 13:31:29,657:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:29,747:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,751:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,755:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,756:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,760:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,760:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,760:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,761:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,761:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,762:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,764:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,764:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,764:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,765:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,765:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,765:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,767:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,768:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,768:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,768:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,768:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,769:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,771:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,772:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,775:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,776:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,776:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,780:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,780:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,784:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:29,801:INFO:Calculating mean and std
2024-09-26 13:31:29,802:INFO:Creating metrics dataframe
2024-09-26 13:31:29,804:INFO:Uploading results into container
2024-09-26 13:31:29,804:INFO:Uploading model into container now
2024-09-26 13:31:29,805:INFO:_master_model_container: 8
2024-09-26 13:31:29,805:INFO:_display_container: 2
2024-09-26 13:31:29,805:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-26 13:31:29,805:INFO:create_model() successfully completed......................................
2024-09-26 13:31:29,873:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:29,873:INFO:Creating metrics dataframe
2024-09-26 13:31:29,883:INFO:Initializing Ada Boost Classifier
2024-09-26 13:31:29,883:INFO:Total runtime is 0.14230469862620035 minutes
2024-09-26 13:31:29,886:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:29,887:INFO:Initializing create_model()
2024-09-26 13:31:29,887:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:29,887:INFO:Checking exceptions
2024-09-26 13:31:29,887:INFO:Importing libraries
2024-09-26 13:31:29,887:INFO:Copying training dataset
2024-09-26 13:31:29,891:INFO:Defining folds
2024-09-26 13:31:29,892:INFO:Declaring metric variables
2024-09-26 13:31:29,895:INFO:Importing untrained model
2024-09-26 13:31:29,898:INFO:Ada Boost Classifier Imported successfully
2024-09-26 13:31:29,905:INFO:Starting cross validation
2024-09-26 13:31:29,906:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:29,971:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:31:29,972:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:31:29,973:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:31:29,973:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:31:29,975:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:31:29,978:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:31:29,980:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:31:29,986:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:31:29,990:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:31:29,990:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-26 13:31:30,184:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,190:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,193:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,195:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,196:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,199:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,201:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,201:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,202:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,204:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,206:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,218:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,219:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,221:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,221:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,221:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,222:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,226:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,226:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,227:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,238:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,240:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,242:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,243:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,246:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,247:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,267:INFO:Calculating mean and std
2024-09-26 13:31:30,268:INFO:Creating metrics dataframe
2024-09-26 13:31:30,270:INFO:Uploading results into container
2024-09-26 13:31:30,270:INFO:Uploading model into container now
2024-09-26 13:31:30,271:INFO:_master_model_container: 9
2024-09-26 13:31:30,271:INFO:_display_container: 2
2024-09-26 13:31:30,271:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=293)
2024-09-26 13:31:30,272:INFO:create_model() successfully completed......................................
2024-09-26 13:31:30,340:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:30,340:INFO:Creating metrics dataframe
2024-09-26 13:31:30,349:INFO:Initializing Gradient Boosting Classifier
2024-09-26 13:31:30,349:INFO:Total runtime is 0.15006937980651855 minutes
2024-09-26 13:31:30,352:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:30,353:INFO:Initializing create_model()
2024-09-26 13:31:30,353:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:30,353:INFO:Checking exceptions
2024-09-26 13:31:30,353:INFO:Importing libraries
2024-09-26 13:31:30,353:INFO:Copying training dataset
2024-09-26 13:31:30,357:INFO:Defining folds
2024-09-26 13:31:30,358:INFO:Declaring metric variables
2024-09-26 13:31:30,360:INFO:Importing untrained model
2024-09-26 13:31:30,363:INFO:Gradient Boosting Classifier Imported successfully
2024-09-26 13:31:30,372:INFO:Starting cross validation
2024-09-26 13:31:30,373:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:30,926:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,929:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,931:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,932:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,936:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,937:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,946:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,948:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,950:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,953:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,955:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,955:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,957:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,959:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,960:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,963:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,963:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,964:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,967:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,968:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,969:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,969:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,971:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,972:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,976:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,976:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,981:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,986:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,989:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:30,992:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,013:INFO:Calculating mean and std
2024-09-26 13:31:31,014:INFO:Creating metrics dataframe
2024-09-26 13:31:31,016:INFO:Uploading results into container
2024-09-26 13:31:31,016:INFO:Uploading model into container now
2024-09-26 13:31:31,017:INFO:_master_model_container: 10
2024-09-26 13:31:31,017:INFO:_display_container: 2
2024-09-26 13:31:31,017:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=293, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-26 13:31:31,017:INFO:create_model() successfully completed......................................
2024-09-26 13:31:31,083:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:31,084:INFO:Creating metrics dataframe
2024-09-26 13:31:31,093:INFO:Initializing Linear Discriminant Analysis
2024-09-26 13:31:31,094:INFO:Total runtime is 0.16248833735783894 minutes
2024-09-26 13:31:31,097:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:31,098:INFO:Initializing create_model()
2024-09-26 13:31:31,098:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:31,098:INFO:Checking exceptions
2024-09-26 13:31:31,098:INFO:Importing libraries
2024-09-26 13:31:31,098:INFO:Copying training dataset
2024-09-26 13:31:31,102:INFO:Defining folds
2024-09-26 13:31:31,102:INFO:Declaring metric variables
2024-09-26 13:31:31,105:INFO:Importing untrained model
2024-09-26 13:31:31,109:INFO:Linear Discriminant Analysis Imported successfully
2024-09-26 13:31:31,114:INFO:Starting cross validation
2024-09-26 13:31:31,116:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:31,195:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,196:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,197:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,198:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,200:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,201:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,201:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,202:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,202:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,204:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,205:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,206:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,206:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,209:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,210:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,211:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,213:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,213:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,217:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,218:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,221:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,222:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,223:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,225:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,226:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,228:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,230:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,230:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,234:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,237:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,246:INFO:Calculating mean and std
2024-09-26 13:31:31,247:INFO:Creating metrics dataframe
2024-09-26 13:31:31,249:INFO:Uploading results into container
2024-09-26 13:31:31,249:INFO:Uploading model into container now
2024-09-26 13:31:31,249:INFO:_master_model_container: 11
2024-09-26 13:31:31,249:INFO:_display_container: 2
2024-09-26 13:31:31,250:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-26 13:31:31,250:INFO:create_model() successfully completed......................................
2024-09-26 13:31:31,320:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:31,320:INFO:Creating metrics dataframe
2024-09-26 13:31:31,330:INFO:Initializing Extra Trees Classifier
2024-09-26 13:31:31,330:INFO:Total runtime is 0.16642007827758787 minutes
2024-09-26 13:31:31,333:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:31,333:INFO:Initializing create_model()
2024-09-26 13:31:31,333:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:31,333:INFO:Checking exceptions
2024-09-26 13:31:31,333:INFO:Importing libraries
2024-09-26 13:31:31,334:INFO:Copying training dataset
2024-09-26 13:31:31,338:INFO:Defining folds
2024-09-26 13:31:31,338:INFO:Declaring metric variables
2024-09-26 13:31:31,341:INFO:Importing untrained model
2024-09-26 13:31:31,344:INFO:Extra Trees Classifier Imported successfully
2024-09-26 13:31:31,351:INFO:Starting cross validation
2024-09-26 13:31:31,352:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:31,736:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,736:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,740:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,740:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,744:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,745:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,751:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,751:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,751:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,752:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,756:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,756:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,757:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,758:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,762:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,762:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,762:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,762:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,765:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,766:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,771:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,772:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,777:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,778:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,842:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,842:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,846:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,846:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,850:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,850:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:31,867:INFO:Calculating mean and std
2024-09-26 13:31:31,869:INFO:Creating metrics dataframe
2024-09-26 13:31:31,870:INFO:Uploading results into container
2024-09-26 13:31:31,871:INFO:Uploading model into container now
2024-09-26 13:31:31,871:INFO:_master_model_container: 12
2024-09-26 13:31:31,871:INFO:_display_container: 2
2024-09-26 13:31:31,872:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=293, verbose=0,
                     warm_start=False)
2024-09-26 13:31:31,872:INFO:create_model() successfully completed......................................
2024-09-26 13:31:31,939:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:31,939:INFO:Creating metrics dataframe
2024-09-26 13:31:31,949:INFO:Initializing Light Gradient Boosting Machine
2024-09-26 13:31:31,949:INFO:Total runtime is 0.17672892014185584 minutes
2024-09-26 13:31:31,952:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:31,952:INFO:Initializing create_model()
2024-09-26 13:31:31,953:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:31,953:INFO:Checking exceptions
2024-09-26 13:31:31,953:INFO:Importing libraries
2024-09-26 13:31:31,953:INFO:Copying training dataset
2024-09-26 13:31:31,957:INFO:Defining folds
2024-09-26 13:31:31,957:INFO:Declaring metric variables
2024-09-26 13:31:31,960:INFO:Importing untrained model
2024-09-26 13:31:31,963:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-26 13:31:31,970:INFO:Starting cross validation
2024-09-26 13:31:31,971:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:32,502:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,508:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,514:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,518:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,522:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,523:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,528:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,529:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,534:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,534:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,540:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,543:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,546:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,548:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,552:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,555:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,561:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,567:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,607:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,613:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,619:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,621:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,627:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,633:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,646:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,653:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,659:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,663:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,668:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,674:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,691:INFO:Calculating mean and std
2024-09-26 13:31:32,693:INFO:Creating metrics dataframe
2024-09-26 13:31:32,695:INFO:Uploading results into container
2024-09-26 13:31:32,696:INFO:Uploading model into container now
2024-09-26 13:31:32,696:INFO:_master_model_container: 13
2024-09-26 13:31:32,696:INFO:_display_container: 2
2024-09-26 13:31:32,697:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=293, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:31:32,697:INFO:create_model() successfully completed......................................
2024-09-26 13:31:32,776:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:32,776:INFO:Creating metrics dataframe
2024-09-26 13:31:32,786:INFO:Initializing Dummy Classifier
2024-09-26 13:31:32,787:INFO:Total runtime is 0.19069918791453042 minutes
2024-09-26 13:31:32,790:INFO:SubProcess create_model() called ==================================
2024-09-26 13:31:32,790:INFO:Initializing create_model()
2024-09-26 13:31:32,790:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A42058610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:32,790:INFO:Checking exceptions
2024-09-26 13:31:32,791:INFO:Importing libraries
2024-09-26 13:31:32,791:INFO:Copying training dataset
2024-09-26 13:31:32,796:INFO:Defining folds
2024-09-26 13:31:32,796:INFO:Declaring metric variables
2024-09-26 13:31:32,799:INFO:Importing untrained model
2024-09-26 13:31:32,803:INFO:Dummy Classifier Imported successfully
2024-09-26 13:31:32,809:INFO:Starting cross validation
2024-09-26 13:31:32,810:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:32,886:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,889:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,891:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:32,893:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,893:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,894:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,895:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,897:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,898:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,899:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:32,899:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,899:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,901:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,901:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:32,902:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:32,903:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,903:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:32,903:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,905:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,906:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,908:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,910:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,912:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:32,912:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,913:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,913:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,914:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:32,915:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,916:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,917:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,917:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:32,919:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,919:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,920:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,921:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:32,923:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,923:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,925:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-26 13:31:32,936:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:32,956:INFO:Calculating mean and std
2024-09-26 13:31:32,957:INFO:Creating metrics dataframe
2024-09-26 13:31:32,958:INFO:Uploading results into container
2024-09-26 13:31:32,959:INFO:Uploading model into container now
2024-09-26 13:31:32,959:INFO:_master_model_container: 14
2024-09-26 13:31:32,959:INFO:_display_container: 2
2024-09-26 13:31:32,960:INFO:DummyClassifier(constant=None, random_state=293, strategy='prior')
2024-09-26 13:31:32,960:INFO:create_model() successfully completed......................................
2024-09-26 13:31:33,027:INFO:SubProcess create_model() end ==================================
2024-09-26 13:31:33,027:INFO:Creating metrics dataframe
2024-09-26 13:31:33,039:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-09-26 13:31:33,046:INFO:Initializing create_model()
2024-09-26 13:31:33,046:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=293, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:33,047:INFO:Checking exceptions
2024-09-26 13:31:33,048:INFO:Importing libraries
2024-09-26 13:31:33,048:INFO:Copying training dataset
2024-09-26 13:31:33,052:INFO:Defining folds
2024-09-26 13:31:33,053:INFO:Declaring metric variables
2024-09-26 13:31:33,053:INFO:Importing untrained model
2024-09-26 13:31:33,053:INFO:Declaring custom model
2024-09-26 13:31:33,053:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-26 13:31:33,054:INFO:Cross validation set to False
2024-09-26 13:31:33,054:INFO:Fitting Model
2024-09-26 13:31:33,088:INFO:[LightGBM] [Info] Number of positive: 1129, number of negative: 1859
2024-09-26 13:31:33,088:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000357 seconds.
2024-09-26 13:31:33,089:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-09-26 13:31:33,089:INFO:[LightGBM] [Info] Total Bins 1432
2024-09-26 13:31:33,089:INFO:[LightGBM] [Info] Number of data points in the train set: 2988, number of used features: 11
2024-09-26 13:31:33,089:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377845 -> initscore=-0.498706
2024-09-26 13:31:33,089:INFO:[LightGBM] [Info] Start training from score -0.498706
2024-09-26 13:31:33,090:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,091:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,091:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,092:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,092:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,093:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,094:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,094:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,095:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,096:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,100:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,103:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,104:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,168:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=293, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:31:33,169:INFO:create_model() successfully completed......................................
2024-09-26 13:31:33,276:INFO:_master_model_container: 14
2024-09-26 13:31:33,276:INFO:_display_container: 2
2024-09-26 13:31:33,277:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=293, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:31:33,277:INFO:compare_models() successfully completed......................................
2024-09-26 13:31:33,277:INFO:Initializing finalize_model()
2024-09-26 13:31:33,277:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=293, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:31:33,278:INFO:Finalizing LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=293, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-26 13:31:33,281:INFO:Initializing create_model()
2024-09-26 13:31:33,281:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=293, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:33,281:INFO:Checking exceptions
2024-09-26 13:31:33,282:INFO:Importing libraries
2024-09-26 13:31:33,282:INFO:Copying training dataset
2024-09-26 13:31:33,283:INFO:Defining folds
2024-09-26 13:31:33,283:INFO:Declaring metric variables
2024-09-26 13:31:33,283:INFO:Importing untrained model
2024-09-26 13:31:33,283:INFO:Declaring custom model
2024-09-26 13:31:33,284:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-26 13:31:33,285:INFO:Cross validation set to False
2024-09-26 13:31:33,285:INFO:Fitting Model
2024-09-26 13:31:33,318:INFO:[LightGBM] [Info] Number of positive: 1613, number of negative: 2656
2024-09-26 13:31:33,319:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000255 seconds.
2024-09-26 13:31:33,319:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-09-26 13:31:33,319:INFO:[LightGBM] [Info] Total Bins 1454
2024-09-26 13:31:33,319:INFO:[LightGBM] [Info] Number of data points in the train set: 4269, number of used features: 11
2024-09-26 13:31:33,319:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377840 -> initscore=-0.498725
2024-09-26 13:31:33,319:INFO:[LightGBM] [Info] Start training from score -0.498725
2024-09-26 13:31:33,320:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,321:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-26 13:31:33,423:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=293,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-09-26 13:31:33,423:INFO:create_model() successfully completed......................................
2024-09-26 13:31:33,501:INFO:_master_model_container: 14
2024-09-26 13:31:33,501:INFO:_display_container: 2
2024-09-26 13:31:33,526:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=293,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-09-26 13:31:33,526:INFO:finalize_model() successfully completed......................................
2024-09-26 13:31:33,617:INFO:Initializing evaluate_model()
2024-09-26 13:31:33,617:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=293,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-09-26 13:31:33,652:INFO:Initializing plot_model()
2024-09-26 13:31:33,652:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=293,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A7E776920>, system=True)
2024-09-26 13:31:33,652:INFO:Checking exceptions
2024-09-26 13:31:33,654:INFO:Preloading libraries
2024-09-26 13:31:33,660:INFO:Copying training dataset
2024-09-26 13:31:33,660:INFO:Plot type: pipeline
2024-09-26 13:31:33,846:INFO:Visual Rendered Successfully
2024-09-26 13:31:33,913:INFO:plot_model() successfully completed......................................
2024-09-26 13:31:33,962:INFO:PyCaret ClassificationExperiment
2024-09-26 13:31:33,962:INFO:Logging name: clf-default-name
2024-09-26 13:31:33,962:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:31:33,962:INFO:version 3.3.2
2024-09-26 13:31:33,962:INFO:Initializing setup()
2024-09-26 13:31:33,962:INFO:self.USI: 0aab
2024-09-26 13:31:33,962:INFO:self._variable_keys: {'fix_imbalance', 'exp_id', 'USI', 'data', 'X_test', '_ml_usecase', 'gpu_param', 'html_param', 'exp_name_log', 'memory', 'X', 'seed', 'is_multiclass', 'logging_param', 'n_jobs_param', 'fold_generator', 'gpu_n_jobs_param', 'fold_shuffle_param', 'y', 'fold_groups_param', 'X_train', 'target_param', '_available_plots', 'y_test', 'log_plots_param', 'idx', 'pipeline', 'y_train'}
2024-09-26 13:31:33,962:INFO:Checking environment
2024-09-26 13:31:33,963:INFO:python_version: 3.10.15
2024-09-26 13:31:33,963:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:31:33,963:INFO:machine: AMD64
2024-09-26 13:31:33,963:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:31:33,967:INFO:Memory: svmem(total=137338810368, available=121153986560, percent=11.8, used=16184823808, free=121153986560)
2024-09-26 13:31:33,968:INFO:Physical Core: 8
2024-09-26 13:31:33,968:INFO:Logical Core: 16
2024-09-26 13:31:33,968:INFO:Checking libraries
2024-09-26 13:31:33,968:INFO:System:
2024-09-26 13:31:33,968:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:31:33,968:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:31:33,968:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:31:33,968:INFO:PyCaret required dependencies:
2024-09-26 13:31:33,968:INFO:                 pip: 24.2
2024-09-26 13:31:33,968:INFO:          setuptools: 75.1.0
2024-09-26 13:31:33,968:INFO:             pycaret: 3.3.2
2024-09-26 13:31:33,968:INFO:             IPython: 8.27.0
2024-09-26 13:31:33,969:INFO:          ipywidgets: 8.1.5
2024-09-26 13:31:33,969:INFO:                tqdm: 4.66.5
2024-09-26 13:31:33,969:INFO:               numpy: 1.26.4
2024-09-26 13:31:33,969:INFO:              pandas: 2.1.4
2024-09-26 13:31:33,969:INFO:              jinja2: 3.1.4
2024-09-26 13:31:33,969:INFO:               scipy: 1.11.4
2024-09-26 13:31:33,969:INFO:              joblib: 1.3.2
2024-09-26 13:31:33,969:INFO:             sklearn: 1.4.2
2024-09-26 13:31:33,969:INFO:                pyod: 2.0.2
2024-09-26 13:31:33,969:INFO:            imblearn: 0.12.3
2024-09-26 13:31:33,969:INFO:   category_encoders: 2.6.3
2024-09-26 13:31:33,969:INFO:            lightgbm: 4.5.0
2024-09-26 13:31:33,969:INFO:               numba: 0.60.0
2024-09-26 13:31:33,969:INFO:            requests: 2.32.3
2024-09-26 13:31:33,969:INFO:          matplotlib: 3.7.5
2024-09-26 13:31:33,969:INFO:          scikitplot: 0.3.7
2024-09-26 13:31:33,969:INFO:         yellowbrick: 1.5
2024-09-26 13:31:33,969:INFO:              plotly: 5.24.1
2024-09-26 13:31:33,969:INFO:    plotly-resampler: Not installed
2024-09-26 13:31:33,969:INFO:             kaleido: 0.2.1
2024-09-26 13:31:33,969:INFO:           schemdraw: 0.15
2024-09-26 13:31:33,969:INFO:         statsmodels: 0.14.3
2024-09-26 13:31:33,969:INFO:              sktime: 0.26.0
2024-09-26 13:31:33,970:INFO:               tbats: 1.1.3
2024-09-26 13:31:33,970:INFO:            pmdarima: 2.0.4
2024-09-26 13:31:33,970:INFO:              psutil: 6.0.0
2024-09-26 13:31:33,970:INFO:          markupsafe: 2.1.5
2024-09-26 13:31:33,970:INFO:             pickle5: Not installed
2024-09-26 13:31:33,970:INFO:         cloudpickle: 3.0.0
2024-09-26 13:31:33,970:INFO:         deprecation: 2.1.0
2024-09-26 13:31:33,970:INFO:              xxhash: 3.5.0
2024-09-26 13:31:33,970:INFO:           wurlitzer: Not installed
2024-09-26 13:31:33,970:INFO:PyCaret optional dependencies:
2024-09-26 13:31:33,970:INFO:                shap: 0.46.0
2024-09-26 13:31:33,970:INFO:           interpret: Not installed
2024-09-26 13:31:33,970:INFO:                umap: Not installed
2024-09-26 13:31:33,970:INFO:     ydata_profiling: Not installed
2024-09-26 13:31:33,970:INFO:  explainerdashboard: Not installed
2024-09-26 13:31:33,970:INFO:             autoviz: Not installed
2024-09-26 13:31:33,970:INFO:           fairlearn: Not installed
2024-09-26 13:31:33,970:INFO:          deepchecks: Not installed
2024-09-26 13:31:33,970:INFO:             xgboost: Not installed
2024-09-26 13:31:33,970:INFO:            catboost: Not installed
2024-09-26 13:31:33,970:INFO:              kmodes: Not installed
2024-09-26 13:31:33,970:INFO:             mlxtend: Not installed
2024-09-26 13:31:33,970:INFO:       statsforecast: Not installed
2024-09-26 13:31:33,971:INFO:        tune_sklearn: Not installed
2024-09-26 13:31:33,971:INFO:                 ray: Not installed
2024-09-26 13:31:33,971:INFO:            hyperopt: Not installed
2024-09-26 13:31:33,971:INFO:              optuna: Not installed
2024-09-26 13:31:33,971:INFO:               skopt: Not installed
2024-09-26 13:31:33,971:INFO:              mlflow: Not installed
2024-09-26 13:31:33,971:INFO:              gradio: Not installed
2024-09-26 13:31:33,971:INFO:             fastapi: Not installed
2024-09-26 13:31:33,971:INFO:             uvicorn: Not installed
2024-09-26 13:31:33,971:INFO:              m2cgen: Not installed
2024-09-26 13:31:33,971:INFO:           evidently: Not installed
2024-09-26 13:31:33,971:INFO:               fugue: Not installed
2024-09-26 13:31:33,971:INFO:           streamlit: Not installed
2024-09-26 13:31:33,971:INFO:             prophet: Not installed
2024-09-26 13:31:33,971:INFO:None
2024-09-26 13:31:33,971:INFO:Set up data.
2024-09-26 13:31:33,978:INFO:Set up folding strategy.
2024-09-26 13:31:33,978:INFO:Set up train/test split.
2024-09-26 13:31:33,985:INFO:Set up index.
2024-09-26 13:31:33,985:INFO:Assigning column types.
2024-09-26 13:31:33,989:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:31:34,039:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:31:34,040:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:34,071:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,071:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,121:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:31:34,122:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:34,153:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,153:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,154:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:31:34,204:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:34,235:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,235:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,286:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:34,317:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,318:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,318:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:31:34,400:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,400:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,481:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,481:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,483:INFO:Preparing preprocessing pipeline...
2024-09-26 13:31:34,484:INFO:Set up label encoding.
2024-09-26 13:31:34,484:INFO:Set up simple imputation.
2024-09-26 13:31:34,487:INFO:Set up encoding of ordinal features.
2024-09-26 13:31:34,489:INFO:Set up encoding of categorical features.
2024-09-26 13:31:34,489:INFO:Set up imbalanced handling.
2024-09-26 13:31:34,560:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:31:34,585:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-26 13:31:34,586:INFO:Creating final display dataframe.
2024-09-26 13:31:34,813:INFO:Setup _display_container:                     Description                       Value
0                    Session id                        6718
1                        Target                 loan_status
2                   Target type                      Binary
3                Target mapping   Approved: 0,  Rejected: 1
4           Original data shape                  (4269, 12)
5        Transformed data shape                  (4999, 12)
6   Transformed train set shape                  (3718, 12)
7    Transformed test set shape                  (1281, 12)
8              Numeric features                           9
9          Categorical features                           2
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16                Fix imbalance                        True
17         Fix imbalance method                       SMOTE
18               Fold Generator             StratifiedKFold
19                  Fold Number                          10
20                     CPU Jobs                          -1
21                      Use GPU                       False
22               Log Experiment                       False
23              Experiment Name            clf-default-name
24                          USI                        0aab
2024-09-26 13:31:34,901:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,902:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,986:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,986:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:34,987:INFO:setup() successfully completed in 1.03s...............
2024-09-26 13:31:34,987:INFO:Initializing create_model()
2024-09-26 13:31:34,987:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A41DDEDD0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:34,987:INFO:Checking exceptions
2024-09-26 13:31:35,002:INFO:Importing libraries
2024-09-26 13:31:35,002:INFO:Copying training dataset
2024-09-26 13:31:35,007:INFO:Defining folds
2024-09-26 13:31:35,007:INFO:Declaring metric variables
2024-09-26 13:31:35,010:INFO:Importing untrained model
2024-09-26 13:31:35,013:INFO:Logistic Regression Imported successfully
2024-09-26 13:31:35,020:INFO:Starting cross validation
2024-09-26 13:31:35,021:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:35,166:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,166:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,170:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,171:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,174:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,174:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,181:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,183:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,184:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,185:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,186:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,188:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,190:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,190:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,192:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,193:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,196:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,197:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,199:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,201:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,203:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,204:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,207:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,208:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,211:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,212:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,215:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,232:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,236:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,239:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:35,255:INFO:Calculating mean and std
2024-09-26 13:31:35,256:INFO:Creating metrics dataframe
2024-09-26 13:31:35,261:INFO:Finalizing model
2024-09-26 13:31:35,373:INFO:Uploading results into container
2024-09-26 13:31:35,374:INFO:Uploading model into container now
2024-09-26 13:31:35,384:INFO:_master_model_container: 1
2024-09-26 13:31:35,384:INFO:_display_container: 2
2024-09-26 13:31:35,385:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6718, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:31:35,385:INFO:create_model() successfully completed......................................
2024-09-26 13:31:35,457:INFO:Initializing finalize_model()
2024-09-26 13:31:35,457:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A41DDEDD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6718, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:31:35,457:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6718, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:31:35,460:INFO:Initializing create_model()
2024-09-26 13:31:35,460:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A41DDEDD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6718, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:35,460:INFO:Checking exceptions
2024-09-26 13:31:35,462:INFO:Importing libraries
2024-09-26 13:31:35,462:INFO:Copying training dataset
2024-09-26 13:31:35,462:INFO:Defining folds
2024-09-26 13:31:35,462:INFO:Declaring metric variables
2024-09-26 13:31:35,462:INFO:Importing untrained model
2024-09-26 13:31:35,463:INFO:Declaring custom model
2024-09-26 13:31:35,463:INFO:Logistic Regression Imported successfully
2024-09-26 13:31:35,464:INFO:Cross validation set to False
2024-09-26 13:31:35,464:INFO:Fitting Model
2024-09-26 13:31:35,620:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=6718,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:31:35,620:INFO:create_model() successfully completed......................................
2024-09-26 13:31:35,690:INFO:_master_model_container: 1
2024-09-26 13:31:35,690:INFO:_display_container: 2
2024-09-26 13:31:35,717:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=6718,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:31:35,718:INFO:finalize_model() successfully completed......................................
2024-09-26 13:31:35,814:INFO:Initializing evaluate_model()
2024-09-26 13:31:35,814:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A41DDEDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=6718,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-09-26 13:31:35,851:INFO:Initializing plot_model()
2024-09-26 13:31:35,851:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=6718,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A41DDEDD0>, system=True)
2024-09-26 13:31:35,851:INFO:Checking exceptions
2024-09-26 13:31:35,855:INFO:Preloading libraries
2024-09-26 13:31:35,856:INFO:Copying training dataset
2024-09-26 13:31:35,856:INFO:Plot type: pipeline
2024-09-26 13:31:35,990:INFO:Visual Rendered Successfully
2024-09-26 13:31:36,064:INFO:plot_model() successfully completed......................................
2024-09-26 13:31:36,093:INFO:Initializing predict_model()
2024-09-26 13:31:36,093:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A41DDEDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=6718,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023A4207B5B0>)
2024-09-26 13:31:36,093:INFO:Checking exceptions
2024-09-26 13:31:36,093:INFO:Preloading libraries
2024-09-26 13:31:36,217:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:36,226:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:36,235:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-26 13:31:36,374:INFO:Initializing save_model()
2024-09-26 13:31:36,374:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=6718,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-26 13:31:36,375:INFO:Adding model into prep_pipe
2024-09-26 13:31:36,375:WARNING:Only Model saved as it was a pipeline.
2024-09-26 13:31:36,381:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-26 13:31:36,408:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=6718,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:31:36,408:INFO:save_model() successfully completed......................................
2024-09-26 13:31:37,007:INFO:PyCaret ClassificationExperiment
2024-09-26 13:31:37,007:INFO:Logging name: clf-default-name
2024-09-26 13:31:37,007:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:31:37,007:INFO:version 3.3.2
2024-09-26 13:31:37,007:INFO:Initializing setup()
2024-09-26 13:31:37,007:INFO:self.USI: a551
2024-09-26 13:31:37,007:INFO:self._variable_keys: {'fix_imbalance', 'exp_id', 'USI', 'data', 'X_test', '_ml_usecase', 'gpu_param', 'html_param', 'exp_name_log', 'memory', 'X', 'seed', 'is_multiclass', 'logging_param', 'n_jobs_param', 'fold_generator', 'gpu_n_jobs_param', 'fold_shuffle_param', 'y', 'fold_groups_param', 'X_train', 'target_param', '_available_plots', 'y_test', 'log_plots_param', 'idx', 'pipeline', 'y_train'}
2024-09-26 13:31:37,007:INFO:Checking environment
2024-09-26 13:31:37,008:INFO:python_version: 3.10.15
2024-09-26 13:31:37,008:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:31:37,008:INFO:machine: AMD64
2024-09-26 13:31:37,008:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:31:37,012:INFO:Memory: svmem(total=137338810368, available=121193328640, percent=11.8, used=16145481728, free=121193328640)
2024-09-26 13:31:37,013:INFO:Physical Core: 8
2024-09-26 13:31:37,013:INFO:Logical Core: 16
2024-09-26 13:31:37,013:INFO:Checking libraries
2024-09-26 13:31:37,013:INFO:System:
2024-09-26 13:31:37,013:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:31:37,013:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:31:37,013:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:31:37,013:INFO:PyCaret required dependencies:
2024-09-26 13:31:37,013:INFO:                 pip: 24.2
2024-09-26 13:31:37,013:INFO:          setuptools: 75.1.0
2024-09-26 13:31:37,013:INFO:             pycaret: 3.3.2
2024-09-26 13:31:37,013:INFO:             IPython: 8.27.0
2024-09-26 13:31:37,013:INFO:          ipywidgets: 8.1.5
2024-09-26 13:31:37,013:INFO:                tqdm: 4.66.5
2024-09-26 13:31:37,013:INFO:               numpy: 1.26.4
2024-09-26 13:31:37,013:INFO:              pandas: 2.1.4
2024-09-26 13:31:37,013:INFO:              jinja2: 3.1.4
2024-09-26 13:31:37,013:INFO:               scipy: 1.11.4
2024-09-26 13:31:37,013:INFO:              joblib: 1.3.2
2024-09-26 13:31:37,013:INFO:             sklearn: 1.4.2
2024-09-26 13:31:37,013:INFO:                pyod: 2.0.2
2024-09-26 13:31:37,014:INFO:            imblearn: 0.12.3
2024-09-26 13:31:37,014:INFO:   category_encoders: 2.6.3
2024-09-26 13:31:37,014:INFO:            lightgbm: 4.5.0
2024-09-26 13:31:37,014:INFO:               numba: 0.60.0
2024-09-26 13:31:37,014:INFO:            requests: 2.32.3
2024-09-26 13:31:37,014:INFO:          matplotlib: 3.7.5
2024-09-26 13:31:37,014:INFO:          scikitplot: 0.3.7
2024-09-26 13:31:37,014:INFO:         yellowbrick: 1.5
2024-09-26 13:31:37,014:INFO:              plotly: 5.24.1
2024-09-26 13:31:37,014:INFO:    plotly-resampler: Not installed
2024-09-26 13:31:37,014:INFO:             kaleido: 0.2.1
2024-09-26 13:31:37,014:INFO:           schemdraw: 0.15
2024-09-26 13:31:37,014:INFO:         statsmodels: 0.14.3
2024-09-26 13:31:37,014:INFO:              sktime: 0.26.0
2024-09-26 13:31:37,014:INFO:               tbats: 1.1.3
2024-09-26 13:31:37,014:INFO:            pmdarima: 2.0.4
2024-09-26 13:31:37,014:INFO:              psutil: 6.0.0
2024-09-26 13:31:37,014:INFO:          markupsafe: 2.1.5
2024-09-26 13:31:37,014:INFO:             pickle5: Not installed
2024-09-26 13:31:37,014:INFO:         cloudpickle: 3.0.0
2024-09-26 13:31:37,014:INFO:         deprecation: 2.1.0
2024-09-26 13:31:37,015:INFO:              xxhash: 3.5.0
2024-09-26 13:31:37,015:INFO:           wurlitzer: Not installed
2024-09-26 13:31:37,015:INFO:PyCaret optional dependencies:
2024-09-26 13:31:37,015:INFO:                shap: 0.46.0
2024-09-26 13:31:37,015:INFO:           interpret: Not installed
2024-09-26 13:31:37,015:INFO:                umap: Not installed
2024-09-26 13:31:37,015:INFO:     ydata_profiling: Not installed
2024-09-26 13:31:37,015:INFO:  explainerdashboard: Not installed
2024-09-26 13:31:37,015:INFO:             autoviz: Not installed
2024-09-26 13:31:37,015:INFO:           fairlearn: Not installed
2024-09-26 13:31:37,015:INFO:          deepchecks: Not installed
2024-09-26 13:31:37,015:INFO:             xgboost: Not installed
2024-09-26 13:31:37,015:INFO:            catboost: Not installed
2024-09-26 13:31:37,015:INFO:              kmodes: Not installed
2024-09-26 13:31:37,015:INFO:             mlxtend: Not installed
2024-09-26 13:31:37,015:INFO:       statsforecast: Not installed
2024-09-26 13:31:37,015:INFO:        tune_sklearn: Not installed
2024-09-26 13:31:37,015:INFO:                 ray: Not installed
2024-09-26 13:31:37,015:INFO:            hyperopt: Not installed
2024-09-26 13:31:37,015:INFO:              optuna: Not installed
2024-09-26 13:31:37,015:INFO:               skopt: Not installed
2024-09-26 13:31:37,015:INFO:              mlflow: Not installed
2024-09-26 13:31:37,015:INFO:              gradio: Not installed
2024-09-26 13:31:37,016:INFO:             fastapi: Not installed
2024-09-26 13:31:37,016:INFO:             uvicorn: Not installed
2024-09-26 13:31:37,016:INFO:              m2cgen: Not installed
2024-09-26 13:31:37,016:INFO:           evidently: Not installed
2024-09-26 13:31:37,016:INFO:               fugue: Not installed
2024-09-26 13:31:37,016:INFO:           streamlit: Not installed
2024-09-26 13:31:37,016:INFO:             prophet: Not installed
2024-09-26 13:31:37,016:INFO:None
2024-09-26 13:31:37,016:INFO:Set up data.
2024-09-26 13:31:37,020:INFO:Set up folding strategy.
2024-09-26 13:31:37,020:INFO:Set up train/test split.
2024-09-26 13:31:37,027:INFO:Set up index.
2024-09-26 13:31:37,027:INFO:Assigning column types.
2024-09-26 13:31:37,031:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:31:37,081:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:31:37,082:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:37,113:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,113:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,163:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:31:37,164:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:37,196:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,196:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,197:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:31:37,247:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:37,279:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,280:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,332:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:37,363:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,363:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,364:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:31:37,446:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,447:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,528:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,528:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,529:INFO:Preparing preprocessing pipeline...
2024-09-26 13:31:37,531:INFO:Set up simple imputation.
2024-09-26 13:31:37,531:INFO:Set up imbalanced handling.
2024-09-26 13:31:37,557:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:31:37,563:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-26 13:31:37,563:INFO:Creating final display dataframe.
2024-09-26 13:31:37,680:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              a551
2024-09-26 13:31:37,773:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,774:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,865:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,865:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:37,867:INFO:setup() successfully completed in 0.86s...............
2024-09-26 13:31:37,867:INFO:Initializing create_model()
2024-09-26 13:31:37,867:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A41DDD240>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:37,867:INFO:Checking exceptions
2024-09-26 13:31:37,881:INFO:Importing libraries
2024-09-26 13:31:37,881:INFO:Copying training dataset
2024-09-26 13:31:37,887:INFO:Defining folds
2024-09-26 13:31:37,887:INFO:Declaring metric variables
2024-09-26 13:31:37,890:INFO:Importing untrained model
2024-09-26 13:31:37,893:INFO:Logistic Regression Imported successfully
2024-09-26 13:31:37,901:INFO:Starting cross validation
2024-09-26 13:31:37,902:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:38,041:INFO:Calculating mean and std
2024-09-26 13:31:38,042:INFO:Creating metrics dataframe
2024-09-26 13:31:38,047:INFO:Finalizing model
2024-09-26 13:31:38,140:INFO:Uploading results into container
2024-09-26 13:31:38,141:INFO:Uploading model into container now
2024-09-26 13:31:38,151:INFO:_master_model_container: 1
2024-09-26 13:31:38,152:INFO:_display_container: 2
2024-09-26 13:31:38,152:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:31:38,152:INFO:create_model() successfully completed......................................
2024-09-26 13:31:38,233:INFO:Initializing finalize_model()
2024-09-26 13:31:38,234:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A41DDD240>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:31:38,234:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:31:38,237:INFO:Initializing create_model()
2024-09-26 13:31:38,238:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A41DDD240>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:38,238:INFO:Checking exceptions
2024-09-26 13:31:38,239:INFO:Importing libraries
2024-09-26 13:31:38,239:INFO:Copying training dataset
2024-09-26 13:31:38,239:INFO:Defining folds
2024-09-26 13:31:38,239:INFO:Declaring metric variables
2024-09-26 13:31:38,240:INFO:Importing untrained model
2024-09-26 13:31:38,240:INFO:Declaring custom model
2024-09-26 13:31:38,240:INFO:Logistic Regression Imported successfully
2024-09-26 13:31:38,241:INFO:Cross validation set to False
2024-09-26 13:31:38,241:INFO:Fitting Model
2024-09-26 13:31:38,351:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:31:38,351:INFO:create_model() successfully completed......................................
2024-09-26 13:31:38,436:INFO:_master_model_container: 1
2024-09-26 13:31:38,437:INFO:_display_container: 2
2024-09-26 13:31:38,444:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:31:38,445:INFO:finalize_model() successfully completed......................................
2024-09-26 13:31:38,539:INFO:Initializing predict_model()
2024-09-26 13:31:38,539:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A41DDD240>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023A7E739870>)
2024-09-26 13:31:38,539:INFO:Checking exceptions
2024-09-26 13:31:38,540:INFO:Preloading libraries
2024-09-26 13:31:38,541:INFO:Set up data.
2024-09-26 13:31:38,547:INFO:Set up index.
2024-09-26 13:31:38,676:INFO:Initializing save_model()
2024-09-26 13:31:38,677:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-26 13:31:38,677:INFO:Adding model into prep_pipe
2024-09-26 13:31:38,677:WARNING:Only Model saved as it was a pipeline.
2024-09-26 13:31:38,681:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-26 13:31:38,689:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:31:38,689:INFO:save_model() successfully completed......................................
2024-09-26 13:31:44,143:INFO:PyCaret ClassificationExperiment
2024-09-26 13:31:44,143:INFO:Logging name: clf-default-name
2024-09-26 13:31:44,143:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-26 13:31:44,144:INFO:version 3.3.2
2024-09-26 13:31:44,144:INFO:Initializing setup()
2024-09-26 13:31:44,144:INFO:self.USI: 5aa0
2024-09-26 13:31:44,144:INFO:self._variable_keys: {'fix_imbalance', 'exp_id', 'USI', 'data', 'X_test', '_ml_usecase', 'gpu_param', 'html_param', 'exp_name_log', 'memory', 'X', 'seed', 'is_multiclass', 'logging_param', 'n_jobs_param', 'fold_generator', 'gpu_n_jobs_param', 'fold_shuffle_param', 'y', 'fold_groups_param', 'X_train', 'target_param', '_available_plots', 'y_test', 'log_plots_param', 'idx', 'pipeline', 'y_train'}
2024-09-26 13:31:44,144:INFO:Checking environment
2024-09-26 13:31:44,144:INFO:python_version: 3.10.15
2024-09-26 13:31:44,144:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-26 13:31:44,144:INFO:machine: AMD64
2024-09-26 13:31:44,144:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-26 13:31:44,148:INFO:Memory: svmem(total=137338810368, available=121129050112, percent=11.8, used=16209760256, free=121129050112)
2024-09-26 13:31:44,148:INFO:Physical Core: 8
2024-09-26 13:31:44,148:INFO:Logical Core: 16
2024-09-26 13:31:44,148:INFO:Checking libraries
2024-09-26 13:31:44,148:INFO:System:
2024-09-26 13:31:44,148:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-26 13:31:44,148:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-26 13:31:44,149:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-26 13:31:44,149:INFO:PyCaret required dependencies:
2024-09-26 13:31:44,149:INFO:                 pip: 24.2
2024-09-26 13:31:44,149:INFO:          setuptools: 75.1.0
2024-09-26 13:31:44,149:INFO:             pycaret: 3.3.2
2024-09-26 13:31:44,149:INFO:             IPython: 8.27.0
2024-09-26 13:31:44,149:INFO:          ipywidgets: 8.1.5
2024-09-26 13:31:44,149:INFO:                tqdm: 4.66.5
2024-09-26 13:31:44,149:INFO:               numpy: 1.26.4
2024-09-26 13:31:44,149:INFO:              pandas: 2.1.4
2024-09-26 13:31:44,149:INFO:              jinja2: 3.1.4
2024-09-26 13:31:44,149:INFO:               scipy: 1.11.4
2024-09-26 13:31:44,149:INFO:              joblib: 1.3.2
2024-09-26 13:31:44,149:INFO:             sklearn: 1.4.2
2024-09-26 13:31:44,149:INFO:                pyod: 2.0.2
2024-09-26 13:31:44,149:INFO:            imblearn: 0.12.3
2024-09-26 13:31:44,149:INFO:   category_encoders: 2.6.3
2024-09-26 13:31:44,149:INFO:            lightgbm: 4.5.0
2024-09-26 13:31:44,150:INFO:               numba: 0.60.0
2024-09-26 13:31:44,150:INFO:            requests: 2.32.3
2024-09-26 13:31:44,150:INFO:          matplotlib: 3.7.5
2024-09-26 13:31:44,150:INFO:          scikitplot: 0.3.7
2024-09-26 13:31:44,150:INFO:         yellowbrick: 1.5
2024-09-26 13:31:44,150:INFO:              plotly: 5.24.1
2024-09-26 13:31:44,150:INFO:    plotly-resampler: Not installed
2024-09-26 13:31:44,150:INFO:             kaleido: 0.2.1
2024-09-26 13:31:44,150:INFO:           schemdraw: 0.15
2024-09-26 13:31:44,150:INFO:         statsmodels: 0.14.3
2024-09-26 13:31:44,150:INFO:              sktime: 0.26.0
2024-09-26 13:31:44,150:INFO:               tbats: 1.1.3
2024-09-26 13:31:44,150:INFO:            pmdarima: 2.0.4
2024-09-26 13:31:44,150:INFO:              psutil: 6.0.0
2024-09-26 13:31:44,150:INFO:          markupsafe: 2.1.5
2024-09-26 13:31:44,150:INFO:             pickle5: Not installed
2024-09-26 13:31:44,150:INFO:         cloudpickle: 3.0.0
2024-09-26 13:31:44,150:INFO:         deprecation: 2.1.0
2024-09-26 13:31:44,150:INFO:              xxhash: 3.5.0
2024-09-26 13:31:44,150:INFO:           wurlitzer: Not installed
2024-09-26 13:31:44,150:INFO:PyCaret optional dependencies:
2024-09-26 13:31:44,150:INFO:                shap: 0.46.0
2024-09-26 13:31:44,150:INFO:           interpret: Not installed
2024-09-26 13:31:44,151:INFO:                umap: Not installed
2024-09-26 13:31:44,151:INFO:     ydata_profiling: Not installed
2024-09-26 13:31:44,151:INFO:  explainerdashboard: Not installed
2024-09-26 13:31:44,151:INFO:             autoviz: Not installed
2024-09-26 13:31:44,151:INFO:           fairlearn: Not installed
2024-09-26 13:31:44,151:INFO:          deepchecks: Not installed
2024-09-26 13:31:44,151:INFO:             xgboost: Not installed
2024-09-26 13:31:44,151:INFO:            catboost: Not installed
2024-09-26 13:31:44,151:INFO:              kmodes: Not installed
2024-09-26 13:31:44,151:INFO:             mlxtend: Not installed
2024-09-26 13:31:44,151:INFO:       statsforecast: Not installed
2024-09-26 13:31:44,151:INFO:        tune_sklearn: Not installed
2024-09-26 13:31:44,151:INFO:                 ray: Not installed
2024-09-26 13:31:44,151:INFO:            hyperopt: Not installed
2024-09-26 13:31:44,151:INFO:              optuna: Not installed
2024-09-26 13:31:44,151:INFO:               skopt: Not installed
2024-09-26 13:31:44,151:INFO:              mlflow: Not installed
2024-09-26 13:31:44,151:INFO:              gradio: Not installed
2024-09-26 13:31:44,151:INFO:             fastapi: Not installed
2024-09-26 13:31:44,151:INFO:             uvicorn: Not installed
2024-09-26 13:31:44,151:INFO:              m2cgen: Not installed
2024-09-26 13:31:44,151:INFO:           evidently: Not installed
2024-09-26 13:31:44,151:INFO:               fugue: Not installed
2024-09-26 13:31:44,151:INFO:           streamlit: Not installed
2024-09-26 13:31:44,152:INFO:             prophet: Not installed
2024-09-26 13:31:44,152:INFO:None
2024-09-26 13:31:44,152:INFO:Set up data.
2024-09-26 13:31:44,156:INFO:Set up folding strategy.
2024-09-26 13:31:44,156:INFO:Set up train/test split.
2024-09-26 13:31:44,162:INFO:Set up index.
2024-09-26 13:31:44,162:INFO:Assigning column types.
2024-09-26 13:31:44,167:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-26 13:31:44,217:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:31:44,217:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:44,249:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,249:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,299:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-26 13:31:44,300:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:44,332:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,332:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,333:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-26 13:31:44,383:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:44,415:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,415:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,467:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-26 13:31:44,498:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,498:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,498:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-26 13:31:44,580:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,580:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,662:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,662:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,663:INFO:Preparing preprocessing pipeline...
2024-09-26 13:31:44,664:INFO:Set up simple imputation.
2024-09-26 13:31:44,664:INFO:Set up imbalanced handling.
2024-09-26 13:31:44,690:INFO:Finished creating preprocessing pipeline.
2024-09-26 13:31:44,697:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-26 13:31:44,697:INFO:Creating final display dataframe.
2024-09-26 13:31:44,813:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              5aa0
2024-09-26 13:31:44,906:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,906:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,992:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,992:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-26 13:31:44,993:INFO:setup() successfully completed in 0.85s...............
2024-09-26 13:31:44,994:INFO:Initializing create_model()
2024-09-26 13:31:44,994:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A45C5B4C0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:44,994:INFO:Checking exceptions
2024-09-26 13:31:45,008:INFO:Importing libraries
2024-09-26 13:31:45,008:INFO:Copying training dataset
2024-09-26 13:31:45,014:INFO:Defining folds
2024-09-26 13:31:45,015:INFO:Declaring metric variables
2024-09-26 13:31:45,018:INFO:Importing untrained model
2024-09-26 13:31:45,022:INFO:Logistic Regression Imported successfully
2024-09-26 13:31:45,029:INFO:Starting cross validation
2024-09-26 13:31:45,030:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-26 13:31:45,191:INFO:Calculating mean and std
2024-09-26 13:31:45,201:INFO:Creating metrics dataframe
2024-09-26 13:31:45,205:INFO:Finalizing model
2024-09-26 13:31:45,296:INFO:Uploading results into container
2024-09-26 13:31:45,297:INFO:Uploading model into container now
2024-09-26 13:31:45,308:INFO:_master_model_container: 1
2024-09-26 13:31:45,308:INFO:_display_container: 2
2024-09-26 13:31:45,309:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:31:45,309:INFO:create_model() successfully completed......................................
2024-09-26 13:31:45,411:INFO:Initializing finalize_model()
2024-09-26 13:31:45,412:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A45C5B4C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-26 13:31:45,412:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-26 13:31:45,415:INFO:Initializing create_model()
2024-09-26 13:31:45,415:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A45C5B4C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-26 13:31:45,415:INFO:Checking exceptions
2024-09-26 13:31:45,416:INFO:Importing libraries
2024-09-26 13:31:45,417:INFO:Copying training dataset
2024-09-26 13:31:45,417:INFO:Defining folds
2024-09-26 13:31:45,417:INFO:Declaring metric variables
2024-09-26 13:31:45,417:INFO:Importing untrained model
2024-09-26 13:31:45,417:INFO:Declaring custom model
2024-09-26 13:31:45,418:INFO:Logistic Regression Imported successfully
2024-09-26 13:31:45,419:INFO:Cross validation set to False
2024-09-26 13:31:45,419:INFO:Fitting Model
2024-09-26 13:31:45,529:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:31:45,529:INFO:create_model() successfully completed......................................
2024-09-26 13:31:45,611:INFO:_master_model_container: 1
2024-09-26 13:31:45,612:INFO:_display_container: 2
2024-09-26 13:31:45,619:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:31:45,619:INFO:finalize_model() successfully completed......................................
2024-09-26 13:31:45,709:INFO:Initializing predict_model()
2024-09-26 13:31:45,709:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A45C5B4C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023A420E08B0>)
2024-09-26 13:31:45,709:INFO:Checking exceptions
2024-09-26 13:31:45,709:INFO:Preloading libraries
2024-09-26 13:31:45,711:INFO:Set up data.
2024-09-26 13:31:45,716:INFO:Set up index.
2024-09-26 13:31:45,842:INFO:Initializing save_model()
2024-09-26 13:31:45,843:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-26 13:31:45,843:INFO:Adding model into prep_pipe
2024-09-26 13:31:45,843:WARNING:Only Model saved as it was a pipeline.
2024-09-26 13:31:45,848:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-26 13:31:45,855:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-26 13:31:45,855:INFO:save_model() successfully completed......................................
2024-09-27 15:28:24,684:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-27 15:28:24,684:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-27 15:28:24,684:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-27 15:28:24,684:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-27 15:28:25,569:INFO:PyCaret ClassificationExperiment
2024-09-27 15:28:25,569:INFO:Logging name: clf-default-name
2024-09-27 15:28:25,569:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-27 15:28:25,569:INFO:version 3.3.2
2024-09-27 15:28:25,569:INFO:Initializing setup()
2024-09-27 15:28:25,569:INFO:self.USI: 5b33
2024-09-27 15:28:25,569:INFO:self._variable_keys: {'USI', 'X_train', '_ml_usecase', 'y_test', 'idx', 'y_train', '_available_plots', 'fix_imbalance', 'html_param', 'memory', 'gpu_param', 'seed', 'target_param', 'logging_param', 'fold_groups_param', 'fold_generator', 'gpu_n_jobs_param', 'n_jobs_param', 'y', 'log_plots_param', 'fold_shuffle_param', 'exp_id', 'X_test', 'is_multiclass', 'exp_name_log', 'pipeline', 'data', 'X'}
2024-09-27 15:28:25,569:INFO:Checking environment
2024-09-27 15:28:25,569:INFO:python_version: 3.10.15
2024-09-27 15:28:25,570:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-27 15:28:25,570:INFO:machine: AMD64
2024-09-27 15:28:25,570:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-27 15:28:25,574:INFO:Memory: svmem(total=137338810368, available=126044098560, percent=8.2, used=11294711808, free=126044098560)
2024-09-27 15:28:25,574:INFO:Physical Core: 8
2024-09-27 15:28:25,574:INFO:Logical Core: 16
2024-09-27 15:28:25,574:INFO:Checking libraries
2024-09-27 15:28:25,574:INFO:System:
2024-09-27 15:28:25,574:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-27 15:28:25,574:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-27 15:28:25,574:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-27 15:28:25,574:INFO:PyCaret required dependencies:
2024-09-27 15:28:25,606:INFO:                 pip: 24.2
2024-09-27 15:28:25,606:INFO:          setuptools: 75.1.0
2024-09-27 15:28:25,606:INFO:             pycaret: 3.3.2
2024-09-27 15:28:25,606:INFO:             IPython: 8.27.0
2024-09-27 15:28:25,606:INFO:          ipywidgets: 8.1.5
2024-09-27 15:28:25,606:INFO:                tqdm: 4.66.5
2024-09-27 15:28:25,606:INFO:               numpy: 1.26.4
2024-09-27 15:28:25,606:INFO:              pandas: 2.1.4
2024-09-27 15:28:25,606:INFO:              jinja2: 3.1.4
2024-09-27 15:28:25,607:INFO:               scipy: 1.11.4
2024-09-27 15:28:25,607:INFO:              joblib: 1.3.2
2024-09-27 15:28:25,607:INFO:             sklearn: 1.4.2
2024-09-27 15:28:25,607:INFO:                pyod: 2.0.2
2024-09-27 15:28:25,607:INFO:            imblearn: 0.12.3
2024-09-27 15:28:25,607:INFO:   category_encoders: 2.6.3
2024-09-27 15:28:25,607:INFO:            lightgbm: 4.5.0
2024-09-27 15:28:25,607:INFO:               numba: 0.60.0
2024-09-27 15:28:25,607:INFO:            requests: 2.32.3
2024-09-27 15:28:25,607:INFO:          matplotlib: 3.7.5
2024-09-27 15:28:25,607:INFO:          scikitplot: 0.3.7
2024-09-27 15:28:25,607:INFO:         yellowbrick: 1.5
2024-09-27 15:28:25,607:INFO:              plotly: 5.24.1
2024-09-27 15:28:25,607:INFO:    plotly-resampler: Not installed
2024-09-27 15:28:25,607:INFO:             kaleido: 0.2.1
2024-09-27 15:28:25,607:INFO:           schemdraw: 0.15
2024-09-27 15:28:25,607:INFO:         statsmodels: 0.14.3
2024-09-27 15:28:25,607:INFO:              sktime: 0.26.0
2024-09-27 15:28:25,607:INFO:               tbats: 1.1.3
2024-09-27 15:28:25,607:INFO:            pmdarima: 2.0.4
2024-09-27 15:28:25,607:INFO:              psutil: 6.0.0
2024-09-27 15:28:25,607:INFO:          markupsafe: 2.1.5
2024-09-27 15:28:25,607:INFO:             pickle5: Not installed
2024-09-27 15:28:25,607:INFO:         cloudpickle: 3.0.0
2024-09-27 15:28:25,608:INFO:         deprecation: 2.1.0
2024-09-27 15:28:25,608:INFO:              xxhash: 3.5.0
2024-09-27 15:28:25,608:INFO:           wurlitzer: Not installed
2024-09-27 15:28:25,608:INFO:PyCaret optional dependencies:
2024-09-27 15:28:25,622:INFO:                shap: 0.46.0
2024-09-27 15:28:25,622:INFO:           interpret: Not installed
2024-09-27 15:28:25,622:INFO:                umap: Not installed
2024-09-27 15:28:25,622:INFO:     ydata_profiling: Not installed
2024-09-27 15:28:25,622:INFO:  explainerdashboard: Not installed
2024-09-27 15:28:25,622:INFO:             autoviz: Not installed
2024-09-27 15:28:25,622:INFO:           fairlearn: Not installed
2024-09-27 15:28:25,622:INFO:          deepchecks: Not installed
2024-09-27 15:28:25,622:INFO:             xgboost: Not installed
2024-09-27 15:28:25,622:INFO:            catboost: Not installed
2024-09-27 15:28:25,622:INFO:              kmodes: Not installed
2024-09-27 15:28:25,622:INFO:             mlxtend: Not installed
2024-09-27 15:28:25,622:INFO:       statsforecast: Not installed
2024-09-27 15:28:25,622:INFO:        tune_sklearn: Not installed
2024-09-27 15:28:25,622:INFO:                 ray: Not installed
2024-09-27 15:28:25,623:INFO:            hyperopt: Not installed
2024-09-27 15:28:25,623:INFO:              optuna: Not installed
2024-09-27 15:28:25,623:INFO:               skopt: Not installed
2024-09-27 15:28:25,623:INFO:              mlflow: Not installed
2024-09-27 15:28:25,623:INFO:              gradio: Not installed
2024-09-27 15:28:25,623:INFO:             fastapi: Not installed
2024-09-27 15:28:25,623:INFO:             uvicorn: Not installed
2024-09-27 15:28:25,623:INFO:              m2cgen: Not installed
2024-09-27 15:28:25,623:INFO:           evidently: Not installed
2024-09-27 15:28:25,623:INFO:               fugue: Not installed
2024-09-27 15:28:25,623:INFO:           streamlit: Not installed
2024-09-27 15:28:25,623:INFO:             prophet: Not installed
2024-09-27 15:28:25,623:INFO:None
2024-09-27 15:28:25,623:INFO:Set up data.
2024-09-27 15:28:25,630:INFO:Set up folding strategy.
2024-09-27 15:28:25,630:INFO:Set up train/test split.
2024-09-27 15:28:25,642:INFO:Set up index.
2024-09-27 15:28:25,643:INFO:Assigning column types.
2024-09-27 15:28:25,647:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-27 15:28:25,697:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:28:25,701:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:25,742:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:25,743:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:25,793:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:28:25,794:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:25,825:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:25,825:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:25,826:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-27 15:28:25,876:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:25,907:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:25,908:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:25,959:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:25,990:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:25,990:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:25,991:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-27 15:28:26,076:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:26,076:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:26,158:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:26,159:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:26,171:INFO:Preparing preprocessing pipeline...
2024-09-27 15:28:26,172:INFO:Set up label encoding.
2024-09-27 15:28:26,172:INFO:Set up simple imputation.
2024-09-27 15:28:26,244:INFO:Set up encoding of ordinal features.
2024-09-27 15:28:26,246:INFO:Set up encoding of categorical features.
2024-09-27 15:28:26,319:INFO:Finished creating preprocessing pipeline.
2024-09-27 15:28:26,343:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                    transformer=OrdinalEncoder(cols=['education',
                                                                     'self_employed'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'education',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-09-27 15:28:26,343:INFO:Creating final display dataframe.
2024-09-27 15:28:26,537:INFO:Setup _display_container:                     Description                       Value
0                    Session id                        1432
1                        Target                 loan_status
2                   Target type                      Binary
3                Target mapping   Approved: 0,  Rejected: 1
4           Original data shape                  (4269, 12)
5        Transformed data shape                  (4269, 12)
6   Transformed train set shape                  (2988, 12)
7    Transformed test set shape                  (1281, 12)
8              Numeric features                           9
9          Categorical features                           2
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16               Fold Generator             StratifiedKFold
17                  Fold Number                          10
18                     CPU Jobs                          -1
19                      Use GPU                       False
20               Log Experiment                       False
21              Experiment Name            clf-default-name
22                          USI                        5b33
2024-09-27 15:28:26,626:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:26,626:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:26,708:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:26,709:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:26,710:INFO:setup() successfully completed in 1.14s...............
2024-09-27 15:28:26,710:INFO:Initializing compare_models()
2024-09-27 15:28:26,710:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-09-27 15:28:26,710:INFO:Checking exceptions
2024-09-27 15:28:26,714:INFO:Preparing display monitor
2024-09-27 15:28:26,738:INFO:Initializing Logistic Regression
2024-09-27 15:28:26,738:INFO:Total runtime is 8.328755696614583e-06 minutes
2024-09-27 15:28:26,742:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:26,743:INFO:Initializing create_model()
2024-09-27 15:28:26,743:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:26,743:INFO:Checking exceptions
2024-09-27 15:28:26,744:INFO:Importing libraries
2024-09-27 15:28:26,744:INFO:Copying training dataset
2024-09-27 15:28:26,749:INFO:Defining folds
2024-09-27 15:28:26,749:INFO:Declaring metric variables
2024-09-27 15:28:26,753:INFO:Importing untrained model
2024-09-27 15:28:26,757:INFO:Logistic Regression Imported successfully
2024-09-27 15:28:26,765:INFO:Starting cross validation
2024-09-27 15:28:26,766:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:30,375:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,382:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,388:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,422:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,428:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,434:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,452:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,456:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,458:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,462:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,463:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,465:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,467:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,469:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,471:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,474:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,477:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,480:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,481:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,481:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,487:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,488:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,489:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,493:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,493:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,494:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,498:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,499:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,502:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,515:INFO:Calculating mean and std
2024-09-27 15:28:30,517:INFO:Creating metrics dataframe
2024-09-27 15:28:30,520:INFO:Uploading results into container
2024-09-27 15:28:30,521:INFO:Uploading model into container now
2024-09-27 15:28:30,522:INFO:_master_model_container: 1
2024-09-27 15:28:30,522:INFO:_display_container: 2
2024-09-27 15:28:30,523:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1432, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:28:30,523:INFO:create_model() successfully completed......................................
2024-09-27 15:28:30,607:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:30,607:INFO:Creating metrics dataframe
2024-09-27 15:28:30,613:INFO:Initializing K Neighbors Classifier
2024-09-27 15:28:30,613:INFO:Total runtime is 0.064593509833018 minutes
2024-09-27 15:28:30,616:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:30,617:INFO:Initializing create_model()
2024-09-27 15:28:30,617:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:30,617:INFO:Checking exceptions
2024-09-27 15:28:30,617:INFO:Importing libraries
2024-09-27 15:28:30,617:INFO:Copying training dataset
2024-09-27 15:28:30,622:INFO:Defining folds
2024-09-27 15:28:30,623:INFO:Declaring metric variables
2024-09-27 15:28:30,626:INFO:Importing untrained model
2024-09-27 15:28:30,630:INFO:K Neighbors Classifier Imported successfully
2024-09-27 15:28:30,636:INFO:Starting cross validation
2024-09-27 15:28:30,637:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:30,831:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,832:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,832:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,837:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,838:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,839:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,843:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,846:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,846:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,848:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,854:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:30,859:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,189:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,193:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,198:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,204:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,205:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,206:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,209:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,211:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,213:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,214:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,215:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,217:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,235:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,235:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,240:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,240:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,244:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,246:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,258:INFO:Calculating mean and std
2024-09-27 15:28:33,260:INFO:Creating metrics dataframe
2024-09-27 15:28:33,262:INFO:Uploading results into container
2024-09-27 15:28:33,263:INFO:Uploading model into container now
2024-09-27 15:28:33,264:INFO:_master_model_container: 2
2024-09-27 15:28:33,264:INFO:_display_container: 2
2024-09-27 15:28:33,264:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-27 15:28:33,264:INFO:create_model() successfully completed......................................
2024-09-27 15:28:33,341:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:33,341:INFO:Creating metrics dataframe
2024-09-27 15:28:33,348:INFO:Initializing Naive Bayes
2024-09-27 15:28:33,349:INFO:Total runtime is 0.11018857161204021 minutes
2024-09-27 15:28:33,352:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:33,352:INFO:Initializing create_model()
2024-09-27 15:28:33,352:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:33,353:INFO:Checking exceptions
2024-09-27 15:28:33,353:INFO:Importing libraries
2024-09-27 15:28:33,353:INFO:Copying training dataset
2024-09-27 15:28:33,358:INFO:Defining folds
2024-09-27 15:28:33,358:INFO:Declaring metric variables
2024-09-27 15:28:33,361:INFO:Importing untrained model
2024-09-27 15:28:33,364:INFO:Naive Bayes Imported successfully
2024-09-27 15:28:33,372:INFO:Starting cross validation
2024-09-27 15:28:33,374:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:33,467:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,469:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,470:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,473:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,473:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,474:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,475:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,477:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,478:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,478:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,479:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,479:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,480:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,481:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,481:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,482:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,484:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,484:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,486:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,486:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,487:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,489:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,489:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,490:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,491:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,494:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,495:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,496:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,498:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,500:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,506:INFO:Calculating mean and std
2024-09-27 15:28:33,507:INFO:Creating metrics dataframe
2024-09-27 15:28:33,509:INFO:Uploading results into container
2024-09-27 15:28:33,510:INFO:Uploading model into container now
2024-09-27 15:28:33,510:INFO:_master_model_container: 3
2024-09-27 15:28:33,510:INFO:_display_container: 2
2024-09-27 15:28:33,511:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-27 15:28:33,511:INFO:create_model() successfully completed......................................
2024-09-27 15:28:33,586:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:33,586:INFO:Creating metrics dataframe
2024-09-27 15:28:33,594:INFO:Initializing Decision Tree Classifier
2024-09-27 15:28:33,594:INFO:Total runtime is 0.1142802635828654 minutes
2024-09-27 15:28:33,597:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:33,598:INFO:Initializing create_model()
2024-09-27 15:28:33,598:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:33,598:INFO:Checking exceptions
2024-09-27 15:28:33,598:INFO:Importing libraries
2024-09-27 15:28:33,598:INFO:Copying training dataset
2024-09-27 15:28:33,603:INFO:Defining folds
2024-09-27 15:28:33,603:INFO:Declaring metric variables
2024-09-27 15:28:33,606:INFO:Importing untrained model
2024-09-27 15:28:33,609:INFO:Decision Tree Classifier Imported successfully
2024-09-27 15:28:33,617:INFO:Starting cross validation
2024-09-27 15:28:33,618:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:33,721:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,721:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,724:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,724:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,725:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,726:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,726:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,726:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,727:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,728:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,728:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,730:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,730:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,730:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,731:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,731:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,732:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,732:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,732:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,734:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,734:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,735:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,735:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,736:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,736:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,736:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,739:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,740:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,742:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,748:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,769:INFO:Calculating mean and std
2024-09-27 15:28:33,770:INFO:Creating metrics dataframe
2024-09-27 15:28:33,772:INFO:Uploading results into container
2024-09-27 15:28:33,773:INFO:Uploading model into container now
2024-09-27 15:28:33,773:INFO:_master_model_container: 4
2024-09-27 15:28:33,773:INFO:_display_container: 2
2024-09-27 15:28:33,774:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=1432, splitter='best')
2024-09-27 15:28:33,774:INFO:create_model() successfully completed......................................
2024-09-27 15:28:33,845:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:33,845:INFO:Creating metrics dataframe
2024-09-27 15:28:33,853:INFO:Initializing SVM - Linear Kernel
2024-09-27 15:28:33,853:INFO:Total runtime is 0.1185975472132365 minutes
2024-09-27 15:28:33,856:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:33,856:INFO:Initializing create_model()
2024-09-27 15:28:33,857:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:33,857:INFO:Checking exceptions
2024-09-27 15:28:33,857:INFO:Importing libraries
2024-09-27 15:28:33,857:INFO:Copying training dataset
2024-09-27 15:28:33,862:INFO:Defining folds
2024-09-27 15:28:33,862:INFO:Declaring metric variables
2024-09-27 15:28:33,865:INFO:Importing untrained model
2024-09-27 15:28:33,869:INFO:SVM - Linear Kernel Imported successfully
2024-09-27 15:28:33,875:INFO:Starting cross validation
2024-09-27 15:28:33,876:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:33,980:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,986:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,991:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,993:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,994:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,999:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:33,999:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,000:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,001:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,003:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:34,003:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,004:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,004:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,004:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,006:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:34,006:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,006:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:34,007:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,008:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,008:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,010:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,010:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,011:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,015:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,015:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,017:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,017:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:34,019:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,019:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,019:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:34,021:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:34,022:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,023:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,033:INFO:Calculating mean and std
2024-09-27 15:28:34,034:INFO:Creating metrics dataframe
2024-09-27 15:28:34,036:INFO:Uploading results into container
2024-09-27 15:28:34,036:INFO:Uploading model into container now
2024-09-27 15:28:34,037:INFO:_master_model_container: 5
2024-09-27 15:28:34,037:INFO:_display_container: 2
2024-09-27 15:28:34,037:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=1432, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-27 15:28:34,037:INFO:create_model() successfully completed......................................
2024-09-27 15:28:34,108:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:34,109:INFO:Creating metrics dataframe
2024-09-27 15:28:34,116:INFO:Initializing Ridge Classifier
2024-09-27 15:28:34,116:INFO:Total runtime is 0.12297407388687134 minutes
2024-09-27 15:28:34,119:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:34,120:INFO:Initializing create_model()
2024-09-27 15:28:34,120:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:34,120:INFO:Checking exceptions
2024-09-27 15:28:34,120:INFO:Importing libraries
2024-09-27 15:28:34,120:INFO:Copying training dataset
2024-09-27 15:28:34,125:INFO:Defining folds
2024-09-27 15:28:34,125:INFO:Declaring metric variables
2024-09-27 15:28:34,128:INFO:Importing untrained model
2024-09-27 15:28:34,131:INFO:Ridge Classifier Imported successfully
2024-09-27 15:28:34,137:INFO:Starting cross validation
2024-09-27 15:28:34,138:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:34,234:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,234:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,237:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,237:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,238:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,238:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,238:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,240:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,241:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,241:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,241:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,242:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,243:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,244:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,245:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,245:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,247:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,247:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,247:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,247:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,249:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,249:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,249:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,251:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,253:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,255:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,255:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,255:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,259:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,260:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,281:INFO:Calculating mean and std
2024-09-27 15:28:34,283:INFO:Creating metrics dataframe
2024-09-27 15:28:34,284:INFO:Uploading results into container
2024-09-27 15:28:34,285:INFO:Uploading model into container now
2024-09-27 15:28:34,285:INFO:_master_model_container: 6
2024-09-27 15:28:34,285:INFO:_display_container: 2
2024-09-27 15:28:34,286:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=1432, solver='auto',
                tol=0.0001)
2024-09-27 15:28:34,286:INFO:create_model() successfully completed......................................
2024-09-27 15:28:34,356:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:34,356:INFO:Creating metrics dataframe
2024-09-27 15:28:34,364:INFO:Initializing Random Forest Classifier
2024-09-27 15:28:34,365:INFO:Total runtime is 0.1271157701810201 minutes
2024-09-27 15:28:34,368:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:34,368:INFO:Initializing create_model()
2024-09-27 15:28:34,368:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:34,368:INFO:Checking exceptions
2024-09-27 15:28:34,368:INFO:Importing libraries
2024-09-27 15:28:34,368:INFO:Copying training dataset
2024-09-27 15:28:34,373:INFO:Defining folds
2024-09-27 15:28:34,373:INFO:Declaring metric variables
2024-09-27 15:28:34,376:INFO:Importing untrained model
2024-09-27 15:28:34,380:INFO:Random Forest Classifier Imported successfully
2024-09-27 15:28:34,386:INFO:Starting cross validation
2024-09-27 15:28:34,387:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:34,862:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,862:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,862:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,866:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,867:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,868:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,870:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,871:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,872:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,877:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,877:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,878:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,878:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,878:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,878:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,882:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,882:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,883:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,883:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,883:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,884:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,886:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,887:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,888:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,888:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,889:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,889:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,890:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:34,901:INFO:Calculating mean and std
2024-09-27 15:28:34,903:INFO:Creating metrics dataframe
2024-09-27 15:28:34,905:INFO:Uploading results into container
2024-09-27 15:28:34,905:INFO:Uploading model into container now
2024-09-27 15:28:34,905:INFO:_master_model_container: 7
2024-09-27 15:28:34,905:INFO:_display_container: 2
2024-09-27 15:28:34,906:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1432, verbose=0,
                       warm_start=False)
2024-09-27 15:28:34,906:INFO:create_model() successfully completed......................................
2024-09-27 15:28:34,976:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:34,976:INFO:Creating metrics dataframe
2024-09-27 15:28:34,985:INFO:Initializing Quadratic Discriminant Analysis
2024-09-27 15:28:34,985:INFO:Total runtime is 0.13744885126749676 minutes
2024-09-27 15:28:34,988:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:34,989:INFO:Initializing create_model()
2024-09-27 15:28:34,989:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:34,989:INFO:Checking exceptions
2024-09-27 15:28:34,989:INFO:Importing libraries
2024-09-27 15:28:34,989:INFO:Copying training dataset
2024-09-27 15:28:34,994:INFO:Defining folds
2024-09-27 15:28:34,994:INFO:Declaring metric variables
2024-09-27 15:28:34,997:INFO:Importing untrained model
2024-09-27 15:28:35,001:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-27 15:28:35,007:INFO:Starting cross validation
2024-09-27 15:28:35,008:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:35,105:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,107:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,109:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,111:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,112:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,112:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,113:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,113:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,115:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,115:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,116:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,117:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,117:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,118:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,118:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,119:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,119:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,119:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,120:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,122:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,122:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,123:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,123:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,124:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,124:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,124:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,128:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,128:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,128:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,132:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,149:INFO:Calculating mean and std
2024-09-27 15:28:35,151:INFO:Creating metrics dataframe
2024-09-27 15:28:35,153:INFO:Uploading results into container
2024-09-27 15:28:35,153:INFO:Uploading model into container now
2024-09-27 15:28:35,153:INFO:_master_model_container: 8
2024-09-27 15:28:35,153:INFO:_display_container: 2
2024-09-27 15:28:35,154:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-27 15:28:35,154:INFO:create_model() successfully completed......................................
2024-09-27 15:28:35,223:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:35,223:INFO:Creating metrics dataframe
2024-09-27 15:28:35,232:INFO:Initializing Ada Boost Classifier
2024-09-27 15:28:35,232:INFO:Total runtime is 0.14157677094141644 minutes
2024-09-27 15:28:35,235:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:35,236:INFO:Initializing create_model()
2024-09-27 15:28:35,236:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:35,236:INFO:Checking exceptions
2024-09-27 15:28:35,236:INFO:Importing libraries
2024-09-27 15:28:35,236:INFO:Copying training dataset
2024-09-27 15:28:35,241:INFO:Defining folds
2024-09-27 15:28:35,241:INFO:Declaring metric variables
2024-09-27 15:28:35,244:INFO:Importing untrained model
2024-09-27 15:28:35,247:INFO:Ada Boost Classifier Imported successfully
2024-09-27 15:28:35,253:INFO:Starting cross validation
2024-09-27 15:28:35,254:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:35,318:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-27 15:28:35,320:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-27 15:28:35,322:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-27 15:28:35,324:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-27 15:28:35,325:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-27 15:28:35,325:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-27 15:28:35,328:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-27 15:28:35,331:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-27 15:28:35,332:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-27 15:28:35,338:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-27 15:28:35,549:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,556:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,557:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,558:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,563:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,563:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,564:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,565:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,568:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,568:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,569:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,569:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,572:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,572:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,573:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,573:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,574:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,575:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,577:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,578:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,579:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,579:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,580:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,581:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,583:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,586:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,586:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,590:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,594:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:35,614:INFO:Calculating mean and std
2024-09-27 15:28:35,616:INFO:Creating metrics dataframe
2024-09-27 15:28:35,617:INFO:Uploading results into container
2024-09-27 15:28:35,618:INFO:Uploading model into container now
2024-09-27 15:28:35,618:INFO:_master_model_container: 9
2024-09-27 15:28:35,618:INFO:_display_container: 2
2024-09-27 15:28:35,619:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=1432)
2024-09-27 15:28:35,619:INFO:create_model() successfully completed......................................
2024-09-27 15:28:35,688:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:35,689:INFO:Creating metrics dataframe
2024-09-27 15:28:35,698:INFO:Initializing Gradient Boosting Classifier
2024-09-27 15:28:35,698:INFO:Total runtime is 0.1493350942929586 minutes
2024-09-27 15:28:35,701:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:35,701:INFO:Initializing create_model()
2024-09-27 15:28:35,701:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:35,702:INFO:Checking exceptions
2024-09-27 15:28:35,702:INFO:Importing libraries
2024-09-27 15:28:35,702:INFO:Copying training dataset
2024-09-27 15:28:35,706:INFO:Defining folds
2024-09-27 15:28:35,706:INFO:Declaring metric variables
2024-09-27 15:28:35,710:INFO:Importing untrained model
2024-09-27 15:28:35,713:INFO:Gradient Boosting Classifier Imported successfully
2024-09-27 15:28:35,719:INFO:Starting cross validation
2024-09-27 15:28:35,721:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:36,314:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,318:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,318:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,319:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,320:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,321:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,322:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,322:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,323:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,324:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,324:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,325:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,325:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,326:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,326:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,327:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,328:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,328:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,329:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,331:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,332:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,334:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,334:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,334:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,336:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,338:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,339:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,341:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,343:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,358:INFO:Calculating mean and std
2024-09-27 15:28:36,359:INFO:Creating metrics dataframe
2024-09-27 15:28:36,361:INFO:Uploading results into container
2024-09-27 15:28:36,361:INFO:Uploading model into container now
2024-09-27 15:28:36,362:INFO:_master_model_container: 10
2024-09-27 15:28:36,362:INFO:_display_container: 2
2024-09-27 15:28:36,362:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=1432, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-27 15:28:36,363:INFO:create_model() successfully completed......................................
2024-09-27 15:28:36,432:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:36,432:INFO:Creating metrics dataframe
2024-09-27 15:28:36,442:INFO:Initializing Linear Discriminant Analysis
2024-09-27 15:28:36,442:INFO:Total runtime is 0.16173808177312218 minutes
2024-09-27 15:28:36,445:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:36,445:INFO:Initializing create_model()
2024-09-27 15:28:36,445:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:36,446:INFO:Checking exceptions
2024-09-27 15:28:36,446:INFO:Importing libraries
2024-09-27 15:28:36,446:INFO:Copying training dataset
2024-09-27 15:28:36,451:INFO:Defining folds
2024-09-27 15:28:36,451:INFO:Declaring metric variables
2024-09-27 15:28:36,454:INFO:Importing untrained model
2024-09-27 15:28:36,457:INFO:Linear Discriminant Analysis Imported successfully
2024-09-27 15:28:36,463:INFO:Starting cross validation
2024-09-27 15:28:36,464:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:36,566:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,568:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,569:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,569:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,570:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,571:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,574:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,574:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,575:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,576:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,576:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,576:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,577:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,578:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,579:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,579:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,580:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,580:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,582:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,583:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,584:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,584:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,585:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,586:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,588:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,589:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,590:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,593:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,594:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,598:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:36,606:INFO:Calculating mean and std
2024-09-27 15:28:36,607:INFO:Creating metrics dataframe
2024-09-27 15:28:36,609:INFO:Uploading results into container
2024-09-27 15:28:36,610:INFO:Uploading model into container now
2024-09-27 15:28:36,610:INFO:_master_model_container: 11
2024-09-27 15:28:36,610:INFO:_display_container: 2
2024-09-27 15:28:36,611:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-27 15:28:36,611:INFO:create_model() successfully completed......................................
2024-09-27 15:28:36,681:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:36,681:INFO:Creating metrics dataframe
2024-09-27 15:28:36,691:INFO:Initializing Extra Trees Classifier
2024-09-27 15:28:36,691:INFO:Total runtime is 0.16589643557866418 minutes
2024-09-27 15:28:36,694:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:36,695:INFO:Initializing create_model()
2024-09-27 15:28:36,695:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:36,695:INFO:Checking exceptions
2024-09-27 15:28:36,695:INFO:Importing libraries
2024-09-27 15:28:36,695:INFO:Copying training dataset
2024-09-27 15:28:36,700:INFO:Defining folds
2024-09-27 15:28:36,700:INFO:Declaring metric variables
2024-09-27 15:28:36,703:INFO:Importing untrained model
2024-09-27 15:28:36,706:INFO:Extra Trees Classifier Imported successfully
2024-09-27 15:28:36,713:INFO:Starting cross validation
2024-09-27 15:28:36,714:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:37,109:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,113:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,117:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,124:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,124:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,124:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,125:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,125:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,129:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,130:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,130:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,131:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,131:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,131:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,135:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,136:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,136:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,136:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,137:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,138:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,140:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,144:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,148:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,185:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,185:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,188:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,189:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,192:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,192:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,210:INFO:Calculating mean and std
2024-09-27 15:28:37,212:INFO:Creating metrics dataframe
2024-09-27 15:28:37,213:INFO:Uploading results into container
2024-09-27 15:28:37,214:INFO:Uploading model into container now
2024-09-27 15:28:37,214:INFO:_master_model_container: 12
2024-09-27 15:28:37,214:INFO:_display_container: 2
2024-09-27 15:28:37,215:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1432, verbose=0,
                     warm_start=False)
2024-09-27 15:28:37,215:INFO:create_model() successfully completed......................................
2024-09-27 15:28:37,286:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:37,286:INFO:Creating metrics dataframe
2024-09-27 15:28:37,296:INFO:Initializing Light Gradient Boosting Machine
2024-09-27 15:28:37,297:INFO:Total runtime is 0.17598810195922857 minutes
2024-09-27 15:28:37,300:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:37,300:INFO:Initializing create_model()
2024-09-27 15:28:37,300:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:37,301:INFO:Checking exceptions
2024-09-27 15:28:37,301:INFO:Importing libraries
2024-09-27 15:28:37,301:INFO:Copying training dataset
2024-09-27 15:28:37,306:INFO:Defining folds
2024-09-27 15:28:37,306:INFO:Declaring metric variables
2024-09-27 15:28:37,310:INFO:Importing untrained model
2024-09-27 15:28:37,313:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-27 15:28:37,321:INFO:Starting cross validation
2024-09-27 15:28:37,322:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:37,950:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,953:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,956:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,956:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,958:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,961:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,962:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,964:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,967:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,977:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,982:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:37,987:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,056:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,062:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,066:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,068:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,072:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,074:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,078:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,080:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,086:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,100:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,106:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,111:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,132:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,137:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,139:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,142:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,144:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,150:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,171:INFO:Calculating mean and std
2024-09-27 15:28:38,172:INFO:Creating metrics dataframe
2024-09-27 15:28:38,175:INFO:Uploading results into container
2024-09-27 15:28:38,176:INFO:Uploading model into container now
2024-09-27 15:28:38,176:INFO:_master_model_container: 13
2024-09-27 15:28:38,176:INFO:_display_container: 2
2024-09-27 15:28:38,177:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1432, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-27 15:28:38,177:INFO:create_model() successfully completed......................................
2024-09-27 15:28:38,260:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:38,260:INFO:Creating metrics dataframe
2024-09-27 15:28:38,271:INFO:Initializing Dummy Classifier
2024-09-27 15:28:38,271:INFO:Total runtime is 0.19222793579101569 minutes
2024-09-27 15:28:38,275:INFO:SubProcess create_model() called ==================================
2024-09-27 15:28:38,275:INFO:Initializing create_model()
2024-09-27 15:28:38,275:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DB8B11C4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:38,276:INFO:Checking exceptions
2024-09-27 15:28:38,276:INFO:Importing libraries
2024-09-27 15:28:38,276:INFO:Copying training dataset
2024-09-27 15:28:38,281:INFO:Defining folds
2024-09-27 15:28:38,281:INFO:Declaring metric variables
2024-09-27 15:28:38,284:INFO:Importing untrained model
2024-09-27 15:28:38,287:INFO:Dummy Classifier Imported successfully
2024-09-27 15:28:38,295:INFO:Starting cross validation
2024-09-27 15:28:38,296:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:38,382:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,385:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,386:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,388:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:38,389:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,389:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,391:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,392:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:38,393:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,393:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,395:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,395:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,396:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,397:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:38,399:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,399:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,399:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,399:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,399:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,399:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,400:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,401:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:38,401:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:38,402:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:38,403:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,404:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,404:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,404:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,405:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,405:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,405:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,405:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:38,406:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:38,408:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,408:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,408:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:38,411:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,411:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,415:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-27 15:28:38,418:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:38,434:INFO:Calculating mean and std
2024-09-27 15:28:38,435:INFO:Creating metrics dataframe
2024-09-27 15:28:38,437:INFO:Uploading results into container
2024-09-27 15:28:38,438:INFO:Uploading model into container now
2024-09-27 15:28:38,438:INFO:_master_model_container: 14
2024-09-27 15:28:38,438:INFO:_display_container: 2
2024-09-27 15:28:38,438:INFO:DummyClassifier(constant=None, random_state=1432, strategy='prior')
2024-09-27 15:28:38,438:INFO:create_model() successfully completed......................................
2024-09-27 15:28:38,508:INFO:SubProcess create_model() end ==================================
2024-09-27 15:28:38,508:INFO:Creating metrics dataframe
2024-09-27 15:28:38,529:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-09-27 15:28:38,537:INFO:Initializing create_model()
2024-09-27 15:28:38,537:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1432, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:38,538:INFO:Checking exceptions
2024-09-27 15:28:38,539:INFO:Importing libraries
2024-09-27 15:28:38,539:INFO:Copying training dataset
2024-09-27 15:28:38,544:INFO:Defining folds
2024-09-27 15:28:38,544:INFO:Declaring metric variables
2024-09-27 15:28:38,544:INFO:Importing untrained model
2024-09-27 15:28:38,544:INFO:Declaring custom model
2024-09-27 15:28:38,545:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-27 15:28:38,547:INFO:Cross validation set to False
2024-09-27 15:28:38,547:INFO:Fitting Model
2024-09-27 15:28:38,584:INFO:[LightGBM] [Info] Number of positive: 1129, number of negative: 1859
2024-09-27 15:28:38,585:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000322 seconds.
2024-09-27 15:28:38,585:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-09-27 15:28:38,585:INFO:[LightGBM] [Info] Total Bins 1430
2024-09-27 15:28:38,585:INFO:[LightGBM] [Info] Number of data points in the train set: 2988, number of used features: 11
2024-09-27 15:28:38,585:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377845 -> initscore=-0.498706
2024-09-27 15:28:38,585:INFO:[LightGBM] [Info] Start training from score -0.498706
2024-09-27 15:28:38,586:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,586:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,587:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,587:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,589:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,590:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,590:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,591:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,592:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,592:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,594:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,595:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,596:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,598:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,598:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,599:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,602:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,662:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1432, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-27 15:28:38,662:INFO:create_model() successfully completed......................................
2024-09-27 15:28:38,773:INFO:_master_model_container: 14
2024-09-27 15:28:38,773:INFO:_display_container: 2
2024-09-27 15:28:38,773:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1432, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-27 15:28:38,774:INFO:compare_models() successfully completed......................................
2024-09-27 15:28:38,774:INFO:Initializing finalize_model()
2024-09-27 15:28:38,774:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1432, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-27 15:28:38,775:INFO:Finalizing LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1432, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-27 15:28:38,778:INFO:Initializing create_model()
2024-09-27 15:28:38,778:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1432, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:38,778:INFO:Checking exceptions
2024-09-27 15:28:38,780:INFO:Importing libraries
2024-09-27 15:28:38,780:INFO:Copying training dataset
2024-09-27 15:28:38,780:INFO:Defining folds
2024-09-27 15:28:38,780:INFO:Declaring metric variables
2024-09-27 15:28:38,780:INFO:Importing untrained model
2024-09-27 15:28:38,780:INFO:Declaring custom model
2024-09-27 15:28:38,781:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-27 15:28:38,782:INFO:Cross validation set to False
2024-09-27 15:28:38,782:INFO:Fitting Model
2024-09-27 15:28:38,815:INFO:[LightGBM] [Info] Number of positive: 1613, number of negative: 2656
2024-09-27 15:28:38,815:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000253 seconds.
2024-09-27 15:28:38,815:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-09-27 15:28:38,815:INFO:[LightGBM] [Info] Total Bins 1454
2024-09-27 15:28:38,815:INFO:[LightGBM] [Info] Number of data points in the train set: 4269, number of used features: 11
2024-09-27 15:28:38,815:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377840 -> initscore=-0.498725
2024-09-27 15:28:38,816:INFO:[LightGBM] [Info] Start training from score -0.498725
2024-09-27 15:28:38,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,817:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-09-27 15:28:38,921:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=1432, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-09-27 15:28:38,921:INFO:create_model() successfully completed......................................
2024-09-27 15:28:39,001:INFO:_master_model_container: 14
2024-09-27 15:28:39,001:INFO:_display_container: 2
2024-09-27 15:28:39,025:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=1432, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-09-27 15:28:39,025:INFO:finalize_model() successfully completed......................................
2024-09-27 15:28:39,118:INFO:Initializing evaluate_model()
2024-09-27 15:28:39,118:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=1432, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-09-27 15:28:39,164:INFO:Initializing plot_model()
2024-09-27 15:28:39,164:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None,
                                random_state=1432, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC7827FA0>, system=True)
2024-09-27 15:28:39,164:INFO:Checking exceptions
2024-09-27 15:28:39,166:INFO:Preloading libraries
2024-09-27 15:28:39,170:INFO:Copying training dataset
2024-09-27 15:28:39,170:INFO:Plot type: pipeline
2024-09-27 15:28:39,370:INFO:Visual Rendered Successfully
2024-09-27 15:28:39,441:INFO:plot_model() successfully completed......................................
2024-09-27 15:28:39,489:INFO:PyCaret ClassificationExperiment
2024-09-27 15:28:39,489:INFO:Logging name: clf-default-name
2024-09-27 15:28:39,489:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-27 15:28:39,489:INFO:version 3.3.2
2024-09-27 15:28:39,489:INFO:Initializing setup()
2024-09-27 15:28:39,489:INFO:self.USI: b253
2024-09-27 15:28:39,489:INFO:self._variable_keys: {'USI', 'X_train', '_ml_usecase', 'y_test', 'idx', 'y_train', '_available_plots', 'fix_imbalance', 'html_param', 'memory', 'gpu_param', 'seed', 'target_param', 'logging_param', 'fold_groups_param', 'fold_generator', 'gpu_n_jobs_param', 'n_jobs_param', 'y', 'log_plots_param', 'fold_shuffle_param', 'exp_id', 'X_test', 'is_multiclass', 'exp_name_log', 'pipeline', 'data', 'X'}
2024-09-27 15:28:39,489:INFO:Checking environment
2024-09-27 15:28:39,490:INFO:python_version: 3.10.15
2024-09-27 15:28:39,490:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-27 15:28:39,490:INFO:machine: AMD64
2024-09-27 15:28:39,490:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-27 15:28:39,494:INFO:Memory: svmem(total=137338810368, available=124028243968, percent=9.7, used=13310566400, free=124028243968)
2024-09-27 15:28:39,494:INFO:Physical Core: 8
2024-09-27 15:28:39,494:INFO:Logical Core: 16
2024-09-27 15:28:39,494:INFO:Checking libraries
2024-09-27 15:28:39,494:INFO:System:
2024-09-27 15:28:39,494:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-27 15:28:39,494:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-27 15:28:39,494:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-27 15:28:39,494:INFO:PyCaret required dependencies:
2024-09-27 15:28:39,495:INFO:                 pip: 24.2
2024-09-27 15:28:39,495:INFO:          setuptools: 75.1.0
2024-09-27 15:28:39,495:INFO:             pycaret: 3.3.2
2024-09-27 15:28:39,495:INFO:             IPython: 8.27.0
2024-09-27 15:28:39,495:INFO:          ipywidgets: 8.1.5
2024-09-27 15:28:39,495:INFO:                tqdm: 4.66.5
2024-09-27 15:28:39,495:INFO:               numpy: 1.26.4
2024-09-27 15:28:39,495:INFO:              pandas: 2.1.4
2024-09-27 15:28:39,495:INFO:              jinja2: 3.1.4
2024-09-27 15:28:39,495:INFO:               scipy: 1.11.4
2024-09-27 15:28:39,495:INFO:              joblib: 1.3.2
2024-09-27 15:28:39,495:INFO:             sklearn: 1.4.2
2024-09-27 15:28:39,495:INFO:                pyod: 2.0.2
2024-09-27 15:28:39,495:INFO:            imblearn: 0.12.3
2024-09-27 15:28:39,495:INFO:   category_encoders: 2.6.3
2024-09-27 15:28:39,495:INFO:            lightgbm: 4.5.0
2024-09-27 15:28:39,495:INFO:               numba: 0.60.0
2024-09-27 15:28:39,495:INFO:            requests: 2.32.3
2024-09-27 15:28:39,495:INFO:          matplotlib: 3.7.5
2024-09-27 15:28:39,495:INFO:          scikitplot: 0.3.7
2024-09-27 15:28:39,495:INFO:         yellowbrick: 1.5
2024-09-27 15:28:39,495:INFO:              plotly: 5.24.1
2024-09-27 15:28:39,495:INFO:    plotly-resampler: Not installed
2024-09-27 15:28:39,496:INFO:             kaleido: 0.2.1
2024-09-27 15:28:39,496:INFO:           schemdraw: 0.15
2024-09-27 15:28:39,496:INFO:         statsmodels: 0.14.3
2024-09-27 15:28:39,496:INFO:              sktime: 0.26.0
2024-09-27 15:28:39,496:INFO:               tbats: 1.1.3
2024-09-27 15:28:39,496:INFO:            pmdarima: 2.0.4
2024-09-27 15:28:39,496:INFO:              psutil: 6.0.0
2024-09-27 15:28:39,496:INFO:          markupsafe: 2.1.5
2024-09-27 15:28:39,496:INFO:             pickle5: Not installed
2024-09-27 15:28:39,496:INFO:         cloudpickle: 3.0.0
2024-09-27 15:28:39,496:INFO:         deprecation: 2.1.0
2024-09-27 15:28:39,496:INFO:              xxhash: 3.5.0
2024-09-27 15:28:39,496:INFO:           wurlitzer: Not installed
2024-09-27 15:28:39,496:INFO:PyCaret optional dependencies:
2024-09-27 15:28:39,496:INFO:                shap: 0.46.0
2024-09-27 15:28:39,496:INFO:           interpret: Not installed
2024-09-27 15:28:39,496:INFO:                umap: Not installed
2024-09-27 15:28:39,496:INFO:     ydata_profiling: Not installed
2024-09-27 15:28:39,496:INFO:  explainerdashboard: Not installed
2024-09-27 15:28:39,496:INFO:             autoviz: Not installed
2024-09-27 15:28:39,496:INFO:           fairlearn: Not installed
2024-09-27 15:28:39,496:INFO:          deepchecks: Not installed
2024-09-27 15:28:39,497:INFO:             xgboost: Not installed
2024-09-27 15:28:39,497:INFO:            catboost: Not installed
2024-09-27 15:28:39,497:INFO:              kmodes: Not installed
2024-09-27 15:28:39,497:INFO:             mlxtend: Not installed
2024-09-27 15:28:39,497:INFO:       statsforecast: Not installed
2024-09-27 15:28:39,497:INFO:        tune_sklearn: Not installed
2024-09-27 15:28:39,497:INFO:                 ray: Not installed
2024-09-27 15:28:39,497:INFO:            hyperopt: Not installed
2024-09-27 15:28:39,497:INFO:              optuna: Not installed
2024-09-27 15:28:39,497:INFO:               skopt: Not installed
2024-09-27 15:28:39,497:INFO:              mlflow: Not installed
2024-09-27 15:28:39,497:INFO:              gradio: Not installed
2024-09-27 15:28:39,497:INFO:             fastapi: Not installed
2024-09-27 15:28:39,497:INFO:             uvicorn: Not installed
2024-09-27 15:28:39,497:INFO:              m2cgen: Not installed
2024-09-27 15:28:39,497:INFO:           evidently: Not installed
2024-09-27 15:28:39,497:INFO:               fugue: Not installed
2024-09-27 15:28:39,498:INFO:           streamlit: Not installed
2024-09-27 15:28:39,498:INFO:             prophet: Not installed
2024-09-27 15:28:39,498:INFO:None
2024-09-27 15:28:39,498:INFO:Set up data.
2024-09-27 15:28:39,504:INFO:Set up folding strategy.
2024-09-27 15:28:39,504:INFO:Set up train/test split.
2024-09-27 15:28:39,511:INFO:Set up index.
2024-09-27 15:28:39,511:INFO:Assigning column types.
2024-09-27 15:28:39,514:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-27 15:28:39,565:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:28:39,566:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:39,598:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:39,598:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:39,650:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:28:39,651:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:39,682:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:39,682:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:39,682:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-27 15:28:39,733:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:39,764:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:39,764:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:39,815:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:39,846:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:39,847:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:39,847:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-27 15:28:39,929:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:39,929:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:40,011:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:40,011:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:40,012:INFO:Preparing preprocessing pipeline...
2024-09-27 15:28:40,013:INFO:Set up label encoding.
2024-09-27 15:28:40,013:INFO:Set up simple imputation.
2024-09-27 15:28:40,016:INFO:Set up encoding of ordinal features.
2024-09-27 15:28:40,018:INFO:Set up encoding of categorical features.
2024-09-27 15:28:40,018:INFO:Set up imbalanced handling.
2024-09-27 15:28:40,089:INFO:Finished creating preprocessing pipeline.
2024-09-27 15:28:40,114:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-27 15:28:40,114:INFO:Creating final display dataframe.
2024-09-27 15:28:40,351:INFO:Setup _display_container:                     Description                       Value
0                    Session id                        4354
1                        Target                 loan_status
2                   Target type                      Binary
3                Target mapping   Approved: 0,  Rejected: 1
4           Original data shape                  (4269, 12)
5        Transformed data shape                  (4999, 12)
6   Transformed train set shape                  (3718, 12)
7    Transformed test set shape                  (1281, 12)
8              Numeric features                           9
9          Categorical features                           2
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16                Fix imbalance                        True
17         Fix imbalance method                       SMOTE
18               Fold Generator             StratifiedKFold
19                  Fold Number                          10
20                     CPU Jobs                          -1
21                      Use GPU                       False
22               Log Experiment                       False
23              Experiment Name            clf-default-name
24                          USI                        b253
2024-09-27 15:28:40,439:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:40,439:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:40,521:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:40,522:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:40,523:INFO:setup() successfully completed in 1.03s...............
2024-09-27 15:28:40,523:INFO:Initializing create_model()
2024-09-27 15:28:40,523:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC76B7B50>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:40,523:INFO:Checking exceptions
2024-09-27 15:28:40,537:INFO:Importing libraries
2024-09-27 15:28:40,537:INFO:Copying training dataset
2024-09-27 15:28:40,542:INFO:Defining folds
2024-09-27 15:28:40,542:INFO:Declaring metric variables
2024-09-27 15:28:40,545:INFO:Importing untrained model
2024-09-27 15:28:40,549:INFO:Logistic Regression Imported successfully
2024-09-27 15:28:40,555:INFO:Starting cross validation
2024-09-27 15:28:40,557:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:40,717:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,717:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,718:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,720:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,722:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,723:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,723:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,723:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,725:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,726:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,726:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,727:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,728:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,729:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,729:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,729:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,729:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,731:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,731:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,732:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,735:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,735:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,736:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,737:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,739:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,739:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,743:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,747:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,750:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,754:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:40,775:INFO:Calculating mean and std
2024-09-27 15:28:40,776:INFO:Creating metrics dataframe
2024-09-27 15:28:40,781:INFO:Finalizing model
2024-09-27 15:28:40,909:INFO:Uploading results into container
2024-09-27 15:28:40,909:INFO:Uploading model into container now
2024-09-27 15:28:40,919:INFO:_master_model_container: 1
2024-09-27 15:28:40,919:INFO:_display_container: 2
2024-09-27 15:28:40,920:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4354, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:28:40,920:INFO:create_model() successfully completed......................................
2024-09-27 15:28:40,996:INFO:Initializing finalize_model()
2024-09-27 15:28:40,996:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC76B7B50>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4354, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-27 15:28:40,997:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4354, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:28:41,000:INFO:Initializing create_model()
2024-09-27 15:28:41,000:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC76B7B50>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4354, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:41,000:INFO:Checking exceptions
2024-09-27 15:28:41,001:INFO:Importing libraries
2024-09-27 15:28:41,001:INFO:Copying training dataset
2024-09-27 15:28:41,002:INFO:Defining folds
2024-09-27 15:28:41,002:INFO:Declaring metric variables
2024-09-27 15:28:41,002:INFO:Importing untrained model
2024-09-27 15:28:41,002:INFO:Declaring custom model
2024-09-27 15:28:41,003:INFO:Logistic Regression Imported successfully
2024-09-27 15:28:41,004:INFO:Cross validation set to False
2024-09-27 15:28:41,004:INFO:Fitting Model
2024-09-27 15:28:41,167:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=4354,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:28:41,167:INFO:create_model() successfully completed......................................
2024-09-27 15:28:41,242:INFO:_master_model_container: 1
2024-09-27 15:28:41,242:INFO:_display_container: 2
2024-09-27 15:28:41,271:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=4354,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:28:41,271:INFO:finalize_model() successfully completed......................................
2024-09-27 15:28:41,374:INFO:Initializing evaluate_model()
2024-09-27 15:28:41,374:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC76B7B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=4354,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-09-27 15:28:41,411:INFO:Initializing plot_model()
2024-09-27 15:28:41,411:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=4354,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC76B7B50>, system=True)
2024-09-27 15:28:41,411:INFO:Checking exceptions
2024-09-27 15:28:41,415:INFO:Preloading libraries
2024-09-27 15:28:41,415:INFO:Copying training dataset
2024-09-27 15:28:41,415:INFO:Plot type: pipeline
2024-09-27 15:28:41,559:INFO:Visual Rendered Successfully
2024-09-27 15:28:41,637:INFO:plot_model() successfully completed......................................
2024-09-27 15:28:41,668:INFO:Initializing predict_model()
2024-09-27 15:28:41,668:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBC76B7B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=4354,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DB8B15B2E0>)
2024-09-27 15:28:41,668:INFO:Checking exceptions
2024-09-27 15:28:41,668:INFO:Preloading libraries
2024-09-27 15:28:41,787:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:41,796:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:41,804:WARNING:c:\Users\Woomy\anaconda3\envs\incidencias\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to ' Rejected') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-27 15:28:41,954:INFO:Initializing save_model()
2024-09-27 15:28:41,954:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=4354,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value'...
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  Graduate        0
 Not Graduate    1
NaN             -1
dtype: int64},
                                                                        {'col': 'self_employed',
                                                                         'data_type': dtype('O'),
                                                                         'mapping':  No     0
 Yes    1
NaN    -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-27 15:28:41,954:INFO:Adding model into prep_pipe
2024-09-27 15:28:41,954:WARNING:Only Model saved as it was a pipeline.
2024-09-27 15:28:41,961:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-27 15:28:41,988:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_asset...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=None,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=4354,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:28:41,988:INFO:save_model() successfully completed......................................
2024-09-27 15:28:42,812:INFO:PyCaret ClassificationExperiment
2024-09-27 15:28:42,812:INFO:Logging name: clf-default-name
2024-09-27 15:28:42,812:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-27 15:28:42,812:INFO:version 3.3.2
2024-09-27 15:28:42,812:INFO:Initializing setup()
2024-09-27 15:28:42,812:INFO:self.USI: a503
2024-09-27 15:28:42,812:INFO:self._variable_keys: {'USI', 'X_train', '_ml_usecase', 'y_test', 'idx', 'y_train', '_available_plots', 'fix_imbalance', 'html_param', 'memory', 'gpu_param', 'seed', 'target_param', 'logging_param', 'fold_groups_param', 'fold_generator', 'gpu_n_jobs_param', 'n_jobs_param', 'y', 'log_plots_param', 'fold_shuffle_param', 'exp_id', 'X_test', 'is_multiclass', 'exp_name_log', 'pipeline', 'data', 'X'}
2024-09-27 15:28:42,812:INFO:Checking environment
2024-09-27 15:28:42,812:INFO:python_version: 3.10.15
2024-09-27 15:28:42,812:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-27 15:28:42,812:INFO:machine: AMD64
2024-09-27 15:28:42,812:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-27 15:28:42,816:INFO:Memory: svmem(total=137338810368, available=124006952960, percent=9.7, used=13331857408, free=124006952960)
2024-09-27 15:28:42,816:INFO:Physical Core: 8
2024-09-27 15:28:42,816:INFO:Logical Core: 16
2024-09-27 15:28:42,816:INFO:Checking libraries
2024-09-27 15:28:42,816:INFO:System:
2024-09-27 15:28:42,816:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-27 15:28:42,817:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-27 15:28:42,817:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-27 15:28:42,817:INFO:PyCaret required dependencies:
2024-09-27 15:28:42,817:INFO:                 pip: 24.2
2024-09-27 15:28:42,817:INFO:          setuptools: 75.1.0
2024-09-27 15:28:42,817:INFO:             pycaret: 3.3.2
2024-09-27 15:28:42,817:INFO:             IPython: 8.27.0
2024-09-27 15:28:42,817:INFO:          ipywidgets: 8.1.5
2024-09-27 15:28:42,817:INFO:                tqdm: 4.66.5
2024-09-27 15:28:42,817:INFO:               numpy: 1.26.4
2024-09-27 15:28:42,817:INFO:              pandas: 2.1.4
2024-09-27 15:28:42,817:INFO:              jinja2: 3.1.4
2024-09-27 15:28:42,817:INFO:               scipy: 1.11.4
2024-09-27 15:28:42,817:INFO:              joblib: 1.3.2
2024-09-27 15:28:42,817:INFO:             sklearn: 1.4.2
2024-09-27 15:28:42,817:INFO:                pyod: 2.0.2
2024-09-27 15:28:42,817:INFO:            imblearn: 0.12.3
2024-09-27 15:28:42,817:INFO:   category_encoders: 2.6.3
2024-09-27 15:28:42,817:INFO:            lightgbm: 4.5.0
2024-09-27 15:28:42,817:INFO:               numba: 0.60.0
2024-09-27 15:28:42,817:INFO:            requests: 2.32.3
2024-09-27 15:28:42,818:INFO:          matplotlib: 3.7.5
2024-09-27 15:28:42,818:INFO:          scikitplot: 0.3.7
2024-09-27 15:28:42,818:INFO:         yellowbrick: 1.5
2024-09-27 15:28:42,818:INFO:              plotly: 5.24.1
2024-09-27 15:28:42,818:INFO:    plotly-resampler: Not installed
2024-09-27 15:28:42,818:INFO:             kaleido: 0.2.1
2024-09-27 15:28:42,818:INFO:           schemdraw: 0.15
2024-09-27 15:28:42,818:INFO:         statsmodels: 0.14.3
2024-09-27 15:28:42,818:INFO:              sktime: 0.26.0
2024-09-27 15:28:42,818:INFO:               tbats: 1.1.3
2024-09-27 15:28:42,818:INFO:            pmdarima: 2.0.4
2024-09-27 15:28:42,818:INFO:              psutil: 6.0.0
2024-09-27 15:28:42,818:INFO:          markupsafe: 2.1.5
2024-09-27 15:28:42,818:INFO:             pickle5: Not installed
2024-09-27 15:28:42,818:INFO:         cloudpickle: 3.0.0
2024-09-27 15:28:42,818:INFO:         deprecation: 2.1.0
2024-09-27 15:28:42,818:INFO:              xxhash: 3.5.0
2024-09-27 15:28:42,818:INFO:           wurlitzer: Not installed
2024-09-27 15:28:42,818:INFO:PyCaret optional dependencies:
2024-09-27 15:28:42,818:INFO:                shap: 0.46.0
2024-09-27 15:28:42,818:INFO:           interpret: Not installed
2024-09-27 15:28:42,818:INFO:                umap: Not installed
2024-09-27 15:28:42,819:INFO:     ydata_profiling: Not installed
2024-09-27 15:28:42,819:INFO:  explainerdashboard: Not installed
2024-09-27 15:28:42,819:INFO:             autoviz: Not installed
2024-09-27 15:28:42,819:INFO:           fairlearn: Not installed
2024-09-27 15:28:42,819:INFO:          deepchecks: Not installed
2024-09-27 15:28:42,819:INFO:             xgboost: Not installed
2024-09-27 15:28:42,819:INFO:            catboost: Not installed
2024-09-27 15:28:42,819:INFO:              kmodes: Not installed
2024-09-27 15:28:42,819:INFO:             mlxtend: Not installed
2024-09-27 15:28:42,819:INFO:       statsforecast: Not installed
2024-09-27 15:28:42,819:INFO:        tune_sklearn: Not installed
2024-09-27 15:28:42,819:INFO:                 ray: Not installed
2024-09-27 15:28:42,819:INFO:            hyperopt: Not installed
2024-09-27 15:28:42,819:INFO:              optuna: Not installed
2024-09-27 15:28:42,819:INFO:               skopt: Not installed
2024-09-27 15:28:42,819:INFO:              mlflow: Not installed
2024-09-27 15:28:42,820:INFO:              gradio: Not installed
2024-09-27 15:28:42,820:INFO:             fastapi: Not installed
2024-09-27 15:28:42,820:INFO:             uvicorn: Not installed
2024-09-27 15:28:42,820:INFO:              m2cgen: Not installed
2024-09-27 15:28:42,820:INFO:           evidently: Not installed
2024-09-27 15:28:42,820:INFO:               fugue: Not installed
2024-09-27 15:28:42,820:INFO:           streamlit: Not installed
2024-09-27 15:28:42,820:INFO:             prophet: Not installed
2024-09-27 15:28:42,820:INFO:None
2024-09-27 15:28:42,820:INFO:Set up data.
2024-09-27 15:28:42,825:INFO:Set up folding strategy.
2024-09-27 15:28:42,825:INFO:Set up train/test split.
2024-09-27 15:28:42,831:INFO:Set up index.
2024-09-27 15:28:42,831:INFO:Assigning column types.
2024-09-27 15:28:42,835:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-27 15:28:42,888:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:28:42,889:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:42,921:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:42,922:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:42,973:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:28:42,974:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:43,006:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,006:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,007:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-27 15:28:43,058:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:43,091:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,091:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,143:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:43,175:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,175:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,176:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-27 15:28:43,266:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,266:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,353:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,354:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,355:INFO:Preparing preprocessing pipeline...
2024-09-27 15:28:43,356:INFO:Set up simple imputation.
2024-09-27 15:28:43,356:INFO:Set up imbalanced handling.
2024-09-27 15:28:43,385:INFO:Finished creating preprocessing pipeline.
2024-09-27 15:28:43,392:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-27 15:28:43,392:INFO:Creating final display dataframe.
2024-09-27 15:28:43,518:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              a503
2024-09-27 15:28:43,607:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,607:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,691:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,691:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:43,692:INFO:setup() successfully completed in 0.88s...............
2024-09-27 15:28:43,692:INFO:Initializing create_model()
2024-09-27 15:28:43,692:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB8AEA1CF0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:43,693:INFO:Checking exceptions
2024-09-27 15:28:43,706:INFO:Importing libraries
2024-09-27 15:28:43,706:INFO:Copying training dataset
2024-09-27 15:28:43,712:INFO:Defining folds
2024-09-27 15:28:43,712:INFO:Declaring metric variables
2024-09-27 15:28:43,715:INFO:Importing untrained model
2024-09-27 15:28:43,718:INFO:Logistic Regression Imported successfully
2024-09-27 15:28:43,725:INFO:Starting cross validation
2024-09-27 15:28:43,727:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:43,875:INFO:Calculating mean and std
2024-09-27 15:28:43,876:INFO:Creating metrics dataframe
2024-09-27 15:28:43,880:INFO:Finalizing model
2024-09-27 15:28:43,974:INFO:Uploading results into container
2024-09-27 15:28:43,975:INFO:Uploading model into container now
2024-09-27 15:28:43,985:INFO:_master_model_container: 1
2024-09-27 15:28:43,986:INFO:_display_container: 2
2024-09-27 15:28:43,986:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:28:43,986:INFO:create_model() successfully completed......................................
2024-09-27 15:28:44,075:INFO:Initializing finalize_model()
2024-09-27 15:28:44,075:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB8AEA1CF0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-27 15:28:44,075:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:28:44,079:INFO:Initializing create_model()
2024-09-27 15:28:44,079:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB8AEA1CF0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:44,079:INFO:Checking exceptions
2024-09-27 15:28:44,080:INFO:Importing libraries
2024-09-27 15:28:44,080:INFO:Copying training dataset
2024-09-27 15:28:44,081:INFO:Defining folds
2024-09-27 15:28:44,081:INFO:Declaring metric variables
2024-09-27 15:28:44,081:INFO:Importing untrained model
2024-09-27 15:28:44,081:INFO:Declaring custom model
2024-09-27 15:28:44,082:INFO:Logistic Regression Imported successfully
2024-09-27 15:28:44,083:INFO:Cross validation set to False
2024-09-27 15:28:44,083:INFO:Fitting Model
2024-09-27 15:28:44,193:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:28:44,193:INFO:create_model() successfully completed......................................
2024-09-27 15:28:44,280:INFO:_master_model_container: 1
2024-09-27 15:28:44,280:INFO:_display_container: 2
2024-09-27 15:28:44,288:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:28:44,288:INFO:finalize_model() successfully completed......................................
2024-09-27 15:28:44,382:INFO:Initializing predict_model()
2024-09-27 15:28:44,382:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB8AEA1CF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DB8B0EA200>)
2024-09-27 15:28:44,382:INFO:Checking exceptions
2024-09-27 15:28:44,382:INFO:Preloading libraries
2024-09-27 15:28:44,384:INFO:Set up data.
2024-09-27 15:28:44,389:INFO:Set up index.
2024-09-27 15:28:44,519:INFO:Initializing save_model()
2024-09-27 15:28:44,519:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-27 15:28:44,520:INFO:Adding model into prep_pipe
2024-09-27 15:28:44,520:WARNING:Only Model saved as it was a pipeline.
2024-09-27 15:28:44,524:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-27 15:28:44,532:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:28:44,533:INFO:save_model() successfully completed......................................
2024-09-27 15:28:49,962:INFO:PyCaret ClassificationExperiment
2024-09-27 15:28:49,963:INFO:Logging name: clf-default-name
2024-09-27 15:28:49,963:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-27 15:28:49,963:INFO:version 3.3.2
2024-09-27 15:28:49,963:INFO:Initializing setup()
2024-09-27 15:28:49,963:INFO:self.USI: c183
2024-09-27 15:28:49,963:INFO:self._variable_keys: {'USI', 'X_train', '_ml_usecase', 'y_test', 'idx', 'y_train', '_available_plots', 'fix_imbalance', 'html_param', 'memory', 'gpu_param', 'seed', 'target_param', 'logging_param', 'fold_groups_param', 'fold_generator', 'gpu_n_jobs_param', 'n_jobs_param', 'y', 'log_plots_param', 'fold_shuffle_param', 'exp_id', 'X_test', 'is_multiclass', 'exp_name_log', 'pipeline', 'data', 'X'}
2024-09-27 15:28:49,963:INFO:Checking environment
2024-09-27 15:28:49,963:INFO:python_version: 3.10.15
2024-09-27 15:28:49,963:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-27 15:28:49,963:INFO:machine: AMD64
2024-09-27 15:28:49,963:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-27 15:28:49,967:INFO:Memory: svmem(total=137338810368, available=123979968512, percent=9.7, used=13358841856, free=123979968512)
2024-09-27 15:28:49,968:INFO:Physical Core: 8
2024-09-27 15:28:49,968:INFO:Logical Core: 16
2024-09-27 15:28:49,968:INFO:Checking libraries
2024-09-27 15:28:49,968:INFO:System:
2024-09-27 15:28:49,968:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-27 15:28:49,968:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-27 15:28:49,968:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-27 15:28:49,968:INFO:PyCaret required dependencies:
2024-09-27 15:28:49,968:INFO:                 pip: 24.2
2024-09-27 15:28:49,968:INFO:          setuptools: 75.1.0
2024-09-27 15:28:49,968:INFO:             pycaret: 3.3.2
2024-09-27 15:28:49,968:INFO:             IPython: 8.27.0
2024-09-27 15:28:49,968:INFO:          ipywidgets: 8.1.5
2024-09-27 15:28:49,968:INFO:                tqdm: 4.66.5
2024-09-27 15:28:49,968:INFO:               numpy: 1.26.4
2024-09-27 15:28:49,968:INFO:              pandas: 2.1.4
2024-09-27 15:28:49,968:INFO:              jinja2: 3.1.4
2024-09-27 15:28:49,968:INFO:               scipy: 1.11.4
2024-09-27 15:28:49,968:INFO:              joblib: 1.3.2
2024-09-27 15:28:49,968:INFO:             sklearn: 1.4.2
2024-09-27 15:28:49,968:INFO:                pyod: 2.0.2
2024-09-27 15:28:49,969:INFO:            imblearn: 0.12.3
2024-09-27 15:28:49,969:INFO:   category_encoders: 2.6.3
2024-09-27 15:28:49,969:INFO:            lightgbm: 4.5.0
2024-09-27 15:28:49,969:INFO:               numba: 0.60.0
2024-09-27 15:28:49,969:INFO:            requests: 2.32.3
2024-09-27 15:28:49,969:INFO:          matplotlib: 3.7.5
2024-09-27 15:28:49,969:INFO:          scikitplot: 0.3.7
2024-09-27 15:28:49,969:INFO:         yellowbrick: 1.5
2024-09-27 15:28:49,969:INFO:              plotly: 5.24.1
2024-09-27 15:28:49,969:INFO:    plotly-resampler: Not installed
2024-09-27 15:28:49,969:INFO:             kaleido: 0.2.1
2024-09-27 15:28:49,969:INFO:           schemdraw: 0.15
2024-09-27 15:28:49,969:INFO:         statsmodels: 0.14.3
2024-09-27 15:28:49,969:INFO:              sktime: 0.26.0
2024-09-27 15:28:49,969:INFO:               tbats: 1.1.3
2024-09-27 15:28:49,969:INFO:            pmdarima: 2.0.4
2024-09-27 15:28:49,969:INFO:              psutil: 6.0.0
2024-09-27 15:28:49,969:INFO:          markupsafe: 2.1.5
2024-09-27 15:28:49,969:INFO:             pickle5: Not installed
2024-09-27 15:28:49,969:INFO:         cloudpickle: 3.0.0
2024-09-27 15:28:49,969:INFO:         deprecation: 2.1.0
2024-09-27 15:28:49,969:INFO:              xxhash: 3.5.0
2024-09-27 15:28:49,969:INFO:           wurlitzer: Not installed
2024-09-27 15:28:49,970:INFO:PyCaret optional dependencies:
2024-09-27 15:28:49,970:INFO:                shap: 0.46.0
2024-09-27 15:28:49,970:INFO:           interpret: Not installed
2024-09-27 15:28:49,970:INFO:                umap: Not installed
2024-09-27 15:28:49,970:INFO:     ydata_profiling: Not installed
2024-09-27 15:28:49,970:INFO:  explainerdashboard: Not installed
2024-09-27 15:28:49,970:INFO:             autoviz: Not installed
2024-09-27 15:28:49,970:INFO:           fairlearn: Not installed
2024-09-27 15:28:49,970:INFO:          deepchecks: Not installed
2024-09-27 15:28:49,970:INFO:             xgboost: Not installed
2024-09-27 15:28:49,970:INFO:            catboost: Not installed
2024-09-27 15:28:49,970:INFO:              kmodes: Not installed
2024-09-27 15:28:49,970:INFO:             mlxtend: Not installed
2024-09-27 15:28:49,970:INFO:       statsforecast: Not installed
2024-09-27 15:28:49,970:INFO:        tune_sklearn: Not installed
2024-09-27 15:28:49,970:INFO:                 ray: Not installed
2024-09-27 15:28:49,970:INFO:            hyperopt: Not installed
2024-09-27 15:28:49,970:INFO:              optuna: Not installed
2024-09-27 15:28:49,970:INFO:               skopt: Not installed
2024-09-27 15:28:49,970:INFO:              mlflow: Not installed
2024-09-27 15:28:49,970:INFO:              gradio: Not installed
2024-09-27 15:28:49,970:INFO:             fastapi: Not installed
2024-09-27 15:28:49,970:INFO:             uvicorn: Not installed
2024-09-27 15:28:49,970:INFO:              m2cgen: Not installed
2024-09-27 15:28:49,971:INFO:           evidently: Not installed
2024-09-27 15:28:49,971:INFO:               fugue: Not installed
2024-09-27 15:28:49,971:INFO:           streamlit: Not installed
2024-09-27 15:28:49,971:INFO:             prophet: Not installed
2024-09-27 15:28:49,971:INFO:None
2024-09-27 15:28:49,971:INFO:Set up data.
2024-09-27 15:28:49,976:INFO:Set up folding strategy.
2024-09-27 15:28:49,976:INFO:Set up train/test split.
2024-09-27 15:28:49,982:INFO:Set up index.
2024-09-27 15:28:49,982:INFO:Assigning column types.
2024-09-27 15:28:49,986:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-27 15:28:50,046:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:28:50,047:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:50,085:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,085:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,150:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:28:50,151:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:50,190:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,191:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,191:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-27 15:28:50,255:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:50,295:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,295:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,361:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:28:50,400:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,401:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,401:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-27 15:28:50,505:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,506:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,611:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,611:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,612:INFO:Preparing preprocessing pipeline...
2024-09-27 15:28:50,613:INFO:Set up simple imputation.
2024-09-27 15:28:50,613:INFO:Set up imbalanced handling.
2024-09-27 15:28:50,640:INFO:Finished creating preprocessing pipeline.
2024-09-27 15:28:50,646:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-27 15:28:50,647:INFO:Creating final display dataframe.
2024-09-27 15:28:50,763:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              c183
2024-09-27 15:28:50,851:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,851:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,933:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,934:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:28:50,935:INFO:setup() successfully completed in 0.97s...............
2024-09-27 15:28:50,936:INFO:Initializing create_model()
2024-09-27 15:28:50,936:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB91906170>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:50,936:INFO:Checking exceptions
2024-09-27 15:28:50,950:INFO:Importing libraries
2024-09-27 15:28:50,950:INFO:Copying training dataset
2024-09-27 15:28:50,955:INFO:Defining folds
2024-09-27 15:28:50,955:INFO:Declaring metric variables
2024-09-27 15:28:50,958:INFO:Importing untrained model
2024-09-27 15:28:50,961:INFO:Logistic Regression Imported successfully
2024-09-27 15:28:50,968:INFO:Starting cross validation
2024-09-27 15:28:50,969:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:28:51,096:INFO:Calculating mean and std
2024-09-27 15:28:51,097:INFO:Creating metrics dataframe
2024-09-27 15:28:51,102:INFO:Finalizing model
2024-09-27 15:28:51,189:INFO:Uploading results into container
2024-09-27 15:28:51,189:INFO:Uploading model into container now
2024-09-27 15:28:51,201:INFO:_master_model_container: 1
2024-09-27 15:28:51,201:INFO:_display_container: 2
2024-09-27 15:28:51,202:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:28:51,202:INFO:create_model() successfully completed......................................
2024-09-27 15:28:51,304:INFO:Initializing finalize_model()
2024-09-27 15:28:51,304:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB91906170>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-27 15:28:51,305:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:28:51,308:INFO:Initializing create_model()
2024-09-27 15:28:51,308:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB91906170>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:28:51,308:INFO:Checking exceptions
2024-09-27 15:28:51,309:INFO:Importing libraries
2024-09-27 15:28:51,309:INFO:Copying training dataset
2024-09-27 15:28:51,310:INFO:Defining folds
2024-09-27 15:28:51,310:INFO:Declaring metric variables
2024-09-27 15:28:51,310:INFO:Importing untrained model
2024-09-27 15:28:51,310:INFO:Declaring custom model
2024-09-27 15:28:51,311:INFO:Logistic Regression Imported successfully
2024-09-27 15:28:51,312:INFO:Cross validation set to False
2024-09-27 15:28:51,312:INFO:Fitting Model
2024-09-27 15:28:51,417:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:28:51,417:INFO:create_model() successfully completed......................................
2024-09-27 15:28:51,506:INFO:_master_model_container: 1
2024-09-27 15:28:51,506:INFO:_display_container: 2
2024-09-27 15:28:51,514:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:28:51,514:INFO:finalize_model() successfully completed......................................
2024-09-27 15:28:51,611:INFO:Initializing predict_model()
2024-09-27 15:28:51,611:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB91906170>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DB8B428E50>)
2024-09-27 15:28:51,611:INFO:Checking exceptions
2024-09-27 15:28:51,611:INFO:Preloading libraries
2024-09-27 15:28:51,613:INFO:Set up data.
2024-09-27 15:28:51,618:INFO:Set up index.
2024-09-27 15:28:51,752:INFO:Initializing save_model()
2024-09-27 15:28:51,752:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-27 15:28:51,752:INFO:Adding model into prep_pipe
2024-09-27 15:28:51,752:WARNING:Only Model saved as it was a pipeline.
2024-09-27 15:28:51,757:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-27 15:28:51,765:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:28:51,765:INFO:save_model() successfully completed......................................
2024-09-27 15:29:02,920:INFO:PyCaret ClassificationExperiment
2024-09-27 15:29:02,920:INFO:Logging name: clf-default-name
2024-09-27 15:29:02,920:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-27 15:29:02,920:INFO:version 3.3.2
2024-09-27 15:29:02,920:INFO:Initializing setup()
2024-09-27 15:29:02,920:INFO:self.USI: 89bb
2024-09-27 15:29:02,920:INFO:self._variable_keys: {'USI', 'X_train', '_ml_usecase', 'y_test', 'idx', 'y_train', '_available_plots', 'fix_imbalance', 'html_param', 'memory', 'gpu_param', 'seed', 'target_param', 'logging_param', 'fold_groups_param', 'fold_generator', 'gpu_n_jobs_param', 'n_jobs_param', 'y', 'log_plots_param', 'fold_shuffle_param', 'exp_id', 'X_test', 'is_multiclass', 'exp_name_log', 'pipeline', 'data', 'X'}
2024-09-27 15:29:02,920:INFO:Checking environment
2024-09-27 15:29:02,920:INFO:python_version: 3.10.15
2024-09-27 15:29:02,920:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-27 15:29:02,920:INFO:machine: AMD64
2024-09-27 15:29:02,920:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-27 15:29:02,924:INFO:Memory: svmem(total=137338810368, available=123981082624, percent=9.7, used=13357727744, free=123981082624)
2024-09-27 15:29:02,924:INFO:Physical Core: 8
2024-09-27 15:29:02,925:INFO:Logical Core: 16
2024-09-27 15:29:02,925:INFO:Checking libraries
2024-09-27 15:29:02,925:INFO:System:
2024-09-27 15:29:02,925:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-27 15:29:02,925:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-27 15:29:02,925:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-27 15:29:02,925:INFO:PyCaret required dependencies:
2024-09-27 15:29:02,925:INFO:                 pip: 24.2
2024-09-27 15:29:02,925:INFO:          setuptools: 75.1.0
2024-09-27 15:29:02,925:INFO:             pycaret: 3.3.2
2024-09-27 15:29:02,925:INFO:             IPython: 8.27.0
2024-09-27 15:29:02,925:INFO:          ipywidgets: 8.1.5
2024-09-27 15:29:02,925:INFO:                tqdm: 4.66.5
2024-09-27 15:29:02,926:INFO:               numpy: 1.26.4
2024-09-27 15:29:02,926:INFO:              pandas: 2.1.4
2024-09-27 15:29:02,926:INFO:              jinja2: 3.1.4
2024-09-27 15:29:02,926:INFO:               scipy: 1.11.4
2024-09-27 15:29:02,926:INFO:              joblib: 1.3.2
2024-09-27 15:29:02,926:INFO:             sklearn: 1.4.2
2024-09-27 15:29:02,926:INFO:                pyod: 2.0.2
2024-09-27 15:29:02,926:INFO:            imblearn: 0.12.3
2024-09-27 15:29:02,926:INFO:   category_encoders: 2.6.3
2024-09-27 15:29:02,926:INFO:            lightgbm: 4.5.0
2024-09-27 15:29:02,926:INFO:               numba: 0.60.0
2024-09-27 15:29:02,926:INFO:            requests: 2.32.3
2024-09-27 15:29:02,926:INFO:          matplotlib: 3.7.5
2024-09-27 15:29:02,926:INFO:          scikitplot: 0.3.7
2024-09-27 15:29:02,926:INFO:         yellowbrick: 1.5
2024-09-27 15:29:02,926:INFO:              plotly: 5.24.1
2024-09-27 15:29:02,926:INFO:    plotly-resampler: Not installed
2024-09-27 15:29:02,926:INFO:             kaleido: 0.2.1
2024-09-27 15:29:02,927:INFO:           schemdraw: 0.15
2024-09-27 15:29:02,927:INFO:         statsmodels: 0.14.3
2024-09-27 15:29:02,927:INFO:              sktime: 0.26.0
2024-09-27 15:29:02,927:INFO:               tbats: 1.1.3
2024-09-27 15:29:02,927:INFO:            pmdarima: 2.0.4
2024-09-27 15:29:02,927:INFO:              psutil: 6.0.0
2024-09-27 15:29:02,927:INFO:          markupsafe: 2.1.5
2024-09-27 15:29:02,927:INFO:             pickle5: Not installed
2024-09-27 15:29:02,927:INFO:         cloudpickle: 3.0.0
2024-09-27 15:29:02,927:INFO:         deprecation: 2.1.0
2024-09-27 15:29:02,927:INFO:              xxhash: 3.5.0
2024-09-27 15:29:02,927:INFO:           wurlitzer: Not installed
2024-09-27 15:29:02,927:INFO:PyCaret optional dependencies:
2024-09-27 15:29:02,927:INFO:                shap: 0.46.0
2024-09-27 15:29:02,927:INFO:           interpret: Not installed
2024-09-27 15:29:02,927:INFO:                umap: Not installed
2024-09-27 15:29:02,927:INFO:     ydata_profiling: Not installed
2024-09-27 15:29:02,928:INFO:  explainerdashboard: Not installed
2024-09-27 15:29:02,928:INFO:             autoviz: Not installed
2024-09-27 15:29:02,928:INFO:           fairlearn: Not installed
2024-09-27 15:29:02,928:INFO:          deepchecks: Not installed
2024-09-27 15:29:02,928:INFO:             xgboost: Not installed
2024-09-27 15:29:02,928:INFO:            catboost: Not installed
2024-09-27 15:29:02,928:INFO:              kmodes: Not installed
2024-09-27 15:29:02,928:INFO:             mlxtend: Not installed
2024-09-27 15:29:02,928:INFO:       statsforecast: Not installed
2024-09-27 15:29:02,928:INFO:        tune_sklearn: Not installed
2024-09-27 15:29:02,928:INFO:                 ray: Not installed
2024-09-27 15:29:02,928:INFO:            hyperopt: Not installed
2024-09-27 15:29:02,928:INFO:              optuna: Not installed
2024-09-27 15:29:02,928:INFO:               skopt: Not installed
2024-09-27 15:29:02,928:INFO:              mlflow: Not installed
2024-09-27 15:29:02,928:INFO:              gradio: Not installed
2024-09-27 15:29:02,928:INFO:             fastapi: Not installed
2024-09-27 15:29:02,928:INFO:             uvicorn: Not installed
2024-09-27 15:29:02,928:INFO:              m2cgen: Not installed
2024-09-27 15:29:02,928:INFO:           evidently: Not installed
2024-09-27 15:29:02,928:INFO:               fugue: Not installed
2024-09-27 15:29:02,929:INFO:           streamlit: Not installed
2024-09-27 15:29:02,929:INFO:             prophet: Not installed
2024-09-27 15:29:02,929:INFO:None
2024-09-27 15:29:02,929:INFO:Set up data.
2024-09-27 15:29:02,934:INFO:Set up folding strategy.
2024-09-27 15:29:02,934:INFO:Set up train/test split.
2024-09-27 15:29:02,940:INFO:Set up index.
2024-09-27 15:29:02,940:INFO:Assigning column types.
2024-09-27 15:29:02,944:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-27 15:29:02,994:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:29:02,995:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:29:03,027:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,027:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,077:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:29:03,078:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:29:03,111:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,111:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,112:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-27 15:29:03,164:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:29:03,196:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,197:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,250:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:29:03,281:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,281:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,282:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-27 15:29:03,364:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,365:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,449:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,449:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,450:INFO:Preparing preprocessing pipeline...
2024-09-27 15:29:03,451:INFO:Set up simple imputation.
2024-09-27 15:29:03,451:INFO:Set up imbalanced handling.
2024-09-27 15:29:03,479:INFO:Finished creating preprocessing pipeline.
2024-09-27 15:29:03,486:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-27 15:29:03,486:INFO:Creating final display dataframe.
2024-09-27 15:29:03,610:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              89bb
2024-09-27 15:29:03,699:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,699:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,783:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,784:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:29:03,785:INFO:setup() successfully completed in 0.87s...............
2024-09-27 15:29:03,786:INFO:Initializing create_model()
2024-09-27 15:29:03,786:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB91904880>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:29:03,786:INFO:Checking exceptions
2024-09-27 15:29:03,800:INFO:Importing libraries
2024-09-27 15:29:03,800:INFO:Copying training dataset
2024-09-27 15:29:03,805:INFO:Defining folds
2024-09-27 15:29:03,805:INFO:Declaring metric variables
2024-09-27 15:29:03,809:INFO:Importing untrained model
2024-09-27 15:29:03,813:INFO:Logistic Regression Imported successfully
2024-09-27 15:29:03,820:INFO:Starting cross validation
2024-09-27 15:29:03,822:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:29:03,977:INFO:Calculating mean and std
2024-09-27 15:29:03,977:INFO:Creating metrics dataframe
2024-09-27 15:29:03,982:INFO:Finalizing model
2024-09-27 15:29:04,075:INFO:Uploading results into container
2024-09-27 15:29:04,076:INFO:Uploading model into container now
2024-09-27 15:29:04,085:INFO:_master_model_container: 1
2024-09-27 15:29:04,086:INFO:_display_container: 2
2024-09-27 15:29:04,086:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:29:04,086:INFO:create_model() successfully completed......................................
2024-09-27 15:29:04,199:INFO:Initializing finalize_model()
2024-09-27 15:29:04,199:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB91904880>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-27 15:29:04,200:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:29:04,203:INFO:Initializing create_model()
2024-09-27 15:29:04,203:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB91904880>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:29:04,203:INFO:Checking exceptions
2024-09-27 15:29:04,204:INFO:Importing libraries
2024-09-27 15:29:04,205:INFO:Copying training dataset
2024-09-27 15:29:04,205:INFO:Defining folds
2024-09-27 15:29:04,205:INFO:Declaring metric variables
2024-09-27 15:29:04,205:INFO:Importing untrained model
2024-09-27 15:29:04,205:INFO:Declaring custom model
2024-09-27 15:29:04,206:INFO:Logistic Regression Imported successfully
2024-09-27 15:29:04,207:INFO:Cross validation set to False
2024-09-27 15:29:04,207:INFO:Fitting Model
2024-09-27 15:29:04,314:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:29:04,314:INFO:create_model() successfully completed......................................
2024-09-27 15:29:04,401:INFO:_master_model_container: 1
2024-09-27 15:29:04,401:INFO:_display_container: 2
2024-09-27 15:29:04,409:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:29:04,409:INFO:finalize_model() successfully completed......................................
2024-09-27 15:29:04,502:INFO:Initializing predict_model()
2024-09-27 15:29:04,502:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB91904880>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DB914CB250>)
2024-09-27 15:29:04,502:INFO:Checking exceptions
2024-09-27 15:29:04,503:INFO:Preloading libraries
2024-09-27 15:29:04,504:INFO:Set up data.
2024-09-27 15:29:04,509:INFO:Set up index.
2024-09-27 15:29:04,642:INFO:Initializing save_model()
2024-09-27 15:29:04,642:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-27 15:29:04,642:INFO:Adding model into prep_pipe
2024-09-27 15:29:04,642:WARNING:Only Model saved as it was a pipeline.
2024-09-27 15:29:04,647:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-27 15:29:04,655:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:29:04,655:INFO:save_model() successfully completed......................................
2024-09-27 15:33:34,430:INFO:PyCaret ClassificationExperiment
2024-09-27 15:33:34,430:INFO:Logging name: clf-default-name
2024-09-27 15:33:34,430:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-27 15:33:34,430:INFO:version 3.3.2
2024-09-27 15:33:34,430:INFO:Initializing setup()
2024-09-27 15:33:34,430:INFO:self.USI: 5dcc
2024-09-27 15:33:34,430:INFO:self._variable_keys: {'USI', 'X_train', '_ml_usecase', 'y_test', 'idx', 'y_train', '_available_plots', 'fix_imbalance', 'html_param', 'memory', 'gpu_param', 'seed', 'target_param', 'logging_param', 'fold_groups_param', 'fold_generator', 'gpu_n_jobs_param', 'n_jobs_param', 'y', 'log_plots_param', 'fold_shuffle_param', 'exp_id', 'X_test', 'is_multiclass', 'exp_name_log', 'pipeline', 'data', 'X'}
2024-09-27 15:33:34,430:INFO:Checking environment
2024-09-27 15:33:34,430:INFO:python_version: 3.10.15
2024-09-27 15:33:34,430:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-27 15:33:34,430:INFO:machine: AMD64
2024-09-27 15:33:34,430:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-27 15:33:34,434:INFO:Memory: svmem(total=137338810368, available=123855917056, percent=9.8, used=13482893312, free=123855917056)
2024-09-27 15:33:34,434:INFO:Physical Core: 8
2024-09-27 15:33:34,434:INFO:Logical Core: 16
2024-09-27 15:33:34,435:INFO:Checking libraries
2024-09-27 15:33:34,435:INFO:System:
2024-09-27 15:33:34,435:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-27 15:33:34,435:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-27 15:33:34,435:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-27 15:33:34,435:INFO:PyCaret required dependencies:
2024-09-27 15:33:34,435:INFO:                 pip: 24.2
2024-09-27 15:33:34,435:INFO:          setuptools: 75.1.0
2024-09-27 15:33:34,435:INFO:             pycaret: 3.3.2
2024-09-27 15:33:34,435:INFO:             IPython: 8.27.0
2024-09-27 15:33:34,435:INFO:          ipywidgets: 8.1.5
2024-09-27 15:33:34,435:INFO:                tqdm: 4.66.5
2024-09-27 15:33:34,435:INFO:               numpy: 1.26.4
2024-09-27 15:33:34,435:INFO:              pandas: 2.1.4
2024-09-27 15:33:34,435:INFO:              jinja2: 3.1.4
2024-09-27 15:33:34,435:INFO:               scipy: 1.11.4
2024-09-27 15:33:34,435:INFO:              joblib: 1.3.2
2024-09-27 15:33:34,435:INFO:             sklearn: 1.4.2
2024-09-27 15:33:34,435:INFO:                pyod: 2.0.2
2024-09-27 15:33:34,435:INFO:            imblearn: 0.12.3
2024-09-27 15:33:34,436:INFO:   category_encoders: 2.6.3
2024-09-27 15:33:34,436:INFO:            lightgbm: 4.5.0
2024-09-27 15:33:34,436:INFO:               numba: 0.60.0
2024-09-27 15:33:34,436:INFO:            requests: 2.32.3
2024-09-27 15:33:34,436:INFO:          matplotlib: 3.7.5
2024-09-27 15:33:34,436:INFO:          scikitplot: 0.3.7
2024-09-27 15:33:34,436:INFO:         yellowbrick: 1.5
2024-09-27 15:33:34,436:INFO:              plotly: 5.24.1
2024-09-27 15:33:34,436:INFO:    plotly-resampler: Not installed
2024-09-27 15:33:34,436:INFO:             kaleido: 0.2.1
2024-09-27 15:33:34,436:INFO:           schemdraw: 0.15
2024-09-27 15:33:34,436:INFO:         statsmodels: 0.14.3
2024-09-27 15:33:34,436:INFO:              sktime: 0.26.0
2024-09-27 15:33:34,436:INFO:               tbats: 1.1.3
2024-09-27 15:33:34,436:INFO:            pmdarima: 2.0.4
2024-09-27 15:33:34,436:INFO:              psutil: 6.0.0
2024-09-27 15:33:34,436:INFO:          markupsafe: 2.1.5
2024-09-27 15:33:34,436:INFO:             pickle5: Not installed
2024-09-27 15:33:34,436:INFO:         cloudpickle: 3.0.0
2024-09-27 15:33:34,436:INFO:         deprecation: 2.1.0
2024-09-27 15:33:34,436:INFO:              xxhash: 3.5.0
2024-09-27 15:33:34,436:INFO:           wurlitzer: Not installed
2024-09-27 15:33:34,437:INFO:PyCaret optional dependencies:
2024-09-27 15:33:34,437:INFO:                shap: 0.46.0
2024-09-27 15:33:34,437:INFO:           interpret: Not installed
2024-09-27 15:33:34,437:INFO:                umap: Not installed
2024-09-27 15:33:34,437:INFO:     ydata_profiling: Not installed
2024-09-27 15:33:34,437:INFO:  explainerdashboard: Not installed
2024-09-27 15:33:34,437:INFO:             autoviz: Not installed
2024-09-27 15:33:34,437:INFO:           fairlearn: Not installed
2024-09-27 15:33:34,437:INFO:          deepchecks: Not installed
2024-09-27 15:33:34,437:INFO:             xgboost: Not installed
2024-09-27 15:33:34,437:INFO:            catboost: Not installed
2024-09-27 15:33:34,437:INFO:              kmodes: Not installed
2024-09-27 15:33:34,437:INFO:             mlxtend: Not installed
2024-09-27 15:33:34,437:INFO:       statsforecast: Not installed
2024-09-27 15:33:34,437:INFO:        tune_sklearn: Not installed
2024-09-27 15:33:34,437:INFO:                 ray: Not installed
2024-09-27 15:33:34,437:INFO:            hyperopt: Not installed
2024-09-27 15:33:34,437:INFO:              optuna: Not installed
2024-09-27 15:33:34,437:INFO:               skopt: Not installed
2024-09-27 15:33:34,437:INFO:              mlflow: Not installed
2024-09-27 15:33:34,437:INFO:              gradio: Not installed
2024-09-27 15:33:34,437:INFO:             fastapi: Not installed
2024-09-27 15:33:34,437:INFO:             uvicorn: Not installed
2024-09-27 15:33:34,437:INFO:              m2cgen: Not installed
2024-09-27 15:33:34,438:INFO:           evidently: Not installed
2024-09-27 15:33:34,438:INFO:               fugue: Not installed
2024-09-27 15:33:34,438:INFO:           streamlit: Not installed
2024-09-27 15:33:34,438:INFO:             prophet: Not installed
2024-09-27 15:33:34,438:INFO:None
2024-09-27 15:33:34,438:INFO:Set up data.
2024-09-27 15:33:34,443:INFO:Set up folding strategy.
2024-09-27 15:33:34,444:INFO:Set up train/test split.
2024-09-27 15:33:34,449:INFO:Set up index.
2024-09-27 15:33:34,449:INFO:Assigning column types.
2024-09-27 15:33:34,453:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-27 15:33:34,506:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:33:34,507:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:33:34,541:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,542:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,592:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:33:34,593:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:33:34,625:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,625:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,625:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-27 15:33:34,676:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:33:34,708:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,708:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,759:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:33:34,792:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,792:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,792:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-27 15:33:34,874:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,875:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,957:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,957:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:34,958:INFO:Preparing preprocessing pipeline...
2024-09-27 15:33:34,959:INFO:Set up simple imputation.
2024-09-27 15:33:34,959:INFO:Set up imbalanced handling.
2024-09-27 15:33:34,987:INFO:Finished creating preprocessing pipeline.
2024-09-27 15:33:34,993:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-27 15:33:34,993:INFO:Creating final display dataframe.
2024-09-27 15:33:35,114:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              5dcc
2024-09-27 15:33:35,204:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:35,204:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:35,289:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:35,290:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:33:35,291:INFO:setup() successfully completed in 0.86s...............
2024-09-27 15:33:35,292:INFO:Initializing create_model()
2024-09-27 15:33:35,292:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB942173D0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:33:35,292:INFO:Checking exceptions
2024-09-27 15:33:35,306:INFO:Importing libraries
2024-09-27 15:33:35,307:INFO:Copying training dataset
2024-09-27 15:33:35,312:INFO:Defining folds
2024-09-27 15:33:35,312:INFO:Declaring metric variables
2024-09-27 15:33:35,315:INFO:Importing untrained model
2024-09-27 15:33:35,319:INFO:Logistic Regression Imported successfully
2024-09-27 15:33:35,326:INFO:Starting cross validation
2024-09-27 15:33:35,328:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:33:35,479:INFO:Calculating mean and std
2024-09-27 15:33:35,480:INFO:Creating metrics dataframe
2024-09-27 15:33:35,484:INFO:Finalizing model
2024-09-27 15:33:35,577:INFO:Uploading results into container
2024-09-27 15:33:35,578:INFO:Uploading model into container now
2024-09-27 15:33:35,588:INFO:_master_model_container: 1
2024-09-27 15:33:35,588:INFO:_display_container: 2
2024-09-27 15:33:35,588:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:33:35,588:INFO:create_model() successfully completed......................................
2024-09-27 15:33:35,691:INFO:Initializing finalize_model()
2024-09-27 15:33:35,691:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB942173D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-27 15:33:35,691:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:33:35,695:INFO:Initializing create_model()
2024-09-27 15:33:35,695:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB942173D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:33:35,695:INFO:Checking exceptions
2024-09-27 15:33:35,696:INFO:Importing libraries
2024-09-27 15:33:35,696:INFO:Copying training dataset
2024-09-27 15:33:35,697:INFO:Defining folds
2024-09-27 15:33:35,697:INFO:Declaring metric variables
2024-09-27 15:33:35,697:INFO:Importing untrained model
2024-09-27 15:33:35,697:INFO:Declaring custom model
2024-09-27 15:33:35,698:INFO:Logistic Regression Imported successfully
2024-09-27 15:33:35,699:INFO:Cross validation set to False
2024-09-27 15:33:35,699:INFO:Fitting Model
2024-09-27 15:33:35,814:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:33:35,814:INFO:create_model() successfully completed......................................
2024-09-27 15:33:35,909:INFO:_master_model_container: 1
2024-09-27 15:33:35,910:INFO:_display_container: 2
2024-09-27 15:33:35,917:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:33:35,917:INFO:finalize_model() successfully completed......................................
2024-09-27 15:33:36,028:INFO:Initializing save_model()
2024-09-27 15:33:36,028:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-27 15:33:36,028:INFO:Adding model into prep_pipe
2024-09-27 15:33:36,028:WARNING:Only Model saved as it was a pipeline.
2024-09-27 15:33:36,033:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-27 15:33:36,040:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:33:36,040:INFO:save_model() successfully completed......................................
2024-09-27 15:40:40,386:INFO:PyCaret ClassificationExperiment
2024-09-27 15:40:40,386:INFO:Logging name: clf-default-name
2024-09-27 15:40:40,386:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-27 15:40:40,386:INFO:version 3.3.2
2024-09-27 15:40:40,387:INFO:Initializing setup()
2024-09-27 15:40:40,387:INFO:self.USI: 254d
2024-09-27 15:40:40,387:INFO:self._variable_keys: {'USI', 'X_train', '_ml_usecase', 'y_test', 'idx', 'y_train', '_available_plots', 'fix_imbalance', 'html_param', 'memory', 'gpu_param', 'seed', 'target_param', 'logging_param', 'fold_groups_param', 'fold_generator', 'gpu_n_jobs_param', 'n_jobs_param', 'y', 'log_plots_param', 'fold_shuffle_param', 'exp_id', 'X_test', 'is_multiclass', 'exp_name_log', 'pipeline', 'data', 'X'}
2024-09-27 15:40:40,387:INFO:Checking environment
2024-09-27 15:40:40,387:INFO:python_version: 3.10.15
2024-09-27 15:40:40,387:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-27 15:40:40,387:INFO:machine: AMD64
2024-09-27 15:40:40,387:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-27 15:40:40,391:INFO:Memory: svmem(total=137338810368, available=125412626432, percent=8.7, used=11926183936, free=125412626432)
2024-09-27 15:40:40,391:INFO:Physical Core: 8
2024-09-27 15:40:40,391:INFO:Logical Core: 16
2024-09-27 15:40:40,391:INFO:Checking libraries
2024-09-27 15:40:40,391:INFO:System:
2024-09-27 15:40:40,391:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-27 15:40:40,391:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-27 15:40:40,391:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-27 15:40:40,391:INFO:PyCaret required dependencies:
2024-09-27 15:40:40,391:INFO:                 pip: 24.2
2024-09-27 15:40:40,391:INFO:          setuptools: 75.1.0
2024-09-27 15:40:40,391:INFO:             pycaret: 3.3.2
2024-09-27 15:40:40,392:INFO:             IPython: 8.27.0
2024-09-27 15:40:40,392:INFO:          ipywidgets: 8.1.5
2024-09-27 15:40:40,392:INFO:                tqdm: 4.66.5
2024-09-27 15:40:40,392:INFO:               numpy: 1.26.4
2024-09-27 15:40:40,392:INFO:              pandas: 2.1.4
2024-09-27 15:40:40,392:INFO:              jinja2: 3.1.4
2024-09-27 15:40:40,392:INFO:               scipy: 1.11.4
2024-09-27 15:40:40,392:INFO:              joblib: 1.3.2
2024-09-27 15:40:40,392:INFO:             sklearn: 1.4.2
2024-09-27 15:40:40,392:INFO:                pyod: 2.0.2
2024-09-27 15:40:40,392:INFO:            imblearn: 0.12.3
2024-09-27 15:40:40,392:INFO:   category_encoders: 2.6.3
2024-09-27 15:40:40,392:INFO:            lightgbm: 4.5.0
2024-09-27 15:40:40,392:INFO:               numba: 0.60.0
2024-09-27 15:40:40,392:INFO:            requests: 2.32.3
2024-09-27 15:40:40,392:INFO:          matplotlib: 3.7.5
2024-09-27 15:40:40,392:INFO:          scikitplot: 0.3.7
2024-09-27 15:40:40,392:INFO:         yellowbrick: 1.5
2024-09-27 15:40:40,392:INFO:              plotly: 5.24.1
2024-09-27 15:40:40,392:INFO:    plotly-resampler: Not installed
2024-09-27 15:40:40,392:INFO:             kaleido: 0.2.1
2024-09-27 15:40:40,392:INFO:           schemdraw: 0.15
2024-09-27 15:40:40,392:INFO:         statsmodels: 0.14.3
2024-09-27 15:40:40,392:INFO:              sktime: 0.26.0
2024-09-27 15:40:40,392:INFO:               tbats: 1.1.3
2024-09-27 15:40:40,393:INFO:            pmdarima: 2.0.4
2024-09-27 15:40:40,393:INFO:              psutil: 6.0.0
2024-09-27 15:40:40,393:INFO:          markupsafe: 2.1.5
2024-09-27 15:40:40,393:INFO:             pickle5: Not installed
2024-09-27 15:40:40,393:INFO:         cloudpickle: 3.0.0
2024-09-27 15:40:40,393:INFO:         deprecation: 2.1.0
2024-09-27 15:40:40,393:INFO:              xxhash: 3.5.0
2024-09-27 15:40:40,393:INFO:           wurlitzer: Not installed
2024-09-27 15:40:40,393:INFO:PyCaret optional dependencies:
2024-09-27 15:40:40,393:INFO:                shap: 0.46.0
2024-09-27 15:40:40,393:INFO:           interpret: Not installed
2024-09-27 15:40:40,393:INFO:                umap: Not installed
2024-09-27 15:40:40,393:INFO:     ydata_profiling: Not installed
2024-09-27 15:40:40,393:INFO:  explainerdashboard: Not installed
2024-09-27 15:40:40,393:INFO:             autoviz: Not installed
2024-09-27 15:40:40,393:INFO:           fairlearn: Not installed
2024-09-27 15:40:40,393:INFO:          deepchecks: Not installed
2024-09-27 15:40:40,393:INFO:             xgboost: Not installed
2024-09-27 15:40:40,393:INFO:            catboost: Not installed
2024-09-27 15:40:40,393:INFO:              kmodes: Not installed
2024-09-27 15:40:40,393:INFO:             mlxtend: Not installed
2024-09-27 15:40:40,393:INFO:       statsforecast: Not installed
2024-09-27 15:40:40,393:INFO:        tune_sklearn: Not installed
2024-09-27 15:40:40,394:INFO:                 ray: Not installed
2024-09-27 15:40:40,394:INFO:            hyperopt: Not installed
2024-09-27 15:40:40,394:INFO:              optuna: Not installed
2024-09-27 15:40:40,394:INFO:               skopt: Not installed
2024-09-27 15:40:40,394:INFO:              mlflow: Not installed
2024-09-27 15:40:40,394:INFO:              gradio: Not installed
2024-09-27 15:40:40,394:INFO:             fastapi: Not installed
2024-09-27 15:40:40,394:INFO:             uvicorn: Not installed
2024-09-27 15:40:40,394:INFO:              m2cgen: Not installed
2024-09-27 15:40:40,394:INFO:           evidently: Not installed
2024-09-27 15:40:40,394:INFO:               fugue: Not installed
2024-09-27 15:40:40,394:INFO:           streamlit: Not installed
2024-09-27 15:40:40,394:INFO:             prophet: Not installed
2024-09-27 15:40:40,394:INFO:None
2024-09-27 15:40:40,394:INFO:Set up data.
2024-09-27 15:40:40,399:INFO:Set up folding strategy.
2024-09-27 15:40:40,399:INFO:Set up train/test split.
2024-09-27 15:40:40,404:INFO:Set up index.
2024-09-27 15:40:40,404:INFO:Assigning column types.
2024-09-27 15:40:40,408:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-27 15:40:40,458:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:40:40,459:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:40:40,491:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,491:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,543:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:40:40,544:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:40:40,577:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,577:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,578:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-27 15:40:40,629:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:40:40,661:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,662:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,715:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:40:40,747:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,747:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,747:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-27 15:40:40,829:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,830:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,912:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,912:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:40,913:INFO:Preparing preprocessing pipeline...
2024-09-27 15:40:40,914:INFO:Set up simple imputation.
2024-09-27 15:40:40,914:INFO:Set up imbalanced handling.
2024-09-27 15:40:40,943:INFO:Finished creating preprocessing pipeline.
2024-09-27 15:40:40,949:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-27 15:40:40,949:INFO:Creating final display dataframe.
2024-09-27 15:40:41,075:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              254d
2024-09-27 15:40:41,163:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:41,164:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:41,247:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:41,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:40:41,249:INFO:setup() successfully completed in 0.86s...............
2024-09-27 15:40:41,250:INFO:Initializing create_model()
2024-09-27 15:40:41,250:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB913B3430>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:40:41,250:INFO:Checking exceptions
2024-09-27 15:40:41,264:INFO:Importing libraries
2024-09-27 15:40:41,264:INFO:Copying training dataset
2024-09-27 15:40:41,270:INFO:Defining folds
2024-09-27 15:40:41,270:INFO:Declaring metric variables
2024-09-27 15:40:41,273:INFO:Importing untrained model
2024-09-27 15:40:41,277:INFO:Logistic Regression Imported successfully
2024-09-27 15:40:41,284:INFO:Starting cross validation
2024-09-27 15:40:41,286:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:40:41,963:INFO:Calculating mean and std
2024-09-27 15:40:41,963:INFO:Creating metrics dataframe
2024-09-27 15:40:41,968:INFO:Finalizing model
2024-09-27 15:40:42,062:INFO:Uploading results into container
2024-09-27 15:40:42,063:INFO:Uploading model into container now
2024-09-27 15:40:42,074:INFO:_master_model_container: 1
2024-09-27 15:40:42,075:INFO:_display_container: 2
2024-09-27 15:40:42,075:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:40:42,075:INFO:create_model() successfully completed......................................
2024-09-27 15:40:42,205:INFO:Initializing finalize_model()
2024-09-27 15:40:42,205:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB913B3430>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-27 15:40:42,206:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:40:42,209:INFO:Initializing create_model()
2024-09-27 15:40:42,209:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB913B3430>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:40:42,209:INFO:Checking exceptions
2024-09-27 15:40:42,211:INFO:Importing libraries
2024-09-27 15:40:42,211:INFO:Copying training dataset
2024-09-27 15:40:42,211:INFO:Defining folds
2024-09-27 15:40:42,211:INFO:Declaring metric variables
2024-09-27 15:40:42,211:INFO:Importing untrained model
2024-09-27 15:40:42,211:INFO:Declaring custom model
2024-09-27 15:40:42,212:INFO:Logistic Regression Imported successfully
2024-09-27 15:40:42,213:INFO:Cross validation set to False
2024-09-27 15:40:42,213:INFO:Fitting Model
2024-09-27 15:40:42,323:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:40:42,323:INFO:create_model() successfully completed......................................
2024-09-27 15:40:42,438:INFO:_master_model_container: 1
2024-09-27 15:40:42,438:INFO:_display_container: 2
2024-09-27 15:40:42,445:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:40:42,445:INFO:finalize_model() successfully completed......................................
2024-09-27 15:40:42,573:INFO:Initializing save_model()
2024-09-27 15:40:42,573:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-27 15:40:42,574:INFO:Adding model into prep_pipe
2024-09-27 15:40:42,574:WARNING:Only Model saved as it was a pipeline.
2024-09-27 15:40:42,578:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-27 15:40:42,586:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:40:42,586:INFO:save_model() successfully completed......................................
2024-09-27 15:41:50,220:INFO:Initializing predict_model()
2024-09-27 15:41:50,220:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB913B3430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DB93F1C160>)
2024-09-27 15:41:50,220:INFO:Checking exceptions
2024-09-27 15:41:50,221:INFO:Preloading libraries
2024-09-27 15:41:50,223:INFO:Set up data.
2024-09-27 15:41:50,227:INFO:Set up index.
2024-09-27 15:44:00,252:INFO:PyCaret ClassificationExperiment
2024-09-27 15:44:00,252:INFO:Logging name: clf-default-name
2024-09-27 15:44:00,252:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-27 15:44:00,252:INFO:version 3.3.2
2024-09-27 15:44:00,252:INFO:Initializing setup()
2024-09-27 15:44:00,252:INFO:self.USI: de97
2024-09-27 15:44:00,252:INFO:self._variable_keys: {'USI', 'X_train', '_ml_usecase', 'y_test', 'idx', 'y_train', '_available_plots', 'fix_imbalance', 'html_param', 'memory', 'gpu_param', 'seed', 'target_param', 'logging_param', 'fold_groups_param', 'fold_generator', 'gpu_n_jobs_param', 'n_jobs_param', 'y', 'log_plots_param', 'fold_shuffle_param', 'exp_id', 'X_test', 'is_multiclass', 'exp_name_log', 'pipeline', 'data', 'X'}
2024-09-27 15:44:00,252:INFO:Checking environment
2024-09-27 15:44:00,252:INFO:python_version: 3.10.15
2024-09-27 15:44:00,252:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-27 15:44:00,252:INFO:machine: AMD64
2024-09-27 15:44:00,252:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-27 15:44:00,257:INFO:Memory: svmem(total=137338810368, available=125113434112, percent=8.9, used=12225376256, free=125113434112)
2024-09-27 15:44:00,257:INFO:Physical Core: 8
2024-09-27 15:44:00,257:INFO:Logical Core: 16
2024-09-27 15:44:00,257:INFO:Checking libraries
2024-09-27 15:44:00,257:INFO:System:
2024-09-27 15:44:00,257:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-27 15:44:00,257:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-27 15:44:00,258:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-27 15:44:00,258:INFO:PyCaret required dependencies:
2024-09-27 15:44:00,258:INFO:                 pip: 24.2
2024-09-27 15:44:00,258:INFO:          setuptools: 75.1.0
2024-09-27 15:44:00,258:INFO:             pycaret: 3.3.2
2024-09-27 15:44:00,258:INFO:             IPython: 8.27.0
2024-09-27 15:44:00,258:INFO:          ipywidgets: 8.1.5
2024-09-27 15:44:00,258:INFO:                tqdm: 4.66.5
2024-09-27 15:44:00,258:INFO:               numpy: 1.26.4
2024-09-27 15:44:00,258:INFO:              pandas: 2.1.4
2024-09-27 15:44:00,258:INFO:              jinja2: 3.1.4
2024-09-27 15:44:00,258:INFO:               scipy: 1.11.4
2024-09-27 15:44:00,258:INFO:              joblib: 1.3.2
2024-09-27 15:44:00,258:INFO:             sklearn: 1.4.2
2024-09-27 15:44:00,258:INFO:                pyod: 2.0.2
2024-09-27 15:44:00,258:INFO:            imblearn: 0.12.3
2024-09-27 15:44:00,258:INFO:   category_encoders: 2.6.3
2024-09-27 15:44:00,258:INFO:            lightgbm: 4.5.0
2024-09-27 15:44:00,258:INFO:               numba: 0.60.0
2024-09-27 15:44:00,258:INFO:            requests: 2.32.3
2024-09-27 15:44:00,258:INFO:          matplotlib: 3.7.5
2024-09-27 15:44:00,258:INFO:          scikitplot: 0.3.7
2024-09-27 15:44:00,258:INFO:         yellowbrick: 1.5
2024-09-27 15:44:00,259:INFO:              plotly: 5.24.1
2024-09-27 15:44:00,259:INFO:    plotly-resampler: Not installed
2024-09-27 15:44:00,259:INFO:             kaleido: 0.2.1
2024-09-27 15:44:00,259:INFO:           schemdraw: 0.15
2024-09-27 15:44:00,259:INFO:         statsmodels: 0.14.3
2024-09-27 15:44:00,259:INFO:              sktime: 0.26.0
2024-09-27 15:44:00,259:INFO:               tbats: 1.1.3
2024-09-27 15:44:00,259:INFO:            pmdarima: 2.0.4
2024-09-27 15:44:00,259:INFO:              psutil: 6.0.0
2024-09-27 15:44:00,259:INFO:          markupsafe: 2.1.5
2024-09-27 15:44:00,259:INFO:             pickle5: Not installed
2024-09-27 15:44:00,259:INFO:         cloudpickle: 3.0.0
2024-09-27 15:44:00,259:INFO:         deprecation: 2.1.0
2024-09-27 15:44:00,259:INFO:              xxhash: 3.5.0
2024-09-27 15:44:00,259:INFO:           wurlitzer: Not installed
2024-09-27 15:44:00,259:INFO:PyCaret optional dependencies:
2024-09-27 15:44:00,259:INFO:                shap: 0.46.0
2024-09-27 15:44:00,259:INFO:           interpret: Not installed
2024-09-27 15:44:00,259:INFO:                umap: Not installed
2024-09-27 15:44:00,259:INFO:     ydata_profiling: Not installed
2024-09-27 15:44:00,259:INFO:  explainerdashboard: Not installed
2024-09-27 15:44:00,260:INFO:             autoviz: Not installed
2024-09-27 15:44:00,260:INFO:           fairlearn: Not installed
2024-09-27 15:44:00,260:INFO:          deepchecks: Not installed
2024-09-27 15:44:00,260:INFO:             xgboost: Not installed
2024-09-27 15:44:00,260:INFO:            catboost: Not installed
2024-09-27 15:44:00,260:INFO:              kmodes: Not installed
2024-09-27 15:44:00,260:INFO:             mlxtend: Not installed
2024-09-27 15:44:00,260:INFO:       statsforecast: Not installed
2024-09-27 15:44:00,260:INFO:        tune_sklearn: Not installed
2024-09-27 15:44:00,260:INFO:                 ray: Not installed
2024-09-27 15:44:00,260:INFO:            hyperopt: Not installed
2024-09-27 15:44:00,260:INFO:              optuna: Not installed
2024-09-27 15:44:00,260:INFO:               skopt: Not installed
2024-09-27 15:44:00,260:INFO:              mlflow: Not installed
2024-09-27 15:44:00,260:INFO:              gradio: Not installed
2024-09-27 15:44:00,260:INFO:             fastapi: Not installed
2024-09-27 15:44:00,260:INFO:             uvicorn: Not installed
2024-09-27 15:44:00,260:INFO:              m2cgen: Not installed
2024-09-27 15:44:00,260:INFO:           evidently: Not installed
2024-09-27 15:44:00,260:INFO:               fugue: Not installed
2024-09-27 15:44:00,260:INFO:           streamlit: Not installed
2024-09-27 15:44:00,260:INFO:             prophet: Not installed
2024-09-27 15:44:00,260:INFO:None
2024-09-27 15:44:00,260:INFO:Set up data.
2024-09-27 15:44:00,267:INFO:Set up folding strategy.
2024-09-27 15:44:00,267:INFO:Set up train/test split.
2024-09-27 15:44:00,274:INFO:Set up index.
2024-09-27 15:44:00,274:INFO:Assigning column types.
2024-09-27 15:44:00,279:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-27 15:44:00,328:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:44:00,329:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:44:00,362:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,362:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,414:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:44:00,414:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:44:00,446:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,447:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,447:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-27 15:44:00,499:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:44:00,529:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,529:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,580:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:44:00,611:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,611:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,611:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-27 15:44:00,691:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,691:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,771:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,771:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:00,772:INFO:Preparing preprocessing pipeline...
2024-09-27 15:44:00,773:INFO:Set up simple imputation.
2024-09-27 15:44:00,773:INFO:Set up imbalanced handling.
2024-09-27 15:44:00,802:INFO:Finished creating preprocessing pipeline.
2024-09-27 15:44:00,809:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-27 15:44:00,809:INFO:Creating final display dataframe.
2024-09-27 15:44:00,932:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              de97
2024-09-27 15:44:01,021:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:01,021:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:01,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:01,101:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:44:01,103:INFO:setup() successfully completed in 0.85s...............
2024-09-27 15:44:01,104:INFO:Initializing create_model()
2024-09-27 15:44:01,104:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB9161F1F0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:44:01,104:INFO:Checking exceptions
2024-09-27 15:44:01,117:INFO:Importing libraries
2024-09-27 15:44:01,118:INFO:Copying training dataset
2024-09-27 15:44:01,123:INFO:Defining folds
2024-09-27 15:44:01,123:INFO:Declaring metric variables
2024-09-27 15:44:01,126:INFO:Importing untrained model
2024-09-27 15:44:01,130:INFO:Logistic Regression Imported successfully
2024-09-27 15:44:01,137:INFO:Starting cross validation
2024-09-27 15:44:01,138:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:44:03,944:INFO:Calculating mean and std
2024-09-27 15:44:03,946:INFO:Creating metrics dataframe
2024-09-27 15:44:03,952:INFO:Finalizing model
2024-09-27 15:44:04,045:INFO:Uploading results into container
2024-09-27 15:44:04,045:INFO:Uploading model into container now
2024-09-27 15:44:04,055:INFO:_master_model_container: 1
2024-09-27 15:44:04,055:INFO:_display_container: 2
2024-09-27 15:44:04,056:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:44:04,056:INFO:create_model() successfully completed......................................
2024-09-27 15:44:04,206:INFO:Initializing finalize_model()
2024-09-27 15:44:04,206:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB9161F1F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-27 15:44:04,206:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:44:04,209:INFO:Initializing create_model()
2024-09-27 15:44:04,209:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB9161F1F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:44:04,210:INFO:Checking exceptions
2024-09-27 15:44:04,211:INFO:Importing libraries
2024-09-27 15:44:04,211:INFO:Copying training dataset
2024-09-27 15:44:04,212:INFO:Defining folds
2024-09-27 15:44:04,212:INFO:Declaring metric variables
2024-09-27 15:44:04,212:INFO:Importing untrained model
2024-09-27 15:44:04,212:INFO:Declaring custom model
2024-09-27 15:44:04,213:INFO:Logistic Regression Imported successfully
2024-09-27 15:44:04,214:INFO:Cross validation set to False
2024-09-27 15:44:04,214:INFO:Fitting Model
2024-09-27 15:44:04,322:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:44:04,322:INFO:create_model() successfully completed......................................
2024-09-27 15:44:04,465:INFO:_master_model_container: 1
2024-09-27 15:44:04,465:INFO:_display_container: 2
2024-09-27 15:44:04,473:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:44:04,473:INFO:finalize_model() successfully completed......................................
2024-09-27 15:44:04,635:INFO:Initializing save_model()
2024-09-27 15:44:04,636:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-27 15:44:04,636:INFO:Adding model into prep_pipe
2024-09-27 15:44:04,636:WARNING:Only Model saved as it was a pipeline.
2024-09-27 15:44:04,640:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-27 15:44:04,648:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:44:04,648:INFO:save_model() successfully completed......................................
2024-09-27 15:45:12,122:INFO:Initializing predict_model()
2024-09-27 15:45:12,123:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB9161F1F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DB98422A70>)
2024-09-27 15:45:12,123:INFO:Checking exceptions
2024-09-27 15:45:12,123:INFO:Preloading libraries
2024-09-27 15:45:12,125:INFO:Set up data.
2024-09-27 15:45:12,129:INFO:Set up index.
2024-09-27 15:50:57,325:INFO:PyCaret ClassificationExperiment
2024-09-27 15:50:57,325:INFO:Logging name: clf-default-name
2024-09-27 15:50:57,325:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-27 15:50:57,325:INFO:version 3.3.2
2024-09-27 15:50:57,325:INFO:Initializing setup()
2024-09-27 15:50:57,325:INFO:self.USI: d1d3
2024-09-27 15:50:57,326:INFO:self._variable_keys: {'USI', 'X_train', '_ml_usecase', 'y_test', 'idx', 'y_train', '_available_plots', 'fix_imbalance', 'html_param', 'memory', 'gpu_param', 'seed', 'target_param', 'logging_param', 'fold_groups_param', 'fold_generator', 'gpu_n_jobs_param', 'n_jobs_param', 'y', 'log_plots_param', 'fold_shuffle_param', 'exp_id', 'X_test', 'is_multiclass', 'exp_name_log', 'pipeline', 'data', 'X'}
2024-09-27 15:50:57,326:INFO:Checking environment
2024-09-27 15:50:57,326:INFO:python_version: 3.10.15
2024-09-27 15:50:57,326:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-27 15:50:57,326:INFO:machine: AMD64
2024-09-27 15:50:57,326:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-27 15:50:57,329:INFO:Memory: svmem(total=137338810368, available=125445447680, percent=8.7, used=11893362688, free=125445447680)
2024-09-27 15:50:57,330:INFO:Physical Core: 8
2024-09-27 15:50:57,330:INFO:Logical Core: 16
2024-09-27 15:50:57,330:INFO:Checking libraries
2024-09-27 15:50:57,330:INFO:System:
2024-09-27 15:50:57,330:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-27 15:50:57,330:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-27 15:50:57,330:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-27 15:50:57,330:INFO:PyCaret required dependencies:
2024-09-27 15:50:57,330:INFO:                 pip: 24.2
2024-09-27 15:50:57,330:INFO:          setuptools: 75.1.0
2024-09-27 15:50:57,330:INFO:             pycaret: 3.3.2
2024-09-27 15:50:57,330:INFO:             IPython: 8.27.0
2024-09-27 15:50:57,330:INFO:          ipywidgets: 8.1.5
2024-09-27 15:50:57,330:INFO:                tqdm: 4.66.5
2024-09-27 15:50:57,330:INFO:               numpy: 1.26.4
2024-09-27 15:50:57,330:INFO:              pandas: 2.1.4
2024-09-27 15:50:57,330:INFO:              jinja2: 3.1.4
2024-09-27 15:50:57,330:INFO:               scipy: 1.11.4
2024-09-27 15:50:57,330:INFO:              joblib: 1.3.2
2024-09-27 15:50:57,330:INFO:             sklearn: 1.4.2
2024-09-27 15:50:57,331:INFO:                pyod: 2.0.2
2024-09-27 15:50:57,331:INFO:            imblearn: 0.12.3
2024-09-27 15:50:57,331:INFO:   category_encoders: 2.6.3
2024-09-27 15:50:57,331:INFO:            lightgbm: 4.5.0
2024-09-27 15:50:57,331:INFO:               numba: 0.60.0
2024-09-27 15:50:57,331:INFO:            requests: 2.32.3
2024-09-27 15:50:57,331:INFO:          matplotlib: 3.7.5
2024-09-27 15:50:57,331:INFO:          scikitplot: 0.3.7
2024-09-27 15:50:57,331:INFO:         yellowbrick: 1.5
2024-09-27 15:50:57,331:INFO:              plotly: 5.24.1
2024-09-27 15:50:57,331:INFO:    plotly-resampler: Not installed
2024-09-27 15:50:57,331:INFO:             kaleido: 0.2.1
2024-09-27 15:50:57,331:INFO:           schemdraw: 0.15
2024-09-27 15:50:57,331:INFO:         statsmodels: 0.14.3
2024-09-27 15:50:57,331:INFO:              sktime: 0.26.0
2024-09-27 15:50:57,331:INFO:               tbats: 1.1.3
2024-09-27 15:50:57,331:INFO:            pmdarima: 2.0.4
2024-09-27 15:50:57,331:INFO:              psutil: 6.0.0
2024-09-27 15:50:57,331:INFO:          markupsafe: 2.1.5
2024-09-27 15:50:57,331:INFO:             pickle5: Not installed
2024-09-27 15:50:57,331:INFO:         cloudpickle: 3.0.0
2024-09-27 15:50:57,331:INFO:         deprecation: 2.1.0
2024-09-27 15:50:57,331:INFO:              xxhash: 3.5.0
2024-09-27 15:50:57,332:INFO:           wurlitzer: Not installed
2024-09-27 15:50:57,332:INFO:PyCaret optional dependencies:
2024-09-27 15:50:57,332:INFO:                shap: 0.46.0
2024-09-27 15:50:57,332:INFO:           interpret: Not installed
2024-09-27 15:50:57,332:INFO:                umap: Not installed
2024-09-27 15:50:57,332:INFO:     ydata_profiling: Not installed
2024-09-27 15:50:57,332:INFO:  explainerdashboard: Not installed
2024-09-27 15:50:57,332:INFO:             autoviz: Not installed
2024-09-27 15:50:57,332:INFO:           fairlearn: Not installed
2024-09-27 15:50:57,332:INFO:          deepchecks: Not installed
2024-09-27 15:50:57,332:INFO:             xgboost: Not installed
2024-09-27 15:50:57,332:INFO:            catboost: Not installed
2024-09-27 15:50:57,332:INFO:              kmodes: Not installed
2024-09-27 15:50:57,332:INFO:             mlxtend: Not installed
2024-09-27 15:50:57,332:INFO:       statsforecast: Not installed
2024-09-27 15:50:57,332:INFO:        tune_sklearn: Not installed
2024-09-27 15:50:57,332:INFO:                 ray: Not installed
2024-09-27 15:50:57,332:INFO:            hyperopt: Not installed
2024-09-27 15:50:57,332:INFO:              optuna: Not installed
2024-09-27 15:50:57,332:INFO:               skopt: Not installed
2024-09-27 15:50:57,332:INFO:              mlflow: Not installed
2024-09-27 15:50:57,332:INFO:              gradio: Not installed
2024-09-27 15:50:57,332:INFO:             fastapi: Not installed
2024-09-27 15:50:57,333:INFO:             uvicorn: Not installed
2024-09-27 15:50:57,333:INFO:              m2cgen: Not installed
2024-09-27 15:50:57,333:INFO:           evidently: Not installed
2024-09-27 15:50:57,333:INFO:               fugue: Not installed
2024-09-27 15:50:57,333:INFO:           streamlit: Not installed
2024-09-27 15:50:57,333:INFO:             prophet: Not installed
2024-09-27 15:50:57,333:INFO:None
2024-09-27 15:50:57,333:INFO:Set up data.
2024-09-27 15:50:57,338:INFO:Set up folding strategy.
2024-09-27 15:50:57,338:INFO:Set up train/test split.
2024-09-27 15:50:57,343:INFO:Set up index.
2024-09-27 15:50:57,343:INFO:Assigning column types.
2024-09-27 15:50:57,347:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-27 15:50:57,397:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:50:57,397:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:50:57,429:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,429:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,479:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:50:57,480:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:50:57,511:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,511:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,511:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-27 15:50:57,561:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:50:57,592:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,592:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,642:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:50:57,673:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,674:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,674:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-27 15:50:57,755:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,756:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,836:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,837:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:57,838:INFO:Preparing preprocessing pipeline...
2024-09-27 15:50:57,839:INFO:Set up simple imputation.
2024-09-27 15:50:57,839:INFO:Set up imbalanced handling.
2024-09-27 15:50:57,868:INFO:Finished creating preprocessing pipeline.
2024-09-27 15:50:57,874:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-27 15:50:57,874:INFO:Creating final display dataframe.
2024-09-27 15:50:57,999:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              d1d3
2024-09-27 15:50:58,088:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:58,088:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:58,168:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:58,169:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:50:58,170:INFO:setup() successfully completed in 0.85s...............
2024-09-27 15:50:58,171:INFO:Initializing create_model()
2024-09-27 15:50:58,171:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB947E1660>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:50:58,171:INFO:Checking exceptions
2024-09-27 15:50:58,185:INFO:Importing libraries
2024-09-27 15:50:58,185:INFO:Copying training dataset
2024-09-27 15:50:58,190:INFO:Defining folds
2024-09-27 15:50:58,190:INFO:Declaring metric variables
2024-09-27 15:50:58,194:INFO:Importing untrained model
2024-09-27 15:50:58,198:INFO:Logistic Regression Imported successfully
2024-09-27 15:50:58,205:INFO:Starting cross validation
2024-09-27 15:50:58,207:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:50:58,873:INFO:Calculating mean and std
2024-09-27 15:50:58,873:INFO:Creating metrics dataframe
2024-09-27 15:50:58,879:INFO:Finalizing model
2024-09-27 15:50:58,976:INFO:Uploading results into container
2024-09-27 15:50:58,976:INFO:Uploading model into container now
2024-09-27 15:50:58,987:INFO:_master_model_container: 1
2024-09-27 15:50:58,987:INFO:_display_container: 2
2024-09-27 15:50:58,987:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:50:58,988:INFO:create_model() successfully completed......................................
2024-09-27 15:50:59,140:INFO:Initializing finalize_model()
2024-09-27 15:50:59,140:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB947E1660>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-27 15:50:59,140:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:50:59,144:INFO:Initializing create_model()
2024-09-27 15:50:59,144:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB947E1660>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:50:59,144:INFO:Checking exceptions
2024-09-27 15:50:59,145:INFO:Importing libraries
2024-09-27 15:50:59,145:INFO:Copying training dataset
2024-09-27 15:50:59,146:INFO:Defining folds
2024-09-27 15:50:59,146:INFO:Declaring metric variables
2024-09-27 15:50:59,146:INFO:Importing untrained model
2024-09-27 15:50:59,146:INFO:Declaring custom model
2024-09-27 15:50:59,146:INFO:Logistic Regression Imported successfully
2024-09-27 15:50:59,147:INFO:Cross validation set to False
2024-09-27 15:50:59,147:INFO:Fitting Model
2024-09-27 15:50:59,262:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:50:59,262:INFO:create_model() successfully completed......................................
2024-09-27 15:50:59,410:INFO:_master_model_container: 1
2024-09-27 15:50:59,410:INFO:_display_container: 2
2024-09-27 15:50:59,417:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:50:59,417:INFO:finalize_model() successfully completed......................................
2024-09-27 15:50:59,575:INFO:Initializing save_model()
2024-09-27 15:50:59,575:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-27 15:50:59,575:INFO:Adding model into prep_pipe
2024-09-27 15:50:59,575:WARNING:Only Model saved as it was a pipeline.
2024-09-27 15:50:59,580:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-27 15:50:59,587:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:50:59,588:INFO:save_model() successfully completed......................................
2024-09-27 15:52:07,429:INFO:Initializing predict_model()
2024-09-27 15:52:07,429:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB947E1660>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DB97460820>)
2024-09-27 15:52:07,430:INFO:Checking exceptions
2024-09-27 15:52:07,430:INFO:Preloading libraries
2024-09-27 15:52:07,432:INFO:Set up data.
2024-09-27 15:52:07,436:INFO:Set up index.
2024-09-27 15:53:55,545:INFO:PyCaret ClassificationExperiment
2024-09-27 15:53:55,545:INFO:Logging name: clf-default-name
2024-09-27 15:53:55,545:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-27 15:53:55,545:INFO:version 3.3.2
2024-09-27 15:53:55,545:INFO:Initializing setup()
2024-09-27 15:53:55,545:INFO:self.USI: cd3d
2024-09-27 15:53:55,545:INFO:self._variable_keys: {'USI', 'X_train', '_ml_usecase', 'y_test', 'idx', 'y_train', '_available_plots', 'fix_imbalance', 'html_param', 'memory', 'gpu_param', 'seed', 'target_param', 'logging_param', 'fold_groups_param', 'fold_generator', 'gpu_n_jobs_param', 'n_jobs_param', 'y', 'log_plots_param', 'fold_shuffle_param', 'exp_id', 'X_test', 'is_multiclass', 'exp_name_log', 'pipeline', 'data', 'X'}
2024-09-27 15:53:55,546:INFO:Checking environment
2024-09-27 15:53:55,546:INFO:python_version: 3.10.15
2024-09-27 15:53:55,546:INFO:python_build: ('main', 'Sep 20 2024 16:26:40')
2024-09-27 15:53:55,546:INFO:machine: AMD64
2024-09-27 15:53:55,546:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-27 15:53:55,550:INFO:Memory: svmem(total=137338810368, available=125101764608, percent=8.9, used=12237045760, free=125101764608)
2024-09-27 15:53:55,550:INFO:Physical Core: 8
2024-09-27 15:53:55,550:INFO:Logical Core: 16
2024-09-27 15:53:55,550:INFO:Checking libraries
2024-09-27 15:53:55,550:INFO:System:
2024-09-27 15:53:55,550:INFO:    python: 3.10.15 | packaged by conda-forge | (main, Sep 20 2024, 16:26:40) [MSC v.1941 64 bit (AMD64)]
2024-09-27 15:53:55,550:INFO:executable: c:\Users\Woomy\anaconda3\envs\incidencias\python.exe
2024-09-27 15:53:55,550:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-27 15:53:55,550:INFO:PyCaret required dependencies:
2024-09-27 15:53:55,550:INFO:                 pip: 24.2
2024-09-27 15:53:55,550:INFO:          setuptools: 75.1.0
2024-09-27 15:53:55,550:INFO:             pycaret: 3.3.2
2024-09-27 15:53:55,551:INFO:             IPython: 8.27.0
2024-09-27 15:53:55,551:INFO:          ipywidgets: 8.1.5
2024-09-27 15:53:55,551:INFO:                tqdm: 4.66.5
2024-09-27 15:53:55,551:INFO:               numpy: 1.26.4
2024-09-27 15:53:55,551:INFO:              pandas: 2.1.4
2024-09-27 15:53:55,551:INFO:              jinja2: 3.1.4
2024-09-27 15:53:55,551:INFO:               scipy: 1.11.4
2024-09-27 15:53:55,551:INFO:              joblib: 1.3.2
2024-09-27 15:53:55,551:INFO:             sklearn: 1.4.2
2024-09-27 15:53:55,551:INFO:                pyod: 2.0.2
2024-09-27 15:53:55,551:INFO:            imblearn: 0.12.3
2024-09-27 15:53:55,551:INFO:   category_encoders: 2.6.3
2024-09-27 15:53:55,551:INFO:            lightgbm: 4.5.0
2024-09-27 15:53:55,551:INFO:               numba: 0.60.0
2024-09-27 15:53:55,551:INFO:            requests: 2.32.3
2024-09-27 15:53:55,551:INFO:          matplotlib: 3.7.5
2024-09-27 15:53:55,551:INFO:          scikitplot: 0.3.7
2024-09-27 15:53:55,551:INFO:         yellowbrick: 1.5
2024-09-27 15:53:55,551:INFO:              plotly: 5.24.1
2024-09-27 15:53:55,551:INFO:    plotly-resampler: Not installed
2024-09-27 15:53:55,551:INFO:             kaleido: 0.2.1
2024-09-27 15:53:55,551:INFO:           schemdraw: 0.15
2024-09-27 15:53:55,551:INFO:         statsmodels: 0.14.3
2024-09-27 15:53:55,551:INFO:              sktime: 0.26.0
2024-09-27 15:53:55,552:INFO:               tbats: 1.1.3
2024-09-27 15:53:55,552:INFO:            pmdarima: 2.0.4
2024-09-27 15:53:55,552:INFO:              psutil: 6.0.0
2024-09-27 15:53:55,552:INFO:          markupsafe: 2.1.5
2024-09-27 15:53:55,552:INFO:             pickle5: Not installed
2024-09-27 15:53:55,552:INFO:         cloudpickle: 3.0.0
2024-09-27 15:53:55,552:INFO:         deprecation: 2.1.0
2024-09-27 15:53:55,552:INFO:              xxhash: 3.5.0
2024-09-27 15:53:55,552:INFO:           wurlitzer: Not installed
2024-09-27 15:53:55,552:INFO:PyCaret optional dependencies:
2024-09-27 15:53:55,552:INFO:                shap: 0.46.0
2024-09-27 15:53:55,552:INFO:           interpret: Not installed
2024-09-27 15:53:55,552:INFO:                umap: Not installed
2024-09-27 15:53:55,552:INFO:     ydata_profiling: Not installed
2024-09-27 15:53:55,552:INFO:  explainerdashboard: Not installed
2024-09-27 15:53:55,552:INFO:             autoviz: Not installed
2024-09-27 15:53:55,552:INFO:           fairlearn: Not installed
2024-09-27 15:53:55,552:INFO:          deepchecks: Not installed
2024-09-27 15:53:55,552:INFO:             xgboost: Not installed
2024-09-27 15:53:55,552:INFO:            catboost: Not installed
2024-09-27 15:53:55,552:INFO:              kmodes: Not installed
2024-09-27 15:53:55,552:INFO:             mlxtend: Not installed
2024-09-27 15:53:55,552:INFO:       statsforecast: Not installed
2024-09-27 15:53:55,553:INFO:        tune_sklearn: Not installed
2024-09-27 15:53:55,553:INFO:                 ray: Not installed
2024-09-27 15:53:55,553:INFO:            hyperopt: Not installed
2024-09-27 15:53:55,553:INFO:              optuna: Not installed
2024-09-27 15:53:55,553:INFO:               skopt: Not installed
2024-09-27 15:53:55,553:INFO:              mlflow: Not installed
2024-09-27 15:53:55,553:INFO:              gradio: Not installed
2024-09-27 15:53:55,553:INFO:             fastapi: Not installed
2024-09-27 15:53:55,553:INFO:             uvicorn: Not installed
2024-09-27 15:53:55,553:INFO:              m2cgen: Not installed
2024-09-27 15:53:55,553:INFO:           evidently: Not installed
2024-09-27 15:53:55,553:INFO:               fugue: Not installed
2024-09-27 15:53:55,553:INFO:           streamlit: Not installed
2024-09-27 15:53:55,553:INFO:             prophet: Not installed
2024-09-27 15:53:55,553:INFO:None
2024-09-27 15:53:55,553:INFO:Set up data.
2024-09-27 15:53:55,558:INFO:Set up folding strategy.
2024-09-27 15:53:55,558:INFO:Set up train/test split.
2024-09-27 15:53:55,564:INFO:Set up index.
2024-09-27 15:53:55,564:INFO:Assigning column types.
2024-09-27 15:53:55,568:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-27 15:53:55,619:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:53:55,620:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:53:55,652:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:55,652:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:55,702:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-27 15:53:55,704:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:53:55,735:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:55,735:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:55,736:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-27 15:53:55,787:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:53:55,819:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:55,819:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:55,871:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-27 15:53:55,903:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:55,903:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:55,904:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-27 15:53:55,988:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:55,989:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:56,072:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:56,072:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:56,074:INFO:Preparing preprocessing pipeline...
2024-09-27 15:53:56,075:INFO:Set up simple imputation.
2024-09-27 15:53:56,075:INFO:Set up imbalanced handling.
2024-09-27 15:53:56,105:INFO:Finished creating preprocessing pipeline.
2024-09-27 15:53:56,112:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2024-09-27 15:53:56,112:INFO:Creating final display dataframe.
2024-09-27 15:53:56,239:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target       loan_status
2                   Target type            Binary
3           Original data shape        (4269, 12)
4        Transformed data shape        (4999, 12)
5   Transformed train set shape        (3718, 12)
6    Transformed test set shape        (1281, 12)
7              Numeric features                11
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                Fix imbalance              True
13         Fix imbalance method             SMOTE
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              cd3d
2024-09-27 15:53:56,327:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:56,328:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:56,410:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:56,411:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-27 15:53:56,412:INFO:setup() successfully completed in 0.87s...............
2024-09-27 15:53:56,413:INFO:Initializing create_model()
2024-09-27 15:53:56,413:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB967D3310>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:53:56,413:INFO:Checking exceptions
2024-09-27 15:53:56,428:INFO:Importing libraries
2024-09-27 15:53:56,428:INFO:Copying training dataset
2024-09-27 15:53:56,433:INFO:Defining folds
2024-09-27 15:53:56,433:INFO:Declaring metric variables
2024-09-27 15:53:56,437:INFO:Importing untrained model
2024-09-27 15:53:56,440:INFO:Logistic Regression Imported successfully
2024-09-27 15:53:56,449:INFO:Starting cross validation
2024-09-27 15:53:56,451:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-27 15:53:59,164:INFO:Calculating mean and std
2024-09-27 15:53:59,165:INFO:Creating metrics dataframe
2024-09-27 15:53:59,172:INFO:Finalizing model
2024-09-27 15:53:59,272:INFO:Uploading results into container
2024-09-27 15:53:59,273:INFO:Uploading model into container now
2024-09-27 15:53:59,282:INFO:_master_model_container: 1
2024-09-27 15:53:59,282:INFO:_display_container: 2
2024-09-27 15:53:59,283:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:53:59,283:INFO:create_model() successfully completed......................................
2024-09-27 15:53:59,434:INFO:Initializing finalize_model()
2024-09-27 15:53:59,435:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB967D3310>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-27 15:53:59,435:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-27 15:53:59,438:INFO:Initializing create_model()
2024-09-27 15:53:59,438:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB967D3310>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-27 15:53:59,438:INFO:Checking exceptions
2024-09-27 15:53:59,440:INFO:Importing libraries
2024-09-27 15:53:59,440:INFO:Copying training dataset
2024-09-27 15:53:59,440:INFO:Defining folds
2024-09-27 15:53:59,440:INFO:Declaring metric variables
2024-09-27 15:53:59,441:INFO:Importing untrained model
2024-09-27 15:53:59,441:INFO:Declaring custom model
2024-09-27 15:53:59,441:INFO:Logistic Regression Imported successfully
2024-09-27 15:53:59,442:INFO:Cross validation set to False
2024-09-27 15:53:59,442:INFO:Fitting Model
2024-09-27 15:53:59,554:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:53:59,554:INFO:create_model() successfully completed......................................
2024-09-27 15:53:59,701:INFO:_master_model_container: 1
2024-09-27 15:53:59,701:INFO:_display_container: 2
2024-09-27 15:53:59,709:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:53:59,709:INFO:finalize_model() successfully completed......................................
2024-09-27 15:53:59,867:INFO:Initializing save_model()
2024-09-27 15:53:59,867:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=final_logistic_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Woomy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transf...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-27 15:53:59,867:INFO:Adding model into prep_pipe
2024-09-27 15:53:59,867:WARNING:Only Model saved as it was a pipeline.
2024-09-27 15:53:59,872:INFO:final_logistic_regression_model.pkl saved in current working directory
2024-09-27 15:53:59,879:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-09-27 15:53:59,880:INFO:save_model() successfully completed......................................
2024-09-27 15:55:08,284:INFO:Initializing predict_model()
2024-09-27 15:55:08,284:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DB967D3310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['no_of_dependents', 'education',
                                             'self_employed', 'income_annum',
                                             'loan_amount', 'loan_term',
                                             'cibil_score',
                                             'residential_assets_value',
                                             'commercial_assets_value',
                                             'luxury_assets_value',
                                             'bank_asset_value'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=42,
                                                                              sampling_strategy='auto')))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=42,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DB98CB45E0>)
2024-09-27 15:55:08,284:INFO:Checking exceptions
2024-09-27 15:55:08,284:INFO:Preloading libraries
2024-09-27 15:55:08,287:INFO:Set up data.
2024-09-27 15:55:08,291:INFO:Set up index.
